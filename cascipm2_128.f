	SUBROUTINE CASCIP
CMN	PROGRAM CASCADE

C Evaporation code based on the statistical theory for compound-nucleus
C reactions (Hauser-Feshbach theory). A description of the formalism used is
C given in Nucl.Phys.A280(1977)267.
C F. Puehlhofer, GSI Darmstadt.

C This is the version CASCADE I	(April 1980)

C EFG	Modified as described below by Elspeth Garman ,N.P.L. OXFORD, May 1982.
C FZ	Modified as described below by F. Zwarts, K.V.I. Groningen, Aug. 1982.
C MNH	Modified as described below by M.N. Harakeh ,N.P.L. Seattle, July 1983.
c Nov-2000 M.Yosoi   Rev. for IBM/AIX-xlf  / last rev. Jan-2002

C FILE 10: Mass table, generated by EBTABLE separately as a permanent file,
C	   read in main.
C FILE 11: Table of transmission coefficients, generated by TLCALC separately
C	   as a permanent file,	read by subroutine TSUMME.
C	   Direct access F. Zwarts.
C FILE 12: Temporary storage of level density matrices (RTABLE, GETRHO).
C	   Space: IPSMAX * 32 Kbyte maximum.
C	   Direct access F. Zwarts.
C FILE 13: Temporary storage of population matrices (GETW, STOREW).
C	   Space: ITMAX * 16 Kbyte maximum.
C EFG	   Direct Access file now - see below.
C FILE 14: Scratch file for subroutine CLEAN, same size as 13.
C EFG	   Not needed in the present version.

C EFG	**********************************************************************
C EFG	Changes to programming in this version of CASCADE
C EFG
C EFG	1/  Notes about FILE 12 & 13 (direct access). All input/output to/from
C EFG   these files conforms to the DEC VAX 11/780 standards. Files are
C EFG   defined in the DEFFIL subroutine and new versions of GETW, STOREW,
C EFG   CLEAN, GETRHO and RTABLE are provided.
C EFG	See DEFFIL for adaption of file-defining statements to other compilers.
C EFG	READ(K,REC=N) means : binary read record number N from unit number K.
C EFG	2/  All PRINT statements have been changed to WRITE(K,format number)
C EFG	3/  A file called 'CASCADE.PLO' is opened in subroutine OUTS and
C EFG	the summed evaporation spectrum of gamma rays is written to it. If the
C EFG	cutoffs are set low so that the spectra for individual exit channels
C EFG	are printed out, a plot file for each channel is produced with
C EFG	successive version numbers,X.i.e.CASCADE.PLO;X
C EFG	**********************************************************************
C EFG	**********************************************************************
C EFG 	Notes on modifications to physics in this version of CASCADE.
C EFG
C EFG	A/ The gamma-ray spectrum emitted from the compound nucleus is now
C EFG	  included. However, if the first gamma ray comes from the initial
C EFG	  compound nucleus, the rest of this decay chain is not calculated.
C EFG	  Changes necessary were provided by F. Puehlhofer.
C EFG
C EFG	B/ A Lorentzian GDR strength function can be included in the
C EFG	  transmission coefficients. If the input E1 strength (input card 10)
C EFG	  is set negative, an extra input line is read by the program (input
C MNH	  card 10a) to specify the GDR strength (in fraction of the classical
C MNH	  dipole sum rule) , excitation energy and FWHM. Also a double
C MNH	  Lorentzian representing isoscalar and isovector giant quadrupole
C MNH	  strength can be added by using negative input E2 strength on card 10.
C MNH	  In this case the absolute value of the E2 strength is assumed to be
C MNH	  the strength in single particle units for E2 transitions at an
C MNH	  excitation energy of 1 MeV. This is then assumed to decrease
C MNH	  inversely proportional to the excitation energy up to an energy
C MNH	  which is one third the energy of the isoscalar GQR. Above this energy
C MNH	  the strength function of the GQR's as specified on the extra card 10b
C MNH	  read by the program for the parameters of the isoscalar and isovector
C MNH	  GQR. All strengths of GR are in fractions of the classical sum rules.
C EFG
C EFG	C/ The GDR can be represented by a double Lorentzian by putting input
C MNH	  card 10a in as: FGDR1, EGDR1, GGDR1, FGDR2, EGDR2, GGDR2, where the
C MNH	  first entry is the fraction strength in the first Lorentzian and
C MNH	  FGDR2 = fraction strength in the second Lorentzian.
C EFG
C EFG	D/ A mistake in the BNL changes regarding the energy dependent cutoff
C EFG	  has been corrected by adding 2 lines after CA 495.
C MNH
C MNH	E/ The program was modified so that all gamma-ray strengths read on
C MNH	  card 10 are now in Weisskopf single particle units.
C MNH
C MNH	Added changes to print multiplicity of gamma-rays
C MNH	(array GMULT= gamma cross section in nucleus IPS/Residual cross sect)
C EFG	***********************************************************************
C******************************************************************************
C MNH	M.N. HARAKEH. Nucl.Phys.Lab.,Univ. of Washington, Seattle, WA 981195.
C MNH	July 1983
C MNH	Rewrote large parts of the program to include parity and isospin
C MNH	formalism properly in population matrices, level density matrices and
C MNH	decay probabilities.
C******************************************************************************
C FZ	Direct access	F. Zwarts.

C EFG	E.F. Garman, Oxford, U.K. March 1982.
C EFG	Changed all 'PRINT' statements to 'WRITE' and 'OPEN' statement to
C EFG	VAX 11/780 format.
C FZ	F. Zwarts, K.V.I. Groningen NL.
C FZ	Added ANSI FORTRAN'77 OPEN statements for all work files.
C MNH	Changed program to do calculations in good isospin and parity formalism
C MNH	accounting properly also for parity and isospin nature of electro-
C MNH	magnetic transitions.
C MNH	Added subroutine IAS to calculate excitation energy of isobaric
C MNH	analogue states which is called in subroutine DILG.
C FZ	Added variable energy step size.
C FZ	Changed formatted reads into ANSI FORTRAN'77 free formatted reads
C FZ	except: card 1 and card 15b (which handle character input).
C FZ	Following input has been changed:
C FZ	Card 2:	ELAB interpreted as EXCN if JCN.GE.0 and IAP=0
C FZ	Card 3:	IP12 0: even, 1: odd,<0: unknown parity; 2: identical 0+ nuclei
C FZ		JCN if <0 use distribution of card 6, else fix JCN
C MNH		added ITZT= isospin of compound nucleus if JCN.GE.0
C MNH		          = 1 for T<   ; = 2 for T>
C MNH		INDPAR= 0 do not use option for different level densities for
C MNH		          negative and positive parities for even-even nuclei
C MNH		      = 1 use
C MNH		INDIS = 0 do not print Clebsch-Gordon coefficients or level
C MNH		          densities
C MNH		      = 1 print Clebsch-Gordon coefficients relevant to
C MNH		          particle and gamma-decay
C MNH		      = 2 print total level densities of various nuclei in
C MNH			  cascade
C MNH		      = 3 print level densities of various nuclei in cascade
C MNH			  for all angular momenta, parities and isospin
C MNH		      = 9 print both Clebsch-Gordon coefficients, relevant to
C MNH		          particle and gamma-decay, and level densities
C MNH		AMIX  = isospin mixing coefficient
C MNH		BMIX  = isospin mixing coefficient
C MNH		Isospin mixing is given by : AMIX + BMIX*EX
C MNH
C MNH	Card 5:	IZE4,IAE4,JE4,IPE4,EXC4,IZFF,DAF,FB
C FZ		IPE4 added (parity for 4th decay) 0: even, 1: odd, else unknown
C MNH		EXC4 added excitation energy of 4th decay particle
C FZ	Card 12:EXR0,EXH,CJC,LC0,ESTEP
C FZ		ESTEP added (energy step size for population matrices) [1 MeV]
C FZ	Card 15: card b: pi (0 or blank): ignore level, +: even, -: odd parity
C FZ				any other character: undefined parity
C FZ	Some general cleanup using ANSI FORTRAN'77
C MNH	A number of extra changes have been documented in writeup CASCADE.WRT
C MNH	and the accompanying report on these changes.
c Nov-2000 M.Yosoi   Rev. for IBM/AIX-xlf
c Sep-2001 M.Yosoi   Rev. for Linux

C	size of arrays in EKIN dimension
	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( KIN_GAM = KIN_PAR )
	PARAMETER	( KIN_COU = 18*KIN_PAR/32 )
C MNH	This is a sort of Coulomb barrier cutoff below which no transmission
C MNH	coefficients are calculated. It could be as high as 18 MeV or more 
C MNH	for heavy fourth particle and heavy nuclei. If ESTEP is much less
C MNH	than 0.5 MeV then this parameter has to be readjusted.
	PARAMETER	( KIN_MAX = KIN_PAR + KIN_COU )
C MNH	size of population matrix: excitation energy range and spin dimension
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	 = 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),ESTEP
	COMMON IEXXL(NUCL),ESEP(4,NUCL),JMIN(NUCL),JMAX(NUCL),
     1         JJMAX(NUCL)

	COMMON/C2/ FT(NUCL),DA(NUCL),DELTA(NUCL),DELTA1(NUCL),CK(NUCL)
	COMMON/C2/ R0LDM,DEF,DEFS,DALDM,DAF,UTR,ULDM,UJTR,UJLDM,
     1             DLDM(NUCL)

	COMMON/C3/ IPSLVX,IZLV(100),IALV(100),EXLVX(100),LVMAX(100)
	COMMON/C3/ EXLV(50,100),JLV(50,100),LVPARI(50,100)

	COMMON/C4/ ITMAX,INHWT(NUCL),IWL
	COMMON/C5/ WT0(L_EX_DIM,L_DIM,2,2), WT(L_EX_DIM,L_DIM,2,2,4)
	COMMON/C6/ TSUM(KIN_PAR,32,31,4),RHO(L_EX_DIM,L_DIM,2,2,5)
	COMMON/C6/ W(L_EX_DIM,L_DIM,2,2,4),WF(L_EX_DIM,L_DIM,2,2)

	COMMON/C7/ WG(L_EX_DIM,5,2,2),WGZ(L_EX_DIM,L_DIM,2,2)
	COMMON/C7/ LZ(L_EX_DIM,L_DIM,2,2),LZF(L_EX_DIM,L_DIM,2,2)
	COMMON/C7/ SE(KIN_PAR,5),SESUM(KIN_MAX,5)

	COMMON /SB/ EXCN

	COMMON/ISO/ ISPIN,INDPAR,INDIS,AMIX,BMIX,MINFIT
	COMMON/CASCMIN/ INDCASC

	DIMENSION EB(128,144)
c	EQUIVALENCE (EB(1),TSUM(1))
	EQUIVALENCE (EB(1,1),TSUM(1,1,1,1))
	DIMENSION WQR(30,40)
c	EQUIVALENCE (WQR(1),WGZ(1))
	EQUIVALENCE (WQR(1,1),WGZ(1,1,1,1))
	DIMENSION WT_TEMP(4*L_DIM),J_TEMP(4*L_DIM),IP_TEMP(4*L_DIM),
     1    IS_TEMP(4*L_DIM)
	DIMENSION WQA(30),WQ(NUCL),WQT(NUCL),WQF(NUCL),GMULT(NUCL)
	DIMENSION MPOL(5),TLG(KIN_GAM,2,2,2),ENH(L_DIM),FCG(2,2,4),
     1    GCG(2,2,2)
	DIMENSION JJXXXZ(4),JJMINZ(4)
	DIMENSION SUMW(4),ISUMW(4),ZW(4),SCN(2),IEXXXZ(4),ICZF(4)
	DIMENSION EMINT(4),EBC(3)
	DIMENSION CLV(4),EXL(8),JL(8),IL(8)
	CHARACTER*1 BLANK,NULL,PLUS,MINUS,INRHOP,INLEVL,IP,IL,LOW,UP
	CHARACTER TEXT*80,PLOT*40,PL*8
	PARAMETER (BLANK=' ',NULL='0',PLUS='+',MINUS='-',
     1     LOW='<',UP='>')
	PARAMETER (XIMIN = 1E-15,RHOGR = 0.14)
C MNH   Maximum and minimum reals for a VAX-computer are about EXP(88.) and
C MNH   EXP(-88.), respectively
	PARAMETER ( REAL_MAX = 88. )

	REAL*8 CG,TZCN,TCNL,TCNH,TZT,TT,TZPE,TPE,TZP,TPL,TPH,TZD,
     1      TDL,TDH,TZPP,TPP
	REAL*4 LOR1,LOR2
	REAL*8 PAR(15)

	ABSMIN=EXP(-REAL_MAX)
	ABSMAX=EXP(REAL_MAX)

	ISPIN = 2
	INDPAR = 0
	INDIS = 0
	AMIX = 0
	BMIX = 0
	MINFIT = 0
	MPOL(1)=2
	MPOL(2)=1
	MPOL(3)=1
	MPOL(4)=1
	MPOL(5)=2
C Define spin, parity, mass, charge and binding energy for decay particle
C Neutron
	JE(1) = 1
	IPE(1) = 0
	IAE(1) = 1
	IZE(1) = 0
	EBE(1) = 0
C Proton
	JE(2) = 1
	IPE(2) = 0
	IAE(2) = 1
	IZE(2) = 1
	EBE(2) = 0
C Alpha
	JE(3) = 0
	IPE(3) = 0
	IAE(3) = 4
	IZE(3) = 2
	EBE(3) = 28.297

c open statement is moved to TSUMME
c	OPEN(UNIT=11,STATUS='OLD',FILE='TLCALC.DAT')
cc     1	,FORM='UNFORMATTED',RECL=KIN_PAR*128)
c    1	,FORM='UNFORMATTED',RECL=KIN_PAR*32,ACCESS='DIRECT')
c    1	,READONLY,SHARED		! Not ANSI FORTRAN
c    1	)

	OPEN(UNIT=12,STATUS='UNKNOWN',FILE='LEVDENS.TMP'
     1	,FORM='UNFORMATTED',ACCESS='DIRECT'
     1  ,RECL=L_EX_DIM*L_DIM/2*4)
c     1  ,RECL=L_EX_DIM*L_DIM/2)

	OPEN(UNIT=13,STATUS='UNKNOWN',FILE='POPULMAT.TMP'
     1	,FORM='UNFORMATTED',ACCESS='DIRECT'
     1  ,RECL=L_EX_DIM*L_DIM/2*4)
c     1  ,RECL=L_EX_DIM*L_DIM/2)

19	INRHOP = MINUS
	INLEVL = MINUS
	INDENT=0
	IND1 = 0
	IND2 = 0
C Input
	READ (*,'(A)',END=1000) TEXT
	READ *, IZP,IAP,IZT,IAT,ELAB
	IF (IAT.EQ.0) GO TO 1000
C More input; Start next run
	READ *, JP,JT,IP12,JCN,ITZT,INDPAR,INDIS,AMIX,BMIX
	READ *, KOPTK,IPS1,IPSMAX,NNX,NPX,NAX
	READ *, IZE(4),IAE(4),JE(4),IPE(4),EXC4,IZFF,DAF,FFB
	IF(JCN.NE.999) THEN
	  READ *, CL0,DIFF,SIGMCN
	ELSE
	  INDENT=1
	  JCN=1
	  II=1
20	  READ(*,21) IP,IL(1),J_TEMP(II),WT_TEMP(II)
21	  FORMAT(2A,I3,F8.0)
	  write(*,*)IP,IL(1),J_TEMP(II),WT_TEMP(II),II
	  IF(IP.EQ.'E') GO TO 22
	  IF(IP.EQ.PLUS) THEN
	    IP_TEMP(II)=1
	  ELSEIF(IP.EQ.MINUS) THEN
	    IP_TEMP(II)=2
	  ELSE
	    STOP 'Undefined entrance channel parity'
	  ENDIF
	  IF(IL(1).EQ.LOW) THEN
	    IS_TEMP(II)=1
	  ELSEIF(IL(1).EQ.UP) THEN
	    IS_TEMP(II)=2
	  ELSE
	    STOP 'Undefined entrance channel isospin'
	  ENDIF
	  JCN=MAX(J_TEMP(II),JCN)
	  II=II+1
	  IF(II.GT.4*L_DIM) GO TO 22
	  GO TO 20
	ENDIF
22	CONTINUE
	READ *, FTHETA,KOPTLD
	READ *, DALDM,UTR,ULDM,UJTR,UJLDM,KOPTLQ,KOPTEB
	READ *, R0LDM,DEF,DEFS
	READ *, XYE1,XYM1,XYE2,CJG1,CJG2,XYENH,GMIN
	IF(XYE1.LT.0.) THEN
	  READ *, FGDR1,EGDR1,GGDR1,FGDR2,EGDR2,GGDR2
	  XYE1 = ABS(XYE1)
	  IND1 = 1
	ENDIF
	IF(XYE2.LT.0.) THEN
	  READ *, FISQR,EISQR,GISQR,FIVQR,EIVQR,GIVQR
	  XYE2 = ABS(XYE2)
	  IND2 = 1
	ENDIF
	READ *, WGR,CGR,CVCBE,CVCB,VK,CVK
	READ *, EXR0,EXH,CJC,LCO,ESTEP
	READ *, KOUTW,KOUTL,KEVAP,KGAMMA
C Additional input in KASKAD and statements 47,48,483

	GO TO 23
CMN	Entry for minimization routine
	ENTRY CASCHLP(PAR,NIND)
	FGDR1=PAR(2)
	EGDR1=PAR(3)
	GGDR1=PAR(4)
	AMIX =PAR(5)
	BMIX =PAR(6)
	MINFIT=1
	IF(NIND.NE.0) MINFIT=2
23	CONTINUE

	IF(INDCASC.EQ.0) THEN
	  OPEN(UNIT=1,STATUS='UNKNOWN',FILE='CASCADE.OUT')
	ELSE
	  OPEN(UNIT=1,STATUS='UNKNOWN',FILE='CASCADE.OUT')
	ENDIF
C Default values and derived parameters
	IZCN = IZP + IZT
	IACN = IAP + IAT
	ACN = IACN
	ACN13 = ACN**(1./3.)
	ACN23 = ACN13*ACN13
	EXCN = 0

C MNH	Isospin Clebsch-Gordon coefficients for good isospin compound states.
C MNH	In this version only T< and T> states are considered.
	TZCN=IACN/2.-IZCN
	TCNL=ABS(TZCN)
	TCNH=TCNL+1.
	TZT=IAT/2.-IZT
	TZPE=IAP/2.-IZP
	TT=ABS(TZT)
	TPE=ABS(TZPE)
	CGL=CG(TT,TZT,TPE,TZPE,TCNL,TZCN)
	CGL=CGL*CGL
	CGH=CG(TT,TZT,TPE,TZPE,TCNH,TZCN)
	CGH=CGH*CGH
	IF(INDIS.EQ.1.OR.INDIS.EQ.9) WRITE(1,1) CGL,CGH
1	FORMAT(' COMPOUND NUCLEUS Isospin Clebsch-Gordon coefficients'
     1         ,': CGL =',E12.6,'  CGH =',E12.6)

	IF (IAP.EQ.0 .AND. JCN.GE.0) THEN
	  EXCN = ELAB
	  ELAB = 0
	ENDIF
	IF (MOD(JP,2).EQ.0) JP = JP + MOD(IAP,2)
	IF (MOD(JT,2).EQ.0) JT = JT + MOD(IAT,2)
	IF (MOD(IAP,2).EQ.0) JP = 2*JP
	IF (MOD(IAT,2).EQ.0) JT = 2*JT
	IF (MOD(IAE(4),2).EQ.0) JE(4) = 2 * JE(4)
C FZ	If 4th parity out of range mark as unknown
	IF( IPE(4).GE.2 .OR. IPE(4).LT.0 ) IPE(4) = -1
C FZ	If CN parity out of range, mark as unknown
	IF (IP12.GT.2 .OR. IP12.LT.0) IP12 = -1
	IZFMAX = 3
	IF (IAE(4).NE.0) IZFMAX = 4
	DO 282 IZF=1,IZFMAX
282	JDE(IZF) = MOD( JE(IZF), 2 )
	IF (FFB.LE.0.01) FFB = 1
C DAF is set after DALDM in LQPARM
	ARED = IAT*IAP/ACN
	ECM = ELAB*IAT/ACN
	IF (IAP.NE.0) CSL = 655.17/(ARED*ECM)
	IF (IAP.NE.0 .AND. JCN.LT.0 .AND. CL0.LE.0.01 .AND.
     1	SIGMCN.GT.0.01) CL0 = SQRT(SIGMCN/CSL) - 0.5
	IF (IAP.NE.0 .AND. JCN.LT.0 .AND. ABS(CL0).LT.0.01)
     1	CL0 = CLFUS(IZP,IAP,IZT,IAT,ELAB)
	IF (IAP.EQ.0 .AND. JCN.LT.0 .AND. ABS(CL0).LE.0.01)
     1	CL0 = 10
	IF (DIFF.LE.0.1) DIFF = 2
	IF(FTHETA.LT.0.01) FTHETA = 0.85
	DO 286 IPS=1,NUCL
286	FT(IPS) = FTHETA
C Default values for level density parameters in LQPARM, LDPARM
	ALPHA2 = 0
	IF (XYE1.LE.XIMIN) XYE1 = 1E-4
	IF (XYM1.LE.XIMIN) XYM1 = 3E-2
	IF (XYE2.LE.XIMIN) XYE2 = 5
	IF (IND1.EQ.0) THEN
	  XIE1 = XYE1 * 0.427E-6 * ACN23
	ELSE
	  XIE1=2.09E-5*IZCN*(IACN-IZCN)/ACN
	ENDIF
	WRITE(1, 5558)XIE1
 5558	FORMAT('/ XIE1=',E10.4)
	XIM1 = XYM1 * 1.32E-7
	XIE2 = XYE2 * 0.308E-12 * ACN23*ACN23
	IF (IND2.EQ.1) THEN
	  RMS = 0.752*ACN23 + 2.890
	  XIE2G = 5.3E-11*IZCN*RMS/ACN
	ENDIF
	IF (ITZT.EQ.0) ITZT=1
	IF (GMIN.LT.1.E-10) GMIN = 1.E-6
	GXMIN = GMIN * (XIE1+XIM1+XIE2)
	IF (WGR.LT.0.000001) WGR = 0.003
	IF (CGR.LT.0.000001) CGR = WGR/4
	WQGR = 50 * WGR
	IF (CVCBE.LT.0.01) CVCBE = 0.3
	IF (CVCB.LT.0.01) CVCB = 0.04
	IF (CVK.LT.0.01) CVK = 0.05
	IF(ESTEP.LE.0.01) ESTEP = 1.0
	IF (EXR0.LE.19*ESTEP) EXR0 = KIN_PAR*ESTEP
	IF (CJC.LE.0.1) CJC = ACN/20
	JC = NINT(CJC)
C	IF (JC.LE.4) JC = 4
	CJC = JC
	JCR = LCO
	IF (JCR.GT.0) GO TO 288
	JCR = CL0 + 2*DIFF
	IF (JCN.GE.0) THEN
	  IF(MOD(IACN,2).EQ.0) THEN
	    JCR = MAX(12,JCN+2*KOPTK,JCN+2*NINT(EXCN/12))
	  ELSE
	    JCR = MAX(12,JCN/2+2*KOPTK,JCN/2+2*NINT(EXCN/12))
	  ENDIF
	ENDIF
	IF (JCR.LE.15) JCR = JCR + 4
	IF (JCR.LE.10) JCR = JCR + 4
288	IF (KOUTW.EQ.0) KOUTW = 100
	IF (KOUTL.EQ.0) KOUTL = 1000
	IF (KEVAP.EQ.0) KEVAP = 1000
	EMINT(4) = 0

C Mass table from disc
	OPEN(UNIT=10,STATUS='OLD',FILE='EBTABLE.DAT')
c    1	,READONLY,SHARED		! Not ANSI FORTRAN
c    1	,FORM='UNFORMATTED')
	DO 29 K=1,18
	IZZMAX = 8 * K
	IZZMIN = IZZMAX - 7
29	READ (10,*) ((EB(NN,IZZ),NN=1,128),IZZ=IZZMIN,IZZMAX)
	CLOSE (10)

C 4. Decay
	DO 291 IZF=1,3
291	EBC(IZF) = 0
	IF (IZFMAX.EQ.3) GO TO 292
	CALL EXCORR (EBC)
	IZZ = IZE(4)
	N = IAE(4) - IZZ
	NN = N + 1 - NPDRIP(IZZ)
	IF(EB(NN,IZZ).LT.0.1) THEN
	  WRITE(1,33) IZZ,IAE(4)
	  CALL MASS(IZZ,IAE(4),EB2)
	  EB(NN,IZZ)=EB2
	ENDIF
	EBE(4) = EB(NN,IZZ)
292	CONTINUE

C CN excitation energy
	IF (EXCN.GT.0.01) GO TO 295
	NCN = IACN - IZCN
	NP = IAP - IZP
	NT = IAT - IZT
	NNP = NP + 1 - NPDRIP(IZP)
	NNT = NT + 1 - NPDRIP(IZT)
	NNCN= NCN+ 1 - NPDRIP(IZCN)
	IF(EB(NNCN,IZCN).LT.0.1) THEN
	  WRITE(1,33) IZCN,IACN
	  CALL MASS(IZCN,IACN,EB2)
	  EB(NNCN,IZCN)=EB2
	ENDIF
	QCN = EB(NNCN,IZCN) - EB(NNT,IZT) - EB(NNP,IZP)
	EXCN = ECM + QCN
295	CONTINUE

C MNH	Set default value for EXH
	IF (EXH.LE.0.1) THEN
	  IF (INDPAR.EQ.1.OR.IP12.EQ.2) THEN
C MNH	In this case set EXH slightly higher (just 1 MeV) than EXCN
	    EXH = EXCN + 1.
	  ELSE
	    EXH = 30
	  ENDIF
	ENDIF

C Structure of the decay cascade
C KOPTK = number of decay steps
	IF (KOPTK.EQ.99) GO TO 298
	IF (KOPTK.GE.1) GO TO 297
	KOPTK = MAX (3, NINT(EXCN/12) )
297	IF (NNX.LE.0) NNX = MIN(12,KOPTK)
	IF (NPX.LE.0) NPX = MIN(10,KOPTK)
	IF (NAX.LE.0) NAX = MIN(10,KOPTK)
298	CALL KASKAD (KOPTK,NNX,NPX,NAX,IPSMAX_4)
	ITMAX = NUCL

C Mass and atomic numbers of the nuclei in the decay cascade
	DO 302 IPS=1,IPSMAX
	IZ(IPS) = 0
302	IA(IPS) = 0
	IZ(1) = IZCN
	IA(1) = IACN
	DO 315 IPS=1,IPS1
	IZF = 0
	IF (IZ(IPS).EQ.0) WRITE(1,304) IPS,IZF
	DO 31 IZF=1,IZFMAX
	IPSZF = IPSZO(IZF,IPS)
	IF (IPSZF.EQ.0) GO TO 31
	IZV = IZ(IPSZF)
	IAV = IA(IPSZF)
	IZZ = IZ(IPS) - IZE(IZF)
	IAA = IA(IPS) - IAE(IZF)
	IF (IZZ.GE.0 .AND. IAA.GT.0) GO TO 303
	IPSZO(IZF,IPS) = 0
	GO TO 31
303	IZ(IPSZF) = IZZ
	IA(IPSZF) = IAA
	IF (IZV.NE.0 .AND. (IZV.NE.IZZ .OR. IAV.NE.IAA))
     1	WRITE(1,304)IPS,IZF
304	FORMAT (' ***Inconsistency of the cascade at IPS,IZF =',2I3)
31	CONTINUE
315	CONTINUE

C MNH	Separation energies ESEP(IZF,IPS)
	DO 375 IPS=1,IPSMAX
	DO 32 IZF=1,4
32	ESEP(IZF,IPS) = 0
	IZZ = IZ(IPS)
	IAA = IA(IPS)
	IF (IZZ.EQ.0 .OR. IAA.EQ.0) GO TO 375
	N = IAA - IZZ
	NN = N + 1 - NPDRIP(IZZ)
	EB1 = 0
	IF (NN.GT.0 .AND. NN.LE.128) EB1=EB(NN,IZZ)

	IF(EB1.LT.0.1) THEN
	  WRITE(1,33) IZZ,IAA
33	  FORMAT(' ***Mass missing for IZ, IA =',2I5,
     1 /' ***Will be estimated using IAS excitation energy formula')
	  CALL MASS(IZZ,IAA,EB1)
	  EB(NN,IZZ)=EB1
	ENDIF

34	DO 37 IZF=1,IZFMAX
	IPSZF = IPSZO(IZF,IPS)
	IF (IPSZF.NE.0) GO TO 342
	ESEP(IZF,IPS) = 30
	GO TO 37
342	IZZ = IZ(IPS) - IZE(IZF)
	IAA = IA(IPS) - IAE(IZF)
	N = IAA - IZZ
	NN = N + 1 - NPDRIP(IZZ)
	EB2 = 0
	IF (NN.GT.0 .AND. NN.LE.128) EB2=EB(NN,IZZ)

	IF(EB2.LT.0.1) THEN
	  WRITE(1,33) IZZ,IAA
	  CALL MASS(IZZ,IAA,EB2)
	  EB(NN,IZZ)=EB2
	ENDIF
	IF (IZF.EQ.4) EB2=EB2 - EXC4

	ESEP(IZF,IPS) = EB1 - EB2 - EBE(IZF)
	IF (EB2.LT.0.1 .AND. IPSZF.GT.IPS1) ESEP(IZF,IPS) = 20
37	CONTINUE
375	CONTINUE

C Excitation energy ranges
	EXMAX(1) = EXCN
	DO 38 IPS=2,IPSMAX
38	EXMAX(IPS) = -1000
	DO 40 IPS=1,IPS1
	DO 40 IZF=1,3
	IPSZF = IPSZO(IZF,IPS)
	IF (IPSZF.EQ.0) GO TO 40
	EX = EXMAX(IPSZF)
	EXMAX(IPSZF) = EXMAX(IPS) - ESEP(IZF,IPS) - 0.5 * ESTEP 
     1                + EBC(IZF)
	IF (EX.GT.-1000 .AND. ABS(EXMAX(IPSZF)-EX).GT.0.1) 
     1     WRITE(1,39) IPS,IPSZF,EX,EXMAX(IPSZF)
39	FORMAT (' ***Inconsistency of binding energies,'
     1         ,' IPS,IPSZF,EX,EX ',2I3,2F8.2)
40	CONTINUE

C MNH	Added the following DO-loop to take care of 4th particle decay not
C MNH	included in the decay cascade of n, p, and alpha
	IF(IZFMAX.EQ.3) GO TO 401
	DO 402 IPS=1,IPS1
	IPSZF = IPSZO(4,IPS)
	IF (IPSZF.LE.IPSMAX_4) GO TO 402
	EX = EXMAX(IPSZF)
	EXMAX(IPSZF) = EXMAX(IPS) - ESEP(4,IPS) - 0.5*ESTEP
	IF (EX.GT.-1000 .AND. ABS(EXMAX(IPSZF)-EX).GT.0.1) 
     1     WRITE(1,39) IPS,IPSZF,EX,EXMAX(IPSZF)
402	CONTINUE
401	CONTINUE

	IF (EXCN.LT.60) CVCBE = 0.1
	VCBE = CVCBE* IZCN/ACN13
	IF (VK.LT.0.01) VK = EXCN/100
	DO 41 IPS=2,IPSMAX
	ZD = IZCN - IZ(IPS)
	VCBX = (ZD+CVCB*ZD*ZD)*VCBE
	X = MAX( 1., (EXCN-EXMAX(IPS))/9 )
	XD = MAX( 0., X-1.5 )
	VKX = (XD+CVK*XD*XD) * VK
	V = VCBX + VKX
	EXR = MAX( EXR0, EXR0 + (L_EX_DIM*ESTEP-EXR0)*(X-2)/8 )
	IPSZF = IPSZO(3,1)
	IF (IPS.GE.IPSZF) EXR = EXR + 0.15*EXR0
	IF (IPS.GE.IPSZO(3,IPSZF)) EXR = EXR + 0.25*EXR0
	EXR = MIN(L_EX_DIM*ESTEP,EXR)
	WQ(IPS) = EXR
	VLX = MAX( 0., MIN( 8., V/2, (8-(EXMAX(IPS)-EXR-V))/8 ) )
	EXMAX(IPS) = EXMAX(IPS) - NINT((V+VLX)/ESTEP)*ESTEP
41	CONTINUE

	DO 43 IPS=1,IPSMAX
C FZ	Find minimum Ex and number of steps between minimum and maximum.
	EX = EXMAX(IPS) - L_EX_DIM*ESTEP
	I = DIM( NINT(-EX/ESTEP), 1 )
	EXMIN(IPS) = EX + I*ESTEP
	IEXXMX(IPS)= L_EX_DIM - I
43	CONTINUE

C Approximate particle thresholds for nuclei of the last decay step
	IPS = IPSZO(3,1)
	IPS = MAX( IPSZO(3,IPS), 1 )
	CALL TSUMME (IPS,EMINT,1)
	IPS11 = IPS1 + 1
	DO 45 IPS=IPS11,IPSMAX
	ESMIN = 100
	DO 44 IZF=1,IZFMAX 
	ESZF = ESEP(IZF,IPS) + EMINT(IZF)
	ESMIN = MIN( ESMIN, ESZF )
44	CONTINUE
45	IEXXS(IPS) = MIN( IEXXMX(IPS)+1,
     1	MAX( 1, NINT( (ESMIN-EXMIN(IPS))/ESTEP ) ) )

C Lower limits IEXXL(IPS)
	DO 46 IPS=2,IPSMAX
	IEXR = NINT( WQ(IPS)/ESTEP ) - 1
	IEXXL(IPS) = MAX( 1,
     1	NINT( (EXMAX(IPS)-EXMIN(IPS))/ESTEP ) - IEXR )
46	CONTINUE

C FP	EXMIN(1) = EXMAX(1) - ESTEP
C FP	IEXXMX(1) = 1
C FP	IEXXS (1) = 1
	IEXXL (1) = 1

C Level density parameters
	IF(MINFIT.NE.0) GO TO 476
	CALL LDPARM(KOPTLD)
	IF (KOPTLQ.EQ.5) GO TO 47
	CALL LQPARM (KOPTLQ,KOPTEB,ALPHA2)
C Input of individual level density parameters
47	CONTINUE
471	READ (*,*,END=476) IZZ,IAA,CLV,DELT
	IF (IZZ.EQ.0) GO TO 476
	DO 475 IPS=1,IPSMAX
	IF (IZZ.EQ.IZ(IPS) .AND. IAA.EQ.IA(IPS)) GO TO 473
	NN = IAA - IZZ
	IF (NN .EQ.IZ(IPS) .AND. IAA.EQ.IA(IPS)) GO TO 473
	GO TO 475
473	DA(IPS) = CLV(1)
	DELTA(IPS)= CLV(2)
	DELTA1(IPS)= DELT
	FT(IPS) = CLV(3)
	CK(IPS) = CLV(4)
	INRHOP = PLUS
475	CONTINUE
	GO TO 471

C Input of levels
476	CONTINUE
	IF(MINFIT.NE.0) GO TO 491
	DO 478 IPSLV=1,100
478	LVMAX(IPSLV) = 0
	IPSLV = 1
48	READ (*,*,END=49) IZZ,IAA,EX
	IF (IZZ.EQ.0) GO TO 49
	DO 482 IPS=1,IPSMAX
	IF (IAA.EQ.IA(IPS) .AND. (IZZ.EQ.IZ(IPS) .OR. 
     1  IAA-IZZ.EQ.IZ(IPS)) .AND. IEXXMX(IPS).GT.0 .AND. 
     1  IPSLV.LT.100) GO TO 484
482	CONTINUE
483	READ (*,486,END=49) EX,J,IP
	IF (IP.EQ.BLANK .OR. IP.EQ.NULL) GO TO 48
	GO TO 483
484	IPSLV = IPSLV + 1
	IZLV(IPSLV) = IZZ
	IALV(IPSLV) = IAA
	EXLVX(IPSLV) = EX
	LVMAX(IPSLV) = 0
485	READ (*,486,END=49) (EXL(I),JL(I),PL(I:I),IL(I),I=1,7)
486	FORMAT (7(F7.2,I2,2A))
	IF (PL(:1).EQ.BLANK .OR. PL(:1).EQ.NULL) GO TO 48
	DO 487 I=1,7
	IF (PL(I:I).EQ.BLANK .OR. PL(I:I).EQ.NULL) GO TO 487
	LV = LVMAX(IPSLV) + 1
	IF (LV.GT.50) GO TO 485
	LVMAX(IPSLV) = LV
	EXLV(LV,IPSLV) = EXL(I)
	JLV (LV,IPSLV) = JL(I)
	IF(PL(I:I).EQ.PLUS) THEN
C Mark positive parity
	  LVPARI(LV,IPSLV) = 0
	ELSEIF(PL(I:I).EQ.MINUS) THEN
C Mark negative parity
	  LVPARI(LV,IPSLV) = 1
	ELSE
C Mark parity of level as not initialized
C (Convention: -2: not initialized, -1: Unknown, 0: even, 1: odd)
	  LVPARI(LV,IPSLV) = -1
	ENDIF
	IF (IL(I).EQ.LOW) THEN
	ELSEIF (IL(I).EQ.UP) THEN
	  LVPARI(LV,IPSLV) = LVPARI(LV,IPSLV) + 4
	ELSE
	  STOP 'Error in isospin of state'
	ENDIF
	IF (MOD(IAA,2).NE.0) JLV(LV,IPSLV) = JL(I)/2
487	CONTINUE
	GO TO 485
49	IPSLVX = IPSLV
491	CONTINUE

C Spin range
	DO 50 IPS=1,IPSMAX
	JMAX(IPS)=YRASTL(EXMAX(IPS),IA(IPS),DLDM(IPS),R0LDM,DEF,
     1                   DEFS,JCR)
	JMIN(IPS) = MAX( -1, JMAX(IPS) - L_DIM )
50	JJMAX(IPS) = JMAX(IPS) - JMIN(IPS)
	IF (JCN.LT.0) THEN
	  GO TO 51
	ELSE
	  IF(INDENT.EQ.0) THEN
	    JJ = JCN
	  ELSE
	    IF(MOD(IACN,2).EQ.0) THEN
	      JJ = JCN
	    ELSE
	      JJ = JCN/2
	    ENDIF
	  ENDIF
	  IF (JMAX(1).GE.JJ) GO TO 51
	  JMAX(1) = JJ
	  JMIN(1) = MAX( -1, JJ - L_DIM )
	  JJMAX(1) = JJ - JMIN(1)
	ENDIF
51	CONTINUE

C Compound nucleus population
	DO 55 IS=1,ISPIN
	DO 55 JPAR=1,2
	DO 55 JJ=1,L_DIM
	DO 55 IEXX=1,L_EX_DIM
55	WT0(IEXX,JJ,JPAR,IS) = 0
	IEXXX=IEXXMX(1)
	SCN(1) = 0
	SCN(2) = 0
	IF (JCN.GE.0) THEN
	  IF(INDENT.EQ.0) THEN
	    IF(IP12.EQ.1) THEN
	      JPAR=2
	    ELSE
	      JPAR=1
	    ENDIF
	    JJ = JCN - JMIN(1)
	    WT0(IEXXX,JJ,JPAR,ITZT) = 1000
	    IF(IP12.LT.0) THEN
	      WT0(IEXXX,JJ,1,ITZT) = 500
	      WT0(IEXXX,JJ,2,ITZT) = 500
	    ENDIF
	    SCN(1) = 1000
	  ELSE
	    DO 56 J=1,II-1
	    IF(MOD(IACN,2).EQ.0) THEN
	      JJ=J_TEMP(J)
	    ELSE
	      JJ=J_TEMP(J)/2
	    ENDIF
	    JJ=JJ-JMIN(1)
	    IF(JJ.LT.1) JJ=1
	    I=1
	    IF(JJ.GT.JJMAX(1)) I=2
	    WT0(IEXXX,JJ,IP_TEMP(J),IS_TEMP(J))
     1       =WT0(IEXXX,JJ,IP_TEMP(J),IS_TEMP(J))+WT_TEMP(J)
	    SCN(I)=SCN(I)+WT_TEMP(J)
56	    CONTINUE
	  ENDIF
	ELSE
	  JSU = ABS(JP-JT)
	  JSO = JP + JT
	  L1D = 1
	  IF (IP12.EQ.2) L1D = 2
	  JJX = L_DIM
	  DO 61 JJ=1,JJX
	  JC2 = 2*(JMIN(1)+JJ)
	  JC2 = JC2+MOD(IACN,2)
	  CJ = JC2 + 1
	  I = 1
	  IF (JJ.GT.JJMAX(1)) I = 2
	  DO 61 JS=JSU,JSO,2
	  L1MIN = ABS(JC2-JS)/2 + 1
	  L1MAX = (JC2+JS)/2 + 1
	  IF (IP12.EQ.2 ) L1MIN = L1MIN + MOD(L1MIN+1,2)
	  DO 60 L1=L1MIN,L1MAX,L1D
	  CL = L1 - 1
	  X = (CL-CL0)/DIFF
	  E = 0
	  IF (ABS(X).LE.REAL_MAX) THEN
	    E = EXP(X)
	    TX = CJ/(1+E)
	  ELSE
	    TX = 0
	  ENDIF
	  JPAR=MOD(L1-1,2)+1
	  IF(IP12.GE.0) THEN
	    IF(IP12.EQ.2) THEN
	      JPAR=1
	    ELSEIF(IP12.EQ.1) THEN
	      JPAR=3-JPAR
	    ENDIF
	    WT0(IEXXX,JJ,JPAR,1) = WT0(IEXXX,JJ,JPAR,1) + CGL*TX
	    WT0(IEXXX,JJ,JPAR,2) = WT0(IEXXX,JJ,JPAR,2) + CGH*TX
	  ELSEIF(IP12.LT.0) THEN
	    WT0(IEXXX,JJ,1,1) = WT0(IEXXX,JJ,1,1) + 0.5*CGL*TX
	    WT0(IEXXX,JJ,2,1) = WT0(IEXXX,JJ,2,1) + 0.5*CGL*TX
	    WT0(IEXXX,JJ,1,2) = WT0(IEXXX,JJ,1,2) + 0.5*CGH*TX
	    WT0(IEXXX,JJ,2,2) = WT0(IEXXX,JJ,2,2) + 0.5*CGH*TX
	  ENDIF
60	  SCN(I) = SCN(I) + TX
61	  CONTINUE

	  C1 = 1000/(SCN(1)+SCN(2))
	  IF (IAP.EQ.0) GO TO 611
	  C1 =CSL/((JP+1)*(JT+1))
	  IF (IP12.EQ.2) C1 = 2*C1
611	  SCN(1) = C1 * SCN(1)
	  SCN(2) = C1 * SCN(2)
	  DO 612 IS=1,ISPIN
	  DO 612 JPAR=1,2
	  DO 612 JJ=1,JJX
612	  WT0(IEXXX,JJ,JPAR,IS) = C1 * WT0(IEXXX,JJ,JPAR,IS)
	ENDIF

C MNH	Isospin mixing performed according to the simple relation that a state
C MNH	at excitation energy EX has an isospin admixture = AMIX + BMIX*EX
	TEMP=AMIX+BMIX*EXCN
	IF(TEMP.GT.0.) THEN
	  DO 613 JPAR=1,2
	  DO 613 JJ=1,JJX
	  TEMP1 = WT0(IEXXX,JJ,JPAR,1)
	  TEMP2 = WT0(IEXXX,JJ,JPAR,2)
	  WT0(IEXXX,JJ,JPAR,1) = (1.-TEMP)*TEMP1 + TEMP*TEMP2
	  WT0(IEXXX,JJ,JPAR,2) = (1.-TEMP)*TEMP2 + TEMP*TEMP1
613	  CONTINUE
	ENDIF

C Transmission coefficients for gamma decay
	DO 64 IEKIN=1,KIN_GAM
	EKIN = IEKIN * ESTEP
	EKIN2=EKIN*EKIN
	EKIN3 = EKIN*EKIN2
	EKIN5 = EKIN2*EKIN3
C MNH	GDR part. Modification of transmission coefficients.
	IF(IND1.EQ.0) THEN
	  XZE1=XIE1
	ELSE
	  LOR1=FGDR1*GGDR1/((EKIN2-EGDR1*EGDR1)**2+EKIN2*GGDR1*GGDR1)
	  LOR2=FGDR2*GGDR2/((EKIN2-EGDR2*EGDR2)**2+EKIN2*GGDR2*GGDR2)
	  XZE1=XIE1*EKIN*(LOR1+LOR2)
	  WRITE(1, 5559)XZE1
5559	  FORMAT(' XZE1 = ',E10.4)
	ENDIF
C MNH	GQR part. Modification of transmission coefficients.
	IF(IND2.EQ.0) THEN
	  XZE2S=XIE2
	  XZE2V=0
	ELSE
	  IF(EKIN.LT.0.33*EISQR) THEN
	    XZE2S=XIE2/EKIN
	    XZE2V=0
	  ELSE
	    LOR1=FISQR*GISQR/((EKIN2-EISQR*EISQR)**2
     1           +EKIN2*GISQR*GISQR)
	    LOR2=FIVQR*GIVQR/((EKIN2-EIVQR*EIVQR)**2
     1           +EKIN2*GIVQR*GIVQR)
	    XZE2S=XIE2G*EKIN*IZCN*LOR1
	    XZE2V=XIE2G*EKIN*(IACN-IZCN)*LOR2
	    WRITE(1, 5560)XZE2S,XZE2V
5560	    FORMAT(' XZE2S = ',E10.4,' XZE2V = ',E10.4)
	  ENDIF
	ENDIF
C MNH	TLG(IEKIN,J,I,K):  J=1 => DJ=0 or 1, L=1 or 2 ; J=2 => DJ=2, L=2
C MNH			   I=1 => no change of parity ; I=2 => change of parity
C MNH			   K=1 => isoscalar           ; K=2 => isovector
	TLG(IEKIN,1,1,1) = XZE2S*EKIN5
	TLG(IEKIN,1,1,2) = XIM1*EKIN3 + XZE2V*EKIN5
	TLG(IEKIN,1,2,1) = 0.
	TLG(IEKIN,1,2,2) = XZE1*EKIN3
	TLG(IEKIN,2,1,1) = XZE2S * EKIN5
	TLG(IEKIN,2,1,2) = XZE2V * EKIN5
	TLG(IEKIN,2,2,1) = 0.
	TLG(IEKIN,2,2,2) = 0.
	IF (EKIN.GT.22) THEN
	  C1 = 1 - (EKIN-22)/10
	  C1 = C1**4
	  IF(IND1.EQ.0) TLG(IEKIN,1,2,2) = C1 * 
     1                  TLG(INT(22/ESTEP),1,2,2)
	  IF(IND2.EQ.0) THEN
	    TLG(IEKIN,1,1,1) = C1 * TLG(INT(22/ESTEP),1,1,1)
	    TLG(IEKIN,1,1,2) = C1 * TLG(INT(22/ESTEP),1,1,2)
	    TLG(IEKIN,2,1,1) = C1 * TLG(INT(22/ESTEP),2,1,1)
	    TLG(IEKIN,2,1,2) = C1 * TLG(INT(22/ESTEP),2,1,2)
	  ELSE
	    TLG(IEKIN,1,1,2) = C1*XIM1*(22)**3 + XZE2V*EKIN5
	  ENDIF
	ENDIF
64	CONTINUE
	DO 65 J=1,L_DIM
65	ENH(J) = 1
	IF (XYENH.LE.0.1) GO TO 67
	C1 = (XYENH-XYE2)/(CJG2-CJG1)
	JU = CJG1 + 1
	DO 66 J=JU,L_DIM
	ENH(J) = (XYE2+C1*(J-CJG1))/XYE2
	IF (J.GT.CJG2) ENH(J) = XYENH/XYE2
66	CONTINUE
67	CONTINUE

	CALL RTABLE

	DO 75 IT=1,ITMAX
75	INHWT(IT) = 0
	IWL = 0

	VWQ1 = 0
	VWQ2 = 0
	VWQ3 = 0
	VWQ4 = 0
	DO 80 IPS=1,IPSMAX
	WQF(IPS) = 0
	WQT(IPS) = 0
80	WQ(IPS) = 0
	WQT(1) = SCN(1)
	DO 83 IZF=1,IZFMAX+1
	DO 82 IEKIN=1,KIN_MAX
82	SESUM (IEKIN,IZF) = 0
83	CONTINUE

C *****************************************************************
C *****************************************************************
C Start of main loop over all nuclei in the cascade.

	DO 140 IPS=1,IPS1
	GMULT(IPS) = 0
	IF (IEXXMX(IPS).LE.0) GO TO 140

	TZP=IA(IPS)/2.-IZ(IPS)
	TPL=ABS(TZP)
	TPH=TPL+1.

C MNH	Isospin Clebsch-Gordon coefficients for gamma decay
C MNH	GCG(I,J,K) I => Daughter; J => Parent; K => Iso-nature of gamma quanta
C MNH	I,K=1 => T< , =2 => T> ; K=1 =>Isoscalar , =2 => Isovector
	GCG(1,1,1)=1.
	GCG(2,1,1)=0.
	GCG(1,2,1)=0.
	GCG(2,2,1)=1.
	GCG(1,1,2)=CG(TPL,TZP,1.D0,0.D0,TPL,TZP)
	GCG(1,1,2)=GCG(1,1,2)*GCG(1,1,2)
	GCG(2,1,2)=CG(TPH,TZP,1.D0,0.D0,TPL,TZP)
	GCG(2,1,2)=GCG(2,1,2)*GCG(2,1,2)
	GCG(1,2,2)=CG(TPL,TZP,1.D0,0.D0,TPH,TZP)
	GCG(1,2,2)=GCG(1,2,2)*GCG(1,2,2)
	GCG(2,2,2)=CG(TPH,TZP,1.D0,0.D0,TPH,TZP)
	GCG(2,2,2)=GCG(2,2,2)*GCG(2,2,2)
	IF(INDIS.EQ.1.OR.INDIS.EQ.9) THEN
	  WRITE(1,2) IPS,IZ(IPS),IA(IPS)
2	  FORMAT('/ Isospin Clebsch-Gordon Coefficients for isovector
     1 gamma-decay in nucleus: IPS =',I3,'  IZ =',I4,'  IA =',I4)
	  DO 3 J=1,2
	  DO 3 I=1,2
3	  WRITE(1,4) I,J,GCG(I,J,2)
4	  FORMAT(' GCG(',I1,',',I1,',2)**2 =',E12.6)
	ENDIF

	DO 8 IZF=1,IZFMAX
	TZPP=IAE(IZF)/2.-IZE(IZF)
	TPP=ABS(TZPP)
	TZD=TZP-TZPP
	TDL=ABS(TZD)
	TDH=TDL+1.

C MNH	Isospin Clebsch-Gordon coefficients for particle decay
C MNH	FCG(I,J,IZF) I => Daughter; J => Parent
C MNH	I,J=1 => T< , =2 => T> ;IZF=1 =>neutron, =2 =>proton, =3 =>alpha,
C MNH				   =4 =>extra
	FCG(1,1,IZF)=CG(TDL,TZD,TPP,TZPP,TPL,TZP)
	FCG(1,1,IZF)=FCG(1,1,IZF)*FCG(1,1,IZF)
	FCG(1,2,IZF)=CG(TDL,TZD,TPP,TZPP,TPH,TZP)
	FCG(1,2,IZF)=FCG(1,2,IZF)*FCG(1,2,IZF)
	FCG(2,1,IZF)=CG(TDH,TZD,TPP,TZPP,TPL,TZP)
	FCG(2,1,IZF)=FCG(2,1,IZF)*FCG(2,1,IZF)
	FCG(2,2,IZF)=CG(TDH,TZD,TPP,TZPP,TPH,TZP)
	FCG(2,2,IZF)=FCG(2,2,IZF)*FCG(2,2,IZF)
	IF(INDIS.EQ.1.OR.INDIS.EQ.9) THEN
	  WRITE(1,5) IPS,IZ(IPS),IA(IPS),IZF,IZE(IZF),IAE(IZF)
5	  FORMAT('/ Isospin Clebsch-Gordon Coefficients '
     1    ,'for particle decay of nucleus: IPS =',
     1    I3,'  IZ =',I4,'  IA =',I4,/
     2 '                                                       '
     3 ,'by particle: IZF =',I3,'  IZE =',I3,'  IAE =',I3)
	  DO 6 J=1,2
	  DO 6 I=1,2
6	  WRITE(1,7) I,J,IZF,FCG(I,J,IZF)
7	  FORMAT(' FCG(',I1,',',I1,',',I1,')**2 =',E12.6)
	ENDIF
8	CONTINUE

C For first nucleus in cascade the population matrix is filled already
	IF (IPS.EQ.1) GO TO 84
	CALL GETW(IPS,IT0)
C If no population matrix
	IF (IT0.EQ.0) GO TO 140

84	IEXXX = IEXXMX(IPS)
	JJX = JJMAX(IPS)
	IAA = IA(IPS)
	JD1 = MOD(IAA,2)

	CALL TSUMME (IPS,EMINT,0)

C Particle threshold
	ESMIN = 100
	DO 85 IZF=1,IZFMAX
	IPSZF = IPSZO(IZF,IPS)
	EXZF0 = 0
	IF (IPSZF.NE.0) EXZF0 = EXMIN(IPSZF) + ESTEP
	ESZF = ESEP(IZF,IPS) + EMINT(IZF) + EXZF0
	ESMIN = MIN( ESZF, ESMIN )
85	CONTINUE
	IEXXSS = MIN( IEXXX+1,
     1	MAX( 1, NINT( (ESMIN-EXMIN(IPS))/ESTEP ) ) )
	IF (KGAMMA.NE.0) IEXXSS = MIN( 2, IEXXSS )
C MNH	Decided to leave after all but added a check on KGAMMA.
C MNH	If KGAMMA.EQ.2 population matrices are calculated only after first
C MNH	gamma decay in compound nucleus.
	IF(IPS.EQ.1.AND.KGAMMA.NE.2) IEXXSS=IEXXX
	IEXXS(IPS) = IEXXSS

	DO 86 IS=1,ISPIN
	DO 86 JPAR=1,2
	DO 86 JJ=1,JJX
	DO 86 IEXX=1,IEXXX
	LZ (IEXX,JJ,JPAR,IS) = 0
	LZF(IEXX,JJ,JPAR,IS) = 0
86	WGZ(IEXX,JJ,JPAR,IS) = 0
	IZFX = IZFMAX + 1
	DO 87 IZF=1,IZFX
	DO 87 IEKIN=1,KIN_PAR
87	SE (IEKIN,IZF) = 0
	DO 872 IZF=1,IZFMAX
872	ICZF(IZF) = 0

	IF (IEXXX.LT.IEXXSS) GO TO 126

	CALL GETRHO (IPS)

	JJFMAX = L_DIM+1
	IF (IZFF.NE.0) CALL FISSN(IPS,JJFMIN,JJFMAX,FFB)

	DO 89 IZF=1,IZFMAX
	IPSZF = IPSZO(IZF,IPS)
	IF (IPSZF.EQ.0 .OR. IEXXMX(IPSZF).LE.0) GO TO 89
	ICZF(IZF) = 2
	DO 88 IS=1,ISPIN
	DO 88 JPAR=1,2
	DO 88 JJZF=1,L_DIM
	DO 88 IEXXZF=1,L_EX_DIM
88	WT(IEXXZF,JJZF,JPAR,IS,IZF) = 0
89	CONTINUE

C *****************************************************************
	IEXXCX = IEXXX - IEXXSS + 1
	DO 1252 IEXXC=1,IEXXCX
	IEXX = IEXXX - IEXXC + 1
	EX = EXMIN(IPS) + IEXX*ESTEP

C MNH	The following initializations are necessary for tracking particle and
C MNH	gamma spectra after a high energy gamma decay in the initial nucleus.

	IF(IPS.EQ.1.AND.KGAMMA.EQ.2.AND.IEXXC.EQ.2) THEN
	  WQF(1)=0.
	  WQ(1)=0.
	  DO 93 IZF=1,IZFMAX
	  DO 93 IEKIN=1,KIN_PAR
93	  SE(IEKIN,IZF)=0.
	  DO 94 IZF=1,IZFMAX
	  DO 94 IS=1,ISPIN
	  DO 94 JPAR=1,2
	  DO 94 JJZF=1,L_DIM
	  DO 94 IEXXZF=1,L_EX_DIM
94	  WT(IEXXZF,JJZF,JPAR,IS,IZF)=0.
	ENDIF

	DO 1252 IS1=1,ISPIN
	DO 1252 JPAR1=1,2
	JSTEP = 1
	IF (EX.GT.EXH) JSTEP = 2
	IF (EX.GT.2*EXH) JSTEP = 3
	JJ = JJX + 1
	JJSTEP = 1
	JJC = 0

C JJ-loop 90-125
90	JJ = JJ - JJSTEP
	IF (JJ.LE.0) GO TO 125
	W0 = WT0(IEXX,JJ,JPAR1,IS1) + WGZ(IEXX,JJ,JPAR1,IS1)
	IF (JJSTEP.EQ.1) GO TO 92
	C1 = 0.5
	IF (JJSTEP.EQ.3) C1 = 1
	C2 = C1
	IF (JJC.EQ.JC .AND. JJSTEP.EQ.2) C1 = 1
	W0 = W0+C1*(WT0(IEXX,JJ+1,JPAR1,IS1)+
     1      WGZ(IEXX,JJ+1,JPAR1,IS1))
	IF (JJ.GT.1)
     1   W0=W0+C2*(WT0(IEXX,JJ-1,JPAR1,IS1)+WGZ(IEXX,JJ-1,JPAR1,IS1))
92	IF (W0.GE.JJSTEP*WGR) GO TO 95
	VWQ1 = VWQ1 + W0
	GO TO 90
95	JJC = JJC + 1
	J = JMIN(IPS) + JJ
	J1 = 2*J + JD1
	ENHGAM = ENH(J+1)

	DO 96 IZF=1,4
	ISUMW(IZF) = 0
96	SUMW(IZF) = 0
	WGAMMA = 0
	WFISS = 0
	IF (IZFF.EQ.0) GO TO 97
	WFISS = WF (IEXX,JJ,JPAR1,IS1)
	IF (JJ.LE.JJFMAX) GO TO 97
	LZF(IEXX,JJ,JPAR1,IS1) = 9900
	WQF(IPS) = WQF(IPS) + W0
	GO TO 1248
97	CONTINUE

C Particle decay
	DO 114 IZF=1,IZFMAX
	IF (ICZF(IZF).LE.0) GO TO 114
	IPSZF = IPSZO(IZF,IPS)
	EKINX = EX - ESEP(IZF,IPS) - EXMIN(IPSZF)
	IH1 = IEXXL(IPSZF)
	IH2H = NINT( (EKINX-EMINT(IZF))/ESTEP ) + 1
	IH2 = MIN( IEXXMX(IPSZF),  IH2H-1 )
	IEXXXZ(IZF) = IH2
C If decay not possible
	IF (IH2.LT.IH1) GO TO 114

	IF (IZF.GE.3) THEN
	  JTMAX = 31
	ELSE
	  JTMAX = 16
	ENDIF
	JX = 2*JTMAX - 2 + JDE(IZF)
	JD2 = JD1 + JDE(IZF)
	IF (JD2.EQ.2) JD2 = 0
	J2MIN = 2*JMIN(IPSZF) + JD2
	JJXZF = JJMAX(IPSZF)
	JJMZF = 1
	JJZF = (J1-JX-JD2)/2 - JMIN(IPSZF)
	IF (JJZF.GT.1) JJMZF = JJZF
	JJMINZ(IZF) = JJMZF
	JJZF = (J1+JX-JD2)/2 - JMIN(IPSZF)
	IF (JJZF.LE.JJXZF) JJXZF = JJZF
	JJXXXZ(IZF) = JJXZF
	IF (JJXZF.LT.JJMZF) GO TO 114

	SUMWX = 0
	DO 112 IS2=1,ISPIN
	DO 112 JPAR2=1,2
	DO 112 JJZF=JJMZF,JJXZF
	J2 = J2MIN + 2*JJZF
C Calculate minimum and maximum J transfer
	JT1 = ABS(J1-J2)/2 + 1
	JT2 = MIN ( JTMAX, (J1+J2)/2 + 1 )

	DO 112 IEXXZF=IH1,IH2
	WX = 0
	RHOZ = RHO (IEXXZF,JJZF,JPAR2,IS2,IZF)
C MNH	IF (RHOZ.GT.RHOGR) THEN
	  IEKIN = MIN ( KIN_PAR, IH2H-IEXXZF )
	  IPAR = MOD((JPAR1+JPAR2),2)
	  IF(IPAR.EQ.0) THEN
C Add even parity
	    TS = TSUM(IEKIN,JT1,JT2,IZF)
	  ELSE
C Add odd parity
	    TS = TSUM(IEKIN,JT2+1,JT1,IZF)
	  ENDIF
	  WX = RHOZ * TS * FCG(IS2,IS1,IZF)
	  SUMWX = SUMWX + WX
C MNH	ENDIF
	W(IEXXZF,JJZF,JPAR2,IS2,IZF) = WX
112	CONTINUE
	ISUMW(IZF) = 1
	SUMW(IZF) = SUMWX
114	CONTINUE

C Gamma decay
	IZF = IZFMAX + 1
	IF (IEXX.LE.1) GO TO 117
	IH5 = IEXX - 1
	IH4 = IH5 - (KIN_GAM-1)
	IF (IH4.LE.0) IH4 = 1
	JJZFU = JJ - 2
	IF (JJZFU.LE.0) JJZFU = 1
	JJZFO = JJ + 2
	IF (JJZFO.GT.JJX) JJZFO = JJX
	DO 116 IS2=1,ISPIN
	DO 116 JPAR2=1,2
	DO 116 JJZF=JJZFU,JJZFO
	IF(JJ.EQ.1.AND.JJZF.EQ.1.AND.JD1.EQ.0) GO TO 116
	JD = JJ - JJZF + 3
	MP = MPOL(JD)
	DO 1166 IEXXZF=IH4,IH5
	WX = 0
	RHOZ = RHO (IEXXZF,JJZF,JPAR2,IS2,IZF)
C MNH	IF (RHOZ.GT.RHOGR) THEN
	  IEKIN = IEXX - IEXXZF
	  IPAR = MOD((JPAR1+JPAR2),2)+1
	  TS1=TLG(IEKIN,MP,IPAR,1)
	  TS2=TLG(IEKIN,MP,IPAR,2)
	  WX=RHOZ*(TS1*GCG(IS2,IS1,1)+TS2*GCG(IS2,IS1,2))*ENHGAM
	  WGAMMA = WGAMMA + WX
C MNH	ENDIF
	WG (IEXXZF,JD,JPAR2,IS2) = WX
1166	CONTINUE
116	CONTINUE

C Normalization constant and relative decay widths
117	RHOX = RHO (IEXX,JJ,JPAR1,IS1,IZFMAX+1)
	WX = RHOX * GXMIN * ENHGAM
	SUMWX = SUMW(1)+SUMW(2)+SUMW(3)+SUMW(4)+WGAMMA+WFISS
	IF ( SUMWX+WX.LE.ABSMIN) THEN
	  CNORM = 1
	ELSE
	  CNORM = 1/(SUMWX+WX)
	ENDIF
	ZW(1) = SUMW(1) * CNORM
	ZW(2) = SUMW(2) * CNORM
	ZW(3) = SUMW(3) * CNORM
	ZW(4) = SUMW(4) * CNORM
	ZW5   = WGAMMA  * CNORM
	ZW6   = WX      * CNORM
	ZW7   = WFISS   * CNORM
	IZW1 = ZW(1) * 99.4 + 0.5
	IZW2 = ZW(2) * 99.4 + 0.5
	IZW3 = ZW(3) * 99.4 + 0.5
	IZW4 = ZW(4) * 99.4 + 0.5
	IZW5 = ZW5   * 99.4 + 0.5
	IZW7 = ZW7   * 99.4 + 0.5
	IZW8 = 0
	IZW9 = 0
	IF (KOUTL.GE.0) GO TO 1205
C Lifetimes
	TAU = ABSMIN
	IF (SUMWX.LT.ABSMIN) GO TO 1204
	TAU = 4.12E-21 * RHOX / SUMWX
1204	ALG = -LOG10(TAU)
	IZW9 = ALG + 1
	IZW8 = NINT( 10**(IZW9-ALG) )
1205	LZ (IEXX,JJ,JPAR1,IS1)=1000000*IZW3+10000*IZW5+100*IZW1+IZW2
	LZF(IEXX,JJ,JPAR1,IS1)=1000000*IZW8+10000*IZW9+100*IZW7+IZW4
C MNH	CNORM redefined to give absolute cross sections in mb upon 
C MNH	multiplication.
	CNORM = W0 * CNORM

C Fission cross section
	WQF(IPS) = WQF(IPS) + ZW7 * W0

C Normalization of W, summation onto WT
C Particle decay
	DO 123 IZF=1,IZFMAX
	IF (ISUMW(IZF).EQ.0) GO TO 123
	IPSZF = IPSZO(IZF,IPS)
	IEKNXD = 1 + NINT( (EX-ESEP(IZF,IPS)-EXMIN(IPSZF)-EMINT(IZF))
     1          /ESTEP )
	IH1 = IEXXL(IPSZF)
	IH2 = IEXXXZ(IZF)
	JJXZF = JJXXXZ(IZF)
	JJMZF = JJMINZ(IZF)
	WX = ZW(IZF) * W0
	WQT(IPSZF) = WQT(IPSZF) + WX
	IF (WX.GE.CGR) GO TO 121
	VWQ2 = VWQ2 + WX
	GO TO 123
121	DO 1215 IS2=1,ISPIN
	DO 1215 JPAR2=1,2
	DO 1215 JJZF=JJMZF,JJXZF
	DO 1215 IEXXZF=IH1,IH2
	IEKIN = MIN( KIN_PAR, IEKNXD-IEXXZF )
	WX = CNORM * W (IEXXZF,JJZF,JPAR2,IS2,IZF)
	SE(IEKIN,IZF) = SE(IEKIN,IZF) + WX
1215	WT(IEXXZF,JJZF,JPAR2,IS2,IZF)=WT(IEXXZF,JJZF,JPAR2,IS2,IZF)+WX
123	CONTINUE

C Gamma decay
	IZF = IZFMAX + 1
	IF (IEXX.LE.1) GO TO 1246
	WX = ZW5 * W0
	IF (WX.GE.CGR) GO TO 124
	VWQ2 = VWQ2 + WX
	GO TO 1246
124	DO 1242 IS2=1,ISPIN
	DO 1242 JPAR2=1,2
	DO 1242 JJZF=JJZFU,JJZFO
	JD = JJ - JJZF + 3
	DO 1242 IEXXZF=IH4,IH5
	IEKIN = IEXX - IEXXZF
	WX = CNORM * WG(IEXXZF,JD,JPAR2,IS2)
	SE (IEKIN,IZF) = SE (IEKIN,IZF) + WX
	WGZ(IEXXZF,JJZF,JPAR2,IS2)=WGZ(IEXXZF,JJZF,JPAR2,IS2)+WX
1242	GMULT(IPS) = GMULT(IPS) + WX
C Isomers: E2-cascade to 0+ g.s. assumed for isomers
1246	WX = W0 * ZW6
	WQ(IPS) = WQ(IPS) + WX
	VWQ4 = VWQ4 + WX
	CMULT = (J1+2)/4
	WX = CMULT * WX
	SE (1,IZF) = SE (1,IZF) + WX

1248	IF (JJSTEP.GT.1) GO TO 90
	IF (EX.LE.EXH .OR. JJC.LT.JC) GO TO 90
	JJSTEP = JSTEP
	IF (JJC.EQ.JC .AND. JSTEP.EQ.3) JJ = JJ + 1
	GO TO 90
125	CONTINUE
1252	CONTINUE
C *****************************************************************

C Residue cross section
126	IEXXS1 = IEXXSS - 1
	IF (IEXXS1.LE.0) GO TO 128
	DO 127 IS2=1,ISPIN
	DO 127 JPAR2=1,2
	DO 127 JJ=1,JJX
	DO 127 IEXX=1,IEXXS1
127	WQ(IPS)=WQ(IPS)+WT0(IEXX,JJ,JPAR2,IS2)+WGZ(IEXX,JJ,JPAR2,IS2)
128	CONTINUE

C Output of population and decay matrices and of evaporation spectra
	CALL OUTW (IPS,KOUTW,KOUTL,TEXT,WQT(IPS),FFB,IZFF)
	CALL OUTS(IPS,KEVAP,KGAMMA,EMINT,TEXT,WQT(IPS),
     1            WQF(IPS),SCN(1))

C Erase daughter nuclei in the last decay step or with small cross section
	DO 1298 IZF=1,IZFMAX
	IF (ICZF(IZF).EQ.0) GO TO 1298
	IPSZF = IPSZO(IZF,IPS)
	IF (WQT(IPSZF).GT.WQGR) GO TO 129
	VWQ1 = VWQ1 + WQT(IPSZF)
	GO TO 1296
129	IF (IPSZF.LE.IPS1) GO TO 1298
	IH2 = IEXXMX(IPSZF)
	IEXXSZ = IEXXS(IPSZF)
	JJXZF = JJMAX(IPSZF)
	IF (IH2.LT.IEXXSZ) GO TO 1294
	WX = 0
	DO 1292 IS2=1,ISPIN
	DO 1292 JPAR2=1,2
	DO 1292 JJZF=1,JJXZF
	DO 1292 IEXXZF=IEXXSZ,IH2
1292	WX = WX+WT(IEXXZF,JJZF,JPAR2,IS2,IZF)
	VWQ3 = VWQ3 + WX
	WQ(IPSZF) = WQ(IPSZF) + WX

1294	IEXXSZ = IEXXSZ - 1
	IF (IEXXSZ.LT.1) GO TO 1296
	WX = 0
	DO 1295 IS2=1,ISPIN
	DO 1295 JPAR2=1,2
	DO 1295 JJZF=1,JJXZF
	DO 1295 IEXXZF=1,IEXXSZ
1295	WX = WX+WT(IEXXZF,JJZF,JPAR2,IS2,IZF)
	WQ(IPSZF) = WQ(IPSZF)+ WX
1296	ICZF(IZF) = 0
1298	CONTINUE

C Storage of daughter populations in the W-table
	IF(IPS.EQ.1.AND.IZFMAX.EQ.4.AND.KGAMMA.EQ.-2) THEN
	  IPSZF=IPSZO(4,1)
	  CALL STOREW(IPSZF,4)

C MNH	The following initializations are necessary for tracking particle and
C MNH	gamma spectra after a 4th particle evaporation in the initial nucleus.

	  DO 136 IEKIN=1,KIN_PAR
	  SE(IEKIN,5)=0.
	  DO 136 IZF=1,3
136	  SE(IEKIN,IZF)=0.
	ELSE
	  DO 139 IZF=1,IZFMAX
	  IF (ICZF(IZF).EQ.0) GO TO 139
	  IPSZF = IPSZO(IZF,IPS)
	  CALL GETW(IPSZF,IT)
	  IF (IT.EQ.0) GO TO 138
	  JJXZF = JJMAX(IPSZF)
	  IH2 = IEXXMX(IPSZF)
	  DO 137 IS2=1,ISPIN
	  DO 137 JPAR2=1,2
	  DO 137 JJZF=1,JJXZF
	  DO 137 IEXXZF=1,IH2
137	  WT(IEXXZF,JJZF,JPAR2,IS2,IZF)=WT(IEXXZF,JJZF,JPAR2,IS2,IZF)
     1 +WT0(IEXXZF,JJZF,JPAR2,IS2)
138	  CALL STOREW(IPSZF,IZF)
139	  CONTINUE
	ENDIF

C Compress W-table
	IF (IWL.GT.20) CALL CLEAN

140	CONTINUE
C ****************************************************************
C ****************************************************************

C General output
	CALL OUTS (0,KEVAP,KGAMMA,EMINT,TEXT,0.,0.,SCN(1))
151	FORMAT (' Nuclei of the decay cascade',32X,A///
     1' IPS   IZ  IA    Ex-range (Min,L,S,Max)        J-range   ',
     1' Daughter nuclei      Binding E(N,P,A,4)        Trans ',
     1' Fissn  Resid','  Gmult'/)
152	FORMAT (1X,I3,1X,2I4, 1X,4F7.1,2X,F5.1,F6.1,2X,4I4,2X,
     1	4F6.1,3X,3F7.2,F8.2)
	WRITE(1,151) TEXT(:50)
	DO 156 IPS=1,IPSMAX
	IAA = IA(IPS)
	E1 = EXMIN(IPS) + ESTEP
	E2 = EXMIN(IPS) + IEXXL(IPS)*ESTEP
	E3 = EXMIN(IPS) + IEXXS(IPS)*ESTEP
	E4 = EXMAX(IPS)
	CJ1 = JMIN(IPS) + 1
	CJ2 = JMAX(IPS)
	IF (MOD(IAA,2).EQ.0) GO TO 155
	CJ1 = CJ1 + .5
	CJ2 = CJ2 + .5
155	IF(WQ(IPS).LT.0.2) THEN
	  GMULT(IPS)=1.
	ELSE
	  GMULT(IPS)=GMULT(IPS)/WQ(IPS)
	ENDIF
	WRITE(1,152) IPS,IZ(IPS),IAA, E1,E2,E3,E4,CJ1,CJ2,
     1	(IPSZO(IZF,IPS),IZF=1,4),(ESEP(IZF,IPS),IZF=1,4),
     2	WQT(IPS),WQF(IPS),WQ(IPS),GMULT(IPS)
156	CONTINUE
	WRITE(1,'(1H1)')

161	FORMAT (' Level density parameters',35X,A///
     1	' IPS   IZ  IA       DA    DELTA   FT/R0     U       UI'
     2	,'      CK    OPT  LEV'/)
162	FORMAT (1X,I3,1X,2I4,2X,6F8.2,2I5/
     1	10X,'LDM  ',5F8.2,8X,I5)
	WRITE(1,161) TEXT(:50)
	DO 167 IPS=1,IPSMAX
	IF (IEXXMX(IPS).LE.0 .OR. WQT(IPS).LE.SCN(1)/NUCL) GO TO 167
	LVX = 0
	IF (IPSLVX.LT.2) GO TO 166
	DO 164 IPSLV=2,IPSLVX
	IF (IZLV(IPSLV).EQ.IZ(IPS) .AND. IALV(IPSLV).EQ.IA(IPS)) 
     1   GO TO 165
	IF (IALV(IPSLV)-IZLV(IPSLV).EQ.IZ(IPS)
     1	.AND. IALV(IPSLV).EQ.IA(IPS)) GO TO 165
164	CONTINUE
	GO TO 166
165	LVX = LVMAX(IPSLV)
166	WRITE(1,162) IPS,IZ(IPS),IA(IPS),
     1	DA(IPS),DELTA(IPS),FT(IPS),UTR,UJTR,CK(IPS),KOPTLD,LVX,
     2	DALDM,DLDM(IPS),R0LDM,ULDM,UJLDM,KOPTLQ
167	CONTINUE
	WRITE(1,'(1H1)')

	WX = 0
	IPSX = 1
	DO 199 IPS=1,IPSMAX
	IF (WQ(IPS).LE.WX) GO TO 199
	WX = WQ(IPS)
	IPSX = IPS
199	CONTINUE
	IARX = IA(IPSX)
	NZRX = IARX - 2*IZ(IPSX)
	DO 200 IAA=1,29
	DO 200 NZZ=1,40
200	WQR(IAA,NZZ) = 0
	IAMIN = IACN - 29
	DO 202 IPS=1,IPSMAX
	IAR = IA(IPS)
	IZR = IZ(IPS)
	IAA = IAR - IAMIN
	NZR = IAR - 2*IZR
	NZZ = NZR - NZRX + 20
	IF (IAA.GE.1 .AND. IAA.LE.29 .AND. NZZ.GE.1 .AND. NZZ.LE.40)
     1	WQR(IAA,NZZ) = WQR(IAA,NZZ) + WQ(IPS)
202	CONTINUE
	DO 208 IAA=1,29
	SUM = 0
	DO 206 NZZ=1,40
206	SUM = SUM + WQR(IAA,NZZ)
208	WQA(IAA) = SUM
	SR = 0
	SFISS = 0
	DO 210 IPS=1,IPSMAX
	SFISS = SFISS + WQF(IPS)
210	SR = SR + WQ(IPS)

217	FORMAT (' C A S C A D E :  ',A)
218	FORMAT (' ',95('-'))
219	FORMAT (' ',95('-')/)
220	FORMAT (' Entr.channel, CN',T25,
     1	'ZP,AP,ZT,AT,ELAB,ZCN,ACN,EXCN',T60,
     1	2(I3,I4),F6.1,I3,I4,F6.1)
221	FORMAT (' Spins',T25,'JP,JT,IP12,JCN',T60,4I4)
2211	FORMAT (' Isospin & parity par.',T25,'ITZT,INDPAR,INDIS,AMIX'
     1   ,',BMIX',T60,3I4,2(1PE9.2))
222	FORMAT (' Decay cascade',T25,'OPT,IPS1,IPSMAX,NN,NP,NA',T60,
     1	6I4)
2221	FORMAT (' 4.decay, fission',T25,'Z4,A4,J4,IP4,EXC4,IZFF,DAF'
     1    ,',FFB',T60,4I4,F7.3,I5,2F6.2)
223	FORMAT (' Angular m. in CN',T25,'CL0,DIFF,(SIGMACN)',T60,
     1	2F6.2,'  (',F6.1,')')
2235	FORMAT (' Level dens. parm',T25,'FTHETA,OPTION,Parm/Levls in',
     1	T60,F5.2,I5,3X,A)
224	FORMAT (' Level dens. LD',T25,'DA,UTR/LDM,UJTR/LDM,OPT,OPTEB',
     1	T60,F5.2,4F5.1,2I4)
2242	FORMAT (' Yrast line',T25,'R0LDM,DEF,DEFS',T60,F5.2,2(1PE9.2))
225	FORMAT (' Gamma decay',T25,'E1,M1,E2(Weissk.u),ENH,GMIN',T60,
     1  F8.5,F6.3,F6.1,I3,'.',I2,'.',I3,'.',1PE9.2)
2251	FORMAT (' GIANT DIP RES',T25,'FRAC1,POS1,WIDTH1,FRAC2,POS2,'
     1       ,'WIDTH2',T60,6F8.3)
2252	FORMAT (' GIANT QUAD RES',T25,'FRACIS,POSIS,WIDTHIS,FRACIV,'
     1       ,'POSIV,WIDTHIV',T60,6F8.3)
226	FORMAT (' Cutoffs',T25,'WGR,CGR,CVCBE,CVCB,VK,CVK',T60,
     1	2(1X,1PE8.2),4(0PF5.2))
2261	FORMAT (' Cutoffs',T25,'EXR0,EXH,CJC,L-Cutoff,ESTEP',T60,
     1	F5.1,F6.1,F5.1,I8,F6.2)
227	FORMAT (' Output options',T25,'KOUTW,KOUTL,KEVAP,KGAMMA',T60,
     1	4I5)

	WRITE(1, 218)
	WRITE(1,217) TEXT
	WRITE(1,219)
	WRITE(1,220) IZP,IAP,IZT,IAT,ELAB,IZCN,IACN,EXCN
	IF (MOD(IAP,2).EQ.0) JP = JP/2
	IF (MOD(IAT,2).EQ.0) JT = JT/2
	IF (MOD(IAE(4),2).EQ.0) JE(4) = JE(4)/2
	WRITE(1,221) JP,JT,IP12,JCN
	WRITE(1,2211) ITZT,INDPAR,INDIS,AMIX,BMIX
	WRITE(1,222) KOPTK,IPS1,IPSMAX,NNX,NPX,NAX
	WRITE(1,2221)IZE(4),IAE(4),JE(4),IPE(4),EXC4,IZFF,DAF,FFB
	WRITE(1,223) CL0,DIFF,SIGMCN
	IF (IPSLVX.GT.1) INLEVL = PLUS
	WRITE(1,2235) FTHETA,KOPTLD,INRHOP//'/'//INLEVL
	WRITE(1,224) DALDM,UTR,ULDM,UJTR,UJLDM,KOPTLQ,KOPTEB
	WRITE(1,2242) R0LDM,DEF,DEFS
	I1 = NINT( CJG1 )
	I2 = NINT( CJG2 )
	I3 = NINT( XYENH )
	WRITE(1,225) XYE1,XYM1,XYE2,I1,I2,I3,GMIN
	IF(IND1.EQ.1) WRITE(1, 2251)FGDR1,EGDR1,GGDR1,FGDR2,
     1     EGDR2,GGDR2
	IF(IND2.EQ.1) WRITE(1, 2252)FISQR,EISQR,GISQR,FIVQR,
     1     EIVQR,GIVQR
	WRITE(1,226) WGR,CGR,CVCBE,CVCB,VK,CVK
	WRITE(1,2261)EXR0,EXH,CJC,JCR,ESTEP
	WRITE(1,227) KOUTW,KOUTL,KEVAP,KGAMMA
	WRITE(1,219)

235	FORMAT ('  A',3X,A,' (N-Z)'/)
237	FORMAT (1X,I3,3X,5F6.1,T45,F8.2,1X,A)
238	FORMAT (1X,I3,6F6.1,T45,F8.2,1X,A)
239	FORMAT (18X,'Residue cross s.',T45,F8.2,' mb')
2391	FORMAT (18X,'Fission cross s.',T45,F8.2,' mb')
240	FORMAT (18X,'Fusion  cross s.',T45,F8.2,' mb'/)
242	FORMAT (18X,'Lost cross sections',T45,F8.2,' mb CN.GT.JMAX'/
     1	T45,F8.2,' mb W0.LT.WGR'/
     2	T45,F8.2,' mb W0*ZW.LT.CGR'/
     3	T45,F8.2,' mb last step above threshold'/
     4	18X,'Isomers',T45,F8.2,' mb ')

	DO 251 NZZ=-5,5
	NZR = NZZ+NZRX
	IX = (NZZ+5) * 3
251	WRITE( PLOT(IX+1:IX+3), '(I3)' ) NZR
	WRITE(1,235) PLOT(:33)
	DO 252 I=1,40
252	PLOT(I:I) = NULL
	DO 260 IAA=1,29
	IAR = IAMIN + IAA
	IX = MIN( 40, NINT( WQA(IAA)/15 ) + 1 )
	IF (MOD(IAR+IARX,2).NE.1) THEN
	  WRITE(1,237) IAR,(WQR(IAA,NZZ),NZZ=16,24,2),WQA(IAA),
     1     PLOT(:IX)
	ELSE
258	  WRITE(1,238) IAR,(WQR(IAA,NZZ),NZZ=15,25,2),WQA(IAA),
     1     PLOT(:IX)
	ENDIF
260	CONTINUE
	WRITE(1, 218)

	WRITE(1,239) SR
	WRITE(1,2391)SFISS
	WRITE(1, 240) SCN(1)
	WRITE(1, 242) SCN(2),VWQ1,VWQ2,VWQ3,VWQ4
C MNH	WRITE(1, 219)
	WRITE(1, 218)
C*************************************
	CNZ = 0
	DO 270 IPS=1,IPSMAX
	IF (IA(IPS).LE.2 .OR. IZ(IPS).LE.1) GO TO 270
	CX = IA(IPS)
	CX = CX/IZ(IPS) - 1
	CNZ = CNZ + CX*WQ(IPS)
270	CONTINUE
	CNZ = CNZ/SR
	WRITE(1, 280) CNZ
280	FORMAT (' N/Z of E.R. ',F6.3)
C*************************************
	CLOSE(UNIT=1)
	IF(INDCASC.EQ.1) GO TO 19
	RETURN
1000	STOP 'Normal completion'
	END


	SUBROUTINE KASKAD (KOPTK,NNX,NPX,NAX,IPSMAX_4)

	PARAMETER	( NUCL	= 500 )

C Structure of the decay cascade
	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),EIAS(NUCL)
	COMMON/ISO/ ISPIN,INDPAR,INDIS,AMIX,BMIX,MINFIT
	DIMENSION NR(32,32,32)
	DO 7 IPS=1,NUCL
	DO 7 IZF=1,4
7	IPSZO(IZF,IPS) = 0

	IF (KOPTK.EQ.99.AND.MINFIT.EQ.0) THEN
C Input from cards
	  READ *, ((IPSZO(IZF,IPS),IZF=1,4),IPS=1,IPS1)
	  IPS1 = MIN( IPS1, NUCL-1 )
	  IPSMAX = MIN( IPSMAX, NUCL )
	  RETURN
	ENDIF

C Internal calculation
10	DO 11 NA=1,32
	DO 11 NN=1,32
	DO 11 I =1,32
11	NR(I,NN,NA) = 0
	KOPTK = MIN( 31, KOPTK )
	NNX = MIN( MAX( 2, NNX ), KOPTK )
	NPX = MIN( MAX( 2, NPX ), KOPTK )
	NAX = MIN( MAX( 2, NAX ), KOPTK )
	NMAX = KOPTK + 1
	NXN = NNX
	NXP = NPX
	NXA = NAX + 1
	NR (1,1,1) = 1
	N = 1
	DO 25 NN=2,NMAX
	IMIN = 1
	IMAX = NN
	IF (NN.LE.NXN) GO TO 21
	IMIN = 1 + (NN-NXN+1)/2
	IF (MOD((NN-NXN),2).NE.0) NR(IMIN-1,NN,1) = 1000
21	IF (NN.LE.NXP) GO TO 22
	IMAX = NN - (NN-NXP+1)/2
	IF (MOD((NN-NXP),2).NE.0) NR(IMAX+1,NN,1) = 1000
22	DO 25 I=IMIN,IMAX
	IF (NN.LT.NMAX) N = N + 1
25	NR(I,NN,1) = N

	DO 30 NA=2,NXA
	NNMAX = NMAX - NA + 1
	DO 28 NN=1,NNMAX
	DO 28 I =1,NN
	NRV = NR(I,NN,NA-1)
	IF (NRV.EQ.0) GO TO 28
	IF (NRV.NE.1000) GO TO 27
	IF (NA.GE.NXA) GO TO 28
	NR(I,NN,NA) = 1000
	GO TO 28
27	IF (NN.LT.NNMAX .AND. NA.LT.NXA) N = N + 1
	NR(I,NN,NA) = N
28	CONTINUE
30	CONTINUE

	IPS1 = N
	DO 35 NA=1,NXA
	NNMAX = NMAX - NA + 1
	DO 35 NN=1,NNMAX
	DO 35 I =1,NN
	NRV = NR(I,NN,NA)
	IF (NRV.EQ.0) GO TO 35
	IF (NRV.NE.1000 .AND. NN.NE.NNMAX .AND. NA.NE.NXA) GO TO 35
	N = N + 1
	NR(I,NN,NA) = N
35	CONTINUE
	IPSMAX = N
	IF (IPSMAX.LE.NUCL) GO TO 36
	KOPTK = KOPTK - 1
	GO TO 10

36	DO 40 NA=1,NAX
	NNMAX = NMAX - NA
	DO 40 NN=1,NNMAX
	DO 40 I =1,NN
	IPS = NR(I,NN,NA)
	IF (IPS.EQ.0 .OR. IPS.GT.IPS1) GO TO 40
	IPSZO(1,IPS) = NR(I,NN+1,NA)
	IPSZO(2,IPS) = NR(I+1,NN+1,NA)
	IPSZO(3,IPS) = NR(I,NN,NA+1)
40	CONTINUE

C Assignment IPSZO(4,IPS) for decay 4 within the decay cascade defined by
C n, p, and alpha, if it exists! Otherwise outside this cascade!
	IF (IZFMAX.EQ.3) RETURN
	IZR = IZE(4)
	IAR = IAE(4)
	NALPHA = MIN( IZR/2, IAR/4 )
	IZR = IZR - NALPHA*2
	IAR = IAR - NALPHA*4
	INR = IAR - IZR

	I = 0
	DO 70 IPS=1,IPS1
	IPSZF = IPS

	DO 65 N=1,NALPHA
	IPSZF = IPSZO(3,IPSZF)
65	IF (IPSZF.EQ.0) GO TO 68

	DO 66 N=1,IZR
	IPSZF = IPSZO(2,IPSZF)
66	IF (IPSZF.EQ.0) GO TO 68

	DO 67 N=1,INR
	IPSZF = IPSZO(1,IPSZF)
67	IF (IPSZF.EQ.0) GO TO 68

	IPSZO(4,IPS) = IPSZF

	GO TO 70
68	I = I + 1
	IPSZO(4,IPS) = IPSMAX + I
	IF(IPSZO(4,IPS).EQ.NUCL) GO TO 69

70	CONTINUE
69	IPSMAX_4 = IPSMAX
	IPSMAX = IPSMAX + I

	RETURN
	END


	SUBROUTINE EXCORR (EBC)
C Correction values for excitation energy ranges in case of IZFMAX = 4
	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	DIMENSION EBC(3)
	EBC(1) = 0
	EBC(3) = 0
	IZE4 = IZE(4)
	IAE4 = IAE(4)

	IF (IZE4.EQ.1 .AND. IAE4.EQ.2) THEN
C Deuteron decay
	  EBC(1) = 1
	ELSEIF (IZE4.EQ.1 .AND. IAE4.EQ.3) THEN
C Triton
	  EBC(1) = 3
	ELSEIF (IZE4.EQ.2 .AND. IAE4.EQ.3) THEN
C 3He
	  EBC(1) = 3
	ELSEIF (IZE4.EQ.3 .AND. IAE4.EQ.6) THEN
C 6Li
	  EBC(1) = 1
	  EBC(3) = 2
	ELSEIF (IZE4.EQ.3 .AND. IAE4.EQ.7) THEN
C 7Li
	  EBC(1) = 3
	  EBC(3) = 2
	ELSEIF (IZE4.EQ.4 .AND. IAE4.EQ.7) THEN
C 7Be
	  EBC(1) = 2
	  EBC(3) = 2
	ELSEIF (IZE4.EQ.4 .AND. IAE4.EQ.9) THEN
C 9Be
	  EBC(1) = 1
	  EBC(3) = 2
	ELSEIF (IZE4.EQ.5 .AND. IAE4.EQ.9) THEN
C 9B
	  EBC(1) = 1
	  EBC(3) = 2
	ELSEIF (IZE4.EQ.4 .AND. IAE4.EQ.10) THEN
C 10Be
	  EBC(1) = 1
	  EBC(3) = 2
	ELSEIF (IZE4.EQ.5 .AND. IAE4.EQ.10) THEN
C 10B
	  EBC(1) = 1
	  EBC(3) = 2
	ELSEIF (IZE4.EQ.5 .AND. IAE4.EQ.11) THEN
C 11B
	  EBC(1) = 3
	  EBC(3) = 2
	ELSEIF (IZE4.EQ.6 .AND. IAE4.EQ.11) THEN
C 11C
	  EBC(1) = 3
	  EBC(3) = 2
	ELSEIF (IZE4.EQ.6 .AND. IAE4.EQ.12) THEN
C 12C
	  EBC(3) = 2
	ELSEIF (IZE4.EQ.8 .AND. IAE4.EQ.16) THEN
C 16O
	  EBC(3) = 4
	ELSE
C Add other particles if necessary
C Check upper limit of excitation energy ranges
	ENDIF
	EBC(2) = EBC(1)

	END


	SUBROUTINE GETW (IPS,IT0)
C Get the population matrix for nucleus IPS
C from the W-table (file 13) and read it into WT0(L_EX_DIM,L_DIM,2,2)
C the location IT0 in INHWT is determined
C IT0 = 0 if the matrix is not found

	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON/C4/ ITMAX,INHWT(NUCL),IWL
	COMMON/C5/ WT0(L_EX_DIM,L_DIM,2,2),WT(L_EX_DIM,L_DIM,2,2,4)
	COMMON/ISO/ ISPIN,INDPAR,INDIS,AMIX,BMIX,MINFIT
	DIMENSION WT0A(L_EX_DIM*L_DIM/2),WT0B(L_EX_DIM*L_DIM/2)
	DIMENSION WT0C(L_EX_DIM*L_DIM/2),WT0D(L_EX_DIM*L_DIM/2)
	DIMENSION WT0E(L_EX_DIM*L_DIM/2),WT0F(L_EX_DIM*L_DIM/2)
	DIMENSION WT0G(L_EX_DIM*L_DIM/2),WT0H(L_EX_DIM*L_DIM/2)
c	EQUIVALENCE (WT0A(1),WT0(1))
c	EQUIVALENCE (WT0B(1),WT0(1*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT0C(1),WT0(2*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT0D(1),WT0(3*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT0E(1),WT0(4*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT0F(1),WT0(5*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT0G(1),WT0(6*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT0H(1),WT0(7*L_EX_DIM*L_DIM/2+1))
	EQUIVALENCE (WT0A(1),WT0(1,        1,1,1))
	EQUIVALENCE (WT0B(1),WT0(1,L_DIM/2+1,1,1))
	EQUIVALENCE (WT0C(1),WT0(1,        1,2,1))
	EQUIVALENCE (WT0D(1),WT0(1,L_DIM/2+1,2,1))
	EQUIVALENCE (WT0E(1),WT0(1,        1,1,2))
	EQUIVALENCE (WT0F(1),WT0(1,L_DIM/2+1,1,2))
	EQUIVALENCE (WT0G(1),WT0(1,        1,2,2))
	EQUIVALENCE (WT0H(1),WT0(1,L_DIM/2+1,2,2))
	DO 20 IT=1,ITMAX
	IF (INHWT(IT).EQ.IPS) GO TO 25
20	CONTINUE
	IT0 = 0
	RETURN

25	IT0 = IT
	READ(13,REC=IT0*8-7) WT0A
	READ(13,REC=IT0*8-6) WT0B
	READ(13,REC=IT0*8-5) WT0C
	READ(13,REC=IT0*8-4) WT0D
	READ(13,REC=IT0*8-3) WT0E
	READ(13,REC=IT0*8-2) WT0F
	READ(13,REC=IT0*8-1) WT0G
	READ(13,REC=IT0*8-0) WT0H
	INHWT(IT0) = 9999
	IWL = IWL + 1
	IPSW = NINT(WT0(1,L_DIM,2,ISPIN))
	WT0(1,L_DIM,2,ISPIN) = 0
	IF (IPSW.NE.IPS) WRITE(1, 40) IPS,IT0,IPSW
40	FORMAT (' ***ERROR: wrong location of W in table,'
     1   ,' IPS,IT0,IPSWTP =',3I4//)

	END


	SUBROUTINE STOREW (IPSZF,IZF)
C Stores WT(L_EX_DIM,L_DIM,2,2,IZF) in W-table

	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON/C4/ ITMAX,INHWT(NUCL),IWL
	COMMON/C5/ WT0(L_EX_DIM,L_DIM,2,2),WT(L_EX_DIM,L_DIM,2,2,4)
	DIMENSION WT1A(L_EX_DIM*L_DIM/2),WT1B(L_EX_DIM*L_DIM/2)
	DIMENSION WT1C(L_EX_DIM*L_DIM/2),WT1D(L_EX_DIM*L_DIM/2)
	DIMENSION WT1E(L_EX_DIM*L_DIM/2),WT1F(L_EX_DIM*L_DIM/2)
	DIMENSION WT1G(L_EX_DIM*L_DIM/2),WT1H(L_EX_DIM*L_DIM/2)
	DIMENSION WT2A(L_EX_DIM*L_DIM/2),WT2B(L_EX_DIM*L_DIM/2)
	DIMENSION WT2C(L_EX_DIM*L_DIM/2),WT2D(L_EX_DIM*L_DIM/2)
	DIMENSION WT2E(L_EX_DIM*L_DIM/2),WT2F(L_EX_DIM*L_DIM/2)
	DIMENSION WT2G(L_EX_DIM*L_DIM/2),WT2H(L_EX_DIM*L_DIM/2)
	DIMENSION WT3A(L_EX_DIM*L_DIM/2),WT3B(L_EX_DIM*L_DIM/2)
	DIMENSION WT3C(L_EX_DIM*L_DIM/2),WT3D(L_EX_DIM*L_DIM/2)
	DIMENSION WT3E(L_EX_DIM*L_DIM/2),WT3F(L_EX_DIM*L_DIM/2)
	DIMENSION WT3G(L_EX_DIM*L_DIM/2),WT3H(L_EX_DIM*L_DIM/2)
	DIMENSION WT4A(L_EX_DIM*L_DIM/2),WT4B(L_EX_DIM*L_DIM/2)
	DIMENSION WT4C(L_EX_DIM*L_DIM/2),WT4D(L_EX_DIM*L_DIM/2)
	DIMENSION WT4E(L_EX_DIM*L_DIM/2),WT4F(L_EX_DIM*L_DIM/2)
	DIMENSION WT4G(L_EX_DIM*L_DIM/2),WT4H(L_EX_DIM*L_DIM/2)

c	EQUIVALENCE (WT1A(1),WT(                    1))
c	EQUIVALENCE (WT1B(1),WT( 1*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT1C(1),WT( 2*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT1D(1),WT( 3*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT1E(1),WT( 4*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT1F(1),WT( 5*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT1G(1),WT( 6*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT1H(1),WT( 7*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT2A(1),WT( 8*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT2B(1),WT( 9*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT2C(1),WT(10*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT2D(1),WT(11*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT2E(1),WT(12*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT2F(1),WT(13*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT2G(1),WT(14*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT2H(1),WT(15*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT3A(1),WT(16*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT3B(1),WT(17*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT3C(1),WT(18*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT3D(1),WT(19*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT3E(1),WT(20*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT3F(1),WT(21*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT3G(1),WT(22*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT3H(1),WT(23*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT4A(1),WT(24*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT4B(1),WT(25*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT4C(1),WT(26*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT4D(1),WT(27*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT4E(1),WT(28*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT4F(1),WT(29*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT4G(1),WT(30*L_EX_DIM*L_DIM/2+1))
c	EQUIVALENCE (WT4H(1),WT(31*L_EX_DIM*L_DIM/2+1))
	EQUIVALENCE (WT1A(1),WT(1,        1,1,1,1))
	EQUIVALENCE (WT1B(1),WT(1,L_DIM/2+1,1,1,1))
	EQUIVALENCE (WT1C(1),WT(1,        1,2,1,1))
	EQUIVALENCE (WT1D(1),WT(1,L_DIM/2+1,2,1,1))
	EQUIVALENCE (WT1E(1),WT(1,        1,1,2,1))
	EQUIVALENCE (WT1F(1),WT(1,L_DIM/2+1,1,2,1))
	EQUIVALENCE (WT1G(1),WT(1,        1,2,2,1))
	EQUIVALENCE (WT1H(1),WT(1,L_DIM/2+1,2,2,1))
	EQUIVALENCE (WT2A(1),WT(1,        1,1,1,2))
	EQUIVALENCE (WT2B(1),WT(1,L_DIM/2+1,1,1,2))
	EQUIVALENCE (WT2C(1),WT(1,        1,2,1,2))
	EQUIVALENCE (WT2D(1),WT(1,L_DIM/2+1,2,1,2))
	EQUIVALENCE (WT2E(1),WT(1,        1,1,2,2))
	EQUIVALENCE (WT2F(1),WT(1,L_DIM/2+1,1,2,2))
	EQUIVALENCE (WT2G(1),WT(1,        1,2,2,2))
	EQUIVALENCE (WT2H(1),WT(1,L_DIM/2+1,2,2,2))
	EQUIVALENCE (WT3A(1),WT(1,        1,1,1,3))
	EQUIVALENCE (WT3B(1),WT(1,L_DIM/2+1,1,1,3))
	EQUIVALENCE (WT3C(1),WT(1,        1,2,1,3))
	EQUIVALENCE (WT3D(1),WT(1,L_DIM/2+1,2,1,3))
	EQUIVALENCE (WT3E(1),WT(1,        1,1,2,3))
	EQUIVALENCE (WT3F(1),WT(1,L_DIM/2+1,1,2,3))
	EQUIVALENCE (WT3G(1),WT(1,        1,2,2,3))
	EQUIVALENCE (WT3H(1),WT(1,L_DIM/2+1,2,2,3))
	EQUIVALENCE (WT4A(1),WT(1,        1,1,1,4))
	EQUIVALENCE (WT4B(1),WT(1,L_DIM/2+1,1,1,4))
	EQUIVALENCE (WT4C(1),WT(1,        1,2,1,4))
	EQUIVALENCE (WT4D(1),WT(1,L_DIM/2+1,2,1,4))
	EQUIVALENCE (WT4E(1),WT(1,        1,1,2,4))
	EQUIVALENCE (WT4F(1),WT(1,L_DIM/2+1,1,2,4))
	EQUIVALENCE (WT4G(1),WT(1,        1,2,2,4))
	EQUIVALENCE (WT4H(1),WT(1,L_DIM/2+1,2,2,4))

C Search for an empty place
	DO 20 IT=1,ITMAX
	IF (INHWT(IT).EQ.0) GO TO 25
20	CONTINUE
	IT = ITMAX
	WRITE(1, 21) IPSZF
21	FORMAT (' ***ERROR: no space in W-table for IPSZF =',I3//)

25	WT(1,L_DIM,2,2,IZF) = IPSZF
	IF (IZF.EQ.1) THEN
	  WRITE (13,REC=8*IT-7) WT1A
	  WRITE (13,REC=8*IT-6) WT1B
	  WRITE (13,REC=8*IT-5) WT1C
	  WRITE (13,REC=8*IT-4) WT1D
	  WRITE (13,REC=8*IT-3) WT1E
	  WRITE (13,REC=8*IT-2) WT1F
	  WRITE (13,REC=8*IT-1) WT1G
	  WRITE (13,REC=8*IT-0) WT1H
	ELSEIF (IZF.EQ.2) THEN
	  WRITE (13,REC=8*IT-7) WT2A
	  WRITE (13,REC=8*IT-6) WT2B
	  WRITE (13,REC=8*IT-5) WT2C
	  WRITE (13,REC=8*IT-4) WT2D
	  WRITE (13,REC=8*IT-3) WT2E
	  WRITE (13,REC=8*IT-2) WT2F
	  WRITE (13,REC=8*IT-1) WT2G
	  WRITE (13,REC=8*IT-0) WT2H
	ELSEIF (IZF.EQ.3) THEN
	  WRITE (13,REC=8*IT-7) WT3A
	  WRITE (13,REC=8*IT-6) WT3B
	  WRITE (13,REC=8*IT-5) WT3C
	  WRITE (13,REC=8*IT-4) WT3D
	  WRITE (13,REC=8*IT-3) WT3E
	  WRITE (13,REC=8*IT-2) WT3F
	  WRITE (13,REC=8*IT-1) WT3G
	  WRITE (13,REC=8*IT-0) WT3H
	ELSEIF (IZF.EQ.4) THEN
	  WRITE (13,REC=8*IT-7) WT4A
	  WRITE (13,REC=8*IT-6) WT4B
	  WRITE (13,REC=8*IT-5) WT4C
	  WRITE (13,REC=8*IT-4) WT4D
	  WRITE (13,REC=8*IT-3) WT4E
	  WRITE (13,REC=8*IT-2) WT4F
	  WRITE (13,REC=8*IT-1) WT4G
	  WRITE (13,REC=8*IT-0) WT4H
	ENDIF
	INHWT(IT) = IPSZF

	END


	SUBROUTINE CLEAN
C	Compresses W-table
C	by removing unnecessary matrices (labeled INHWT()=9999)

	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON/C4/ ITMAX,INHWT(NUCL),IWL
	DIMENSION WT0A(L_EX_DIM*L_DIM/2)
	ITC = 0

	DO 20 IT=1,ITMAX
	INH = INHWT(IT)
	IF (INH.EQ.0) GO TO 30
	IF (INH.NE.9999) THEN
	  ITC = ITC + 1
	  INHWT(ITC) = INH
	  READ (13,REC=8*IT-7) WT0A
	  WRITE (13,REC=8*ITC-7) WT0A
	  READ (13,REC=8*IT-6) WT0A
	  WRITE (13,REC=8*ITC-6) WT0A
	  READ (13,REC=8*IT-5) WT0A
	  WRITE (13,REC=8*ITC-5) WT0A
	  READ (13,REC=8*IT-4) WT0A
	  WRITE (13,REC=8*ITC-4) WT0A
	  READ (13,REC=8*IT-3) WT0A
	  WRITE (13,REC=8*ITC-3) WT0A
	  READ (13,REC=8*IT-2) WT0A
	  WRITE (13,REC=8*ITC-2) WT0A
	  READ (13,REC=8*IT-1) WT0A
	  WRITE (13,REC=8*ITC-1) WT0A
	  READ (13,REC=8*IT-0) WT0A
	  WRITE (13,REC=8*ITC-0) WT0A
	ENDIF
20	CONTINUE
30	CONTINUE
	ITC = ITC + 1
	DO 42 IT=ITC,ITMAX
42	INHWT(IT) = 0
	IWL = 0
	END


	SUBROUTINE OUTW (IPS,KOUTW,KOUTL,TEXT,WQT,FFB,IZFF)
C Output of population and decay matrices

C	size of arrays in EKIN dimension

	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( KIN_GAM = KIN_PAR )
	PARAMETER	( KIN_COU = 18*KIN_PAR/32 )
	PARAMETER	( KIN_MAX = KIN_PAR + KIN_COU )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	CHARACTER*(*) TEXT
	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),
     1   EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),
     1   ESTEP
	COMMON IEXXL(NUCL),ESEP(4,NUCL),JMIN(NUCL),JMAX(NUCL),
     1   JJMAX(NUCL)
	COMMON/C5/ WT0(L_EX_DIM,L_DIM,2,2),WT(L_EX_DIM,L_DIM,2,2,4)
	COMMON/C7/ WG(L_EX_DIM,5,2,2),WGZ(L_EX_DIM,L_DIM,2,2)
	COMMON/C7/ LZ(L_EX_DIM,L_DIM,2,2),LZF(L_EX_DIM,L_DIM,2,2)
	COMMON/C7/ SE(KIN_PAR,5),SESUM(KIN_MAX,5)
	COMMON/ISO/ ISPIN,INDPAR,INDIS,AMIX,BMIX,MINFIT
	DIMENSION IW(L_EX_DIM,L_DIM),BF(L_DIM)

	CHARACTER*8 XPAR(2)
	CHARACTER*2 XISO(2)
	DATA  XPAR(1)/'POSITIVE'/, XPAR(2)/'NEGATIVE'/,
     1 XISO(1)/'T<'/, XISO(2)/'T>' /

50	FORMAT (' Population matrix (micro-barn)   IPS=',I3,
     1  '   IZ=',I3,'  IA=',I3,3X,F6.1,' mb', 4X,A/)
51	FORMAT (' Population after gamma decay     IPS=',I3,
     1  '   IZ=',I3,'  IA=',I3,4X,F6.1,' mb'/)
57	FORMAT ('1C A S C A D E  (CASCIP2 good isospin & parity'
     1       ,' version) 20-December-1995'///)
60	FORMAT (' Decay probabilities (neutron,proton)',T40,
     1	'IPS=',I3,'  IZ=',I3,'  IA=',I3/)
61	FORMAT (' Decay probabilities (alpha,gamma)',T40,
     1	'IPS=',I3,'  IZ=',I3,'  IA=',I3/)
62	FORMAT (' Decay probabilities (fission,decay4)',T40,
     1	'        IPS=',I3,'  IZ=',I3,'  IA=',I3/)
63	FORMAT (' Lifetimes',T40,
     1	'IPS=',I3,'  IZ=',I3,'  IA=',I3/)
67	FORMAT (' Fission barrier (in MeV) for nucleus',T40,
     1	'IPS=',I3,'  IZ=',I3,'  IA=',I3/)
68	FORMAT (T12,24F5.1,:)
69	FORMAT (' Fission competition not included in this run'/)
70	FORMAT(' For ',A2,1X,A8,' parity states')

	IF (IPS.EQ.1) WRITE(1, 57)
	IF (WQT.LT.KOUTW) RETURN

C Spin range, Ex range
	IEXXX = IEXXMX(IPS)
	JJX = JJMAX(IPS)

C Population matrix
	DO 11 IS=1,ISPIN
	DO 11 JPAR=1,2
	WRITE(1, 50) IPS,IZ(IPS),IA(IPS),WQT,TEXT(:57)
	WRITE(1, 70) XISO(IS),XPAR(JPAR)
	DO 12 JJ=1,JJX
	DO 12 IEXX=1,IEXXX
12	IW(IEXX,JJ) = NINT( WT0(IEXX,JJ,JPAR,IS)*1000)
	CALL PRINTW (IW,IPS)
11	CONTINUE

C Population after gamma decay
	IF (WQT.LT.ABS(KOUTL)) GO TO 30
C FP	IF (IPS.EQ.1) GO TO 20
	WQ1 = 0
	DO 13 IS=1,ISPIN
	DO 13 JPAR=1,2
	DO 13 JJ=1,JJX
	DO 13 IEXX=1,IEXXX
13	WQ1 = WQ1 + WGZ(IEXX,JJ,JPAR,IS)
	IF (WQ1.LE.1) GO TO 20
	DO 14 IS=1,ISPIN
	DO 14 JPAR=1,2
	WRITE(1, 51) IPS,IZ(IPS),IA(IPS),WQ1
	WRITE(1, 70) XISO(IS),XPAR(JPAR)
	DO 15 JJ=1,JJX
	DO 15 IEXX=1,IEXXX
15	IW(IEXX,JJ) = NINT( WGZ(IEXX,JJ,JPAR,IS)*1000 )
	CALL PRINTW (IW,IPS)
14	CONTINUE

C Decay probabilities (n,p)
20	CONTINUE
	DO 21 IS=1,ISPIN
	DO 21 JPAR=1,2
	WRITE(1, 60) IPS,IZ(IPS),IA(IPS)
	WRITE(1, 70) XISO(IS),XPAR(JPAR)
	DO 22 JJ=1,JJX
	DO 22 IEXX=1,IEXXX
	LZZ = LZ(IEXX,JJ,JPAR,IS)
22	IW(IEXX,JJ) = LZZ - (LZZ/10000)*10000
	CALL PRINTW (IW,IPS)
21	CONTINUE

C Decay probabilities (alpha,gamma)
	DO 23 IS=1,ISPIN
	DO 23 JPAR=1,2
	WRITE(1, 61) IPS,IZ(IPS),IA(IPS)
	WRITE(1, 70) XISO(IS),XPAR(JPAR)
	DO 24 JJ=1,JJX
	DO 24 IEXX=1,IEXXX
24	IW(IEXX,JJ) = LZ(IEXX,JJ,JPAR,IS)/10000
	CALL PRINTW (IW,IPS)
23	CONTINUE

C Decay probabilities (fission,decay 4)
	IF (IZFF.EQ.0 .AND. IZFMAX.LE.3) GO TO 27
	DO 25 IS=1,ISPIN
	DO 25 JPAR=1,2
	WRITE(1, 62) IPS,IZ(IPS),IA(IPS)
	WRITE(1, 70) XISO(IS),XPAR(JPAR)
	DO 26 JJ=1,JJX
	DO 26 IEXX=1,IEXXX
	LZZ = LZF(IEXX,JJ,JPAR,IS)
26	IW(IEXX,JJ) = LZZ - (LZZ/10000)*10000
	CALL PRINTW (IW,IPS)
25	CONTINUE
27	CONTINUE

C Lifetimes
	IF (KOUTL.GE.0) GO TO 30
	DO 28 IS=1,ISPIN
	DO 28 JPAR=1,2
	WRITE(1, 63) IPS,IZ(IPS),IA(IPS)
	WRITE(1, 70) XISO(IS),XPAR(JPAR)
	DO 29 JJ=1,JJX
	DO 29 IEXX=1,IEXXX
29	IW(IEXX,JJ) = LZF(IEXX,JJ,JPAR,IS)/10000
	CALL PRINTW (IW,IPS)
28	CONTINUE

C Output of the fission barrier for the compound nucleus
30	IF (IPS.GT.1) RETURN
	WRITE(1, *)
	CALL FBARR (IPS,BF,FFB)
	WRITE(1, 67) IPS,IZ(IPS),IA(IPS)
	WRITE(1, 68) (BF(JJ),JJ=1,JJX)
	IF (IZFF.EQ.0) WRITE(1, 69)
	WRITE(1, '(1H1)')

	END


	SUBROUTINE PRINTW (IW,IPS)
C Prints the matrix IW(L_EX_DIM,L_DIM)	(for OUTW)

	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),
     1   EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),
     1   ESTEP
	COMMON IEXXL(NUCL),ESEP(4,NUCL),JMIN(NUCL),JMAX(NUCL),
     1   JJMAX(NUCL)
	DIMENSION IW(L_EX_DIM,L_DIM),J(L_DIM)
	CHARACTER*1 CH,CHS,CHL,BLANK
	PARAMETER ( CHS='S', CHL='L', BLANK=' ' )

52	FORMAT (T4,'Ex', (T11,16I7,:) )
53	FORMAT (T4,'Ex', (T11,16(I5,'/2'),:) )
54	FORMAT (1X,F6.2,1X,A, (T11,16I7,:) )

	JJX = JJMAX(IPS)
	JD = MOD(IA(IPS),2)
	DO 12 JJ=1,JJX
12	J(JJ) = (JD+1) * (JMIN(IPS)+JJ) + JD
	IF (JD.EQ.0) WRITE(1, 52) (J(JJ),JJ=1,JJX)
	IF (JD.EQ.1) WRITE(1, 53) (J(JJ),JJ=1,JJX)
	WRITE(1, *)

	IEXXX = IEXXMX(IPS)
	DO 24 IEXQ=1,IEXXX
	IEXX = IEXXX + 1 - IEXQ
	EX = EXMIN(IPS) + IEXX*ESTEP
	CH = BLANK
	IF (IEXX.EQ.IEXXS(IPS)) CH = CHS
	IF (IEXX.EQ.IEXXL(IPS)) CH = CHL
	WRITE(1, 54) EX,CH,(IW(IEXX,JJ),JJ=1,JJX)
24	CONTINUE

	IF (IPS.EQ.1) WRITE(1, *)
	IF (IPS.GT.1) WRITE(1, '(1H1)')

	END


	SUBROUTINE OUTS(IPS,KEVAP,KGAMMA,EMINT,TEXT,WQT,WQF,SCN)
C Printout of evaporation and gamma spectra

C	size of arrays in EKIN dimension

	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( KIN_GAM = KIN_PAR )
	PARAMETER	( KIN_COU = 18*KIN_PAR/32 )
	PARAMETER	( KIN_MAX = KIN_PAR + KIN_COU )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	CHARACTER*(*) TEXT
	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),
     1   EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),
     1   ESTEP
	COMMON/C7/ WG(L_EX_DIM,5,2,2),WGZ(L_EX_DIM,L_DIM,2,2)
	COMMON/C7/ LZ(L_EX_DIM,L_DIM,2,2),LZF(L_EX_DIM,L_DIM,2,2)
	COMMON/C7/ SE(KIN_PAR,5),SESUM(KIN_MAX,5)
	COMMON /SB/ EXCN
	DIMENSION WQE(5),X(5),S(L_EX_DIM),SMAX(5)
	DIMENSION EMINT(4),SEPLOT(KIN_MAX,5)
	CHARACTER BLANK*1,NZ*1,PZ*1,AZ*1,DZ*1,NULL*1,PLOT*37,
     1   PLOTG*37
	PARAMETER (BLANK=' ',NZ='N',PZ='P',AZ='A',DZ='4',NULL='0')

	IZFX = IZFMAX + 1
	IF (IPS.EQ.0) GO TO 30

C Summation onto SESUM(IEKINA,IZF), transfer to SEPLOT
	DO 21 IZF=1,IZFX
	DO 18 IEKINA=1,KIN_MAX
18	SEPLOT(IEKINA,IZF) = 0
	DO 21 IEKIN=1,KIN_PAR
	SEX = SE (IEKIN,IZF)
	IF (IZF.LE.4) IEKINA = EMINT(IZF)/ESTEP + IEKIN
	IF (IZF.EQ.IZFX) IEKINA = IEKIN
	IF (IEKINA.GT.KIN_MAX) IEKINA = KIN_MAX
	SEPLOT(IEKINA,IZF) = SEX
21	SESUM (IEKINA,IZF) = SESUM(IEKINA,IZF) + SEX

	IF (WQT.LT.KEVAP.AND.ABS(KGAMMA).NE.2) RETURN
	GO TO 60

C Sum spectra into SEPLOT (if IPS=0)
30	DO 32 IZF=1,IZFX
	DO 32 IEKINA=1,KIN_MAX
32	SEPLOT(IEKINA,IZF) = SESUM(IEKINA,IZF)

73	FORMAT (' Evaporation spectra for nucleus ',I3,'   IZ ='
     1  ,I3,'   IA =',I3,10X,A/)
75	FORMAT (' Summed evaporation spectra ',40X,A/)
77	FORMAT (' Ekin  ',4X,'N',9X,'P',8X,'Alpha ',
     1	'  Spectra',29X,'Ekin    Gamma (Averaged yield)'/)
79	FORMAT (' Ekin  ',3X,'N',8X,'P',6X,'Alpha',6X,'4',4X,
     1	'  Spectra',29X,'Ekin   Gamma  (Averaged yield)'/)
80	FORMAT (1X,F4.1,3(1X,1PE9.2),1X,A,1X,
     1	0PF4.1,1X,1PE9.2,1X,A)
81	FORMAT (1X,F4.1,4(1X,1PE8.2),1X,A,1X,
     1	0PF4.1,1X,1PE8.2,1X,A)
83	FORMAT (' Sum  ',3F8.3,' mb',39X,' Sum',F10.3,' mb',
     1	10X,F10.3,' mb  fission'/
     2	6X,3F8.3,' Multiplicity',35X,F8.3,' Multiplicity',
     3	F10.3,' Multiplicity')
84	FORMAT (' Sum  ',4F7.3,' mb',39X,' Sum',F10.3,' mb',
     1	10X,F10.3,' mb  fission'/
     2	6X,4F7.3,' Multiplicity',35X,F8.3,' Multiplicity',
     3	F10.3,' Multiplicity')
86	FORMAT (/,' Gamma decay not calculated below particle',
     1   ' threshold')
87	FORMAT (/,' Ekin for decay 4 is to be understood as the', 
     1   ' printed value + ',F5.2,' MeV')

60	IF (IPS.EQ.0) WRITE(1, 75) TEXT(:50)
	IF (IPS.NE.0) WRITE(1, 73) IPS,IZ(IPS),IA(IPS),TEXT(:50)
	IF (IZFMAX.LE.3) WRITE(1, 77)
	IF (IZFMAX.EQ.4) WRITE(1, 79)

C Total cross sections WQE(IZF), multiplicity X(IZF)
C Maxima of the spectra SMAX(IZF)
	IF(IPS.NE.1.AND.(KGAMMA.EQ.2.OR.KGAMMA.EQ.-2)) THEN
	  SCN_TEMP=SCN4
	ELSE
	  SCN_TEMP=SCN
	ENDIF
	DO 98 IZF=1,IZFX
	WX = 0
	SEX = 0
	DO 92 IEKINA=1,KIN_MAX
	SX = SEPLOT(IEKINA,IZF)
	WX = WX + SX
	IF (IEKINA.EQ.1 .AND. IZF.EQ.IZFX) SX = 0
	IF (SX.GT.SEX) SEX = SX
92	CONTINUE
	WQE(IZF) = WX
	X(IZF)=WX/SCN_TEMP
	SEX = MAX( SEX, 1E-4 )
98	SMAX(IZF) = SEX
	IF(IPS.EQ.1) THEN
	  IF(KGAMMA.EQ.-2.AND.IZFMAX.EQ.4) THEN
	    SCN4=WQE(4)
	  ELSEIF(KGAMMA.EQ.2) THEN
	    SCN4=WQE(IZFMAX+1)
	  ENDIF
	ENDIF

C EFG	Open file to plot gamma spectrum.
c	OPEN(UNIT=2,STATUS='NEW',FILE='CASCADE.PLO')
	OPEN(UNIT=2,STATUS='UNKNOWN',FILE='CASCADE.PLO')


C MNH	Open file for summed neutron and proton evaporation spectra
	IF (IPS .EQ. 0) THEN	   
	  OPEN(UNIT=3, STATUS='UNKNOWN', FILE='CASCADE.NEU')
	  OPEN(UNIT=4, STATUS='UNKNOWN', FILE='CASCADE.PRO')
	  WRITE(3,*) EXCN
	  WRITE(4,*) EXCN
	ENDIF

C MNH	Give a value for gamma spectrum at zero MeV.
	EKING = 0
	SG = 2*SEPLOT(1,IZFX) - SEPLOT(2,IZFX)
	IF (SG.LT.0.5*SEPLOT(1,IZFX)) SG = 0.5*SEPLOT(1,IZFX)
	WRITE(2,900)EKING,SG

	DO 108 IEKINA=1,KIN_MAX
	EKIN = (IEKINA-0.5) * ESTEP
	EKING = IEKINA * ESTEP
	PLOT = BLANK
	PLOTG = BLANK
	IF (IZFMAX.LE.3) GO TO 105
	S4 = SEPLOT(IEKINA,4)
	IX = 36*S4/SMAX(4) + 1.49
	PLOT(IX:IX) = DZ
105	S2 = SEPLOT(IEKINA,2)
	IX = 36*S2/SMAX(2) + 1.49
	PLOT (IX:IX) = PZ
	S3 = SEPLOT(IEKINA,3)
	IX = 36*S3/SMAX(3) + 1.49
	PLOT (IX:IX) = AZ
	S1 = SEPLOT(IEKINA,1)
	IX = 36*S1/SMAX(1) + 1.49
	PLOT (IX:IX) = NZ
	SG = SEPLOT(IEKINA,IZFX)
	IX = MIN( 37., 36*SG/SMAX(IZFX) + 1.49 )
	PLOTG(IX:IX) = NULL
	PLOT (:1) = NULL
	PLOTG(:1) = NULL
	IF (IZFMAX.EQ.3) THEN
	  WRITE(1, 80) EKIN,S1,S2,S3,   PLOT,EKING,SG,PLOTG(:IX)
	ELSEIF (IZFMAX.EQ.4) THEN
	  WRITE(1, 81) EKIN,S1,S2,S3,S4,PLOT,EKING,SG,PLOTG(:IX)
	ENDIF
	WRITE(2,900)EKING,SG

C MNH	write only summed neutron and proton evaporation spectra.
	IF (IPS .EQ. 0) THEN
	  WRITE(3,900)EKIN, S1
	  WRITE(4,900)EKIN, S2
	ENDIF
900	FORMAT(2E15.7)
108	CONTINUE

	CLOSE(UNIT=2)
	CLOSE(UNIT=3)
	CLOSE(UNIT=4)

	WRITE(1, '(/)')
	XF = WQF/SCN
	IF (IZFMAX.EQ.3) WRITE(1, 83) (WQE(IZF),IZF=1,4),WQF,
     1	(X(IZF),IZF=1,4),XF
	IF (IZFMAX.EQ.4) WRITE(1, 84) WQE,WQF,X,XF
	IF (KGAMMA.EQ.0) WRITE(1, 86)
	IF (IZFMAX.EQ.3) GO TO 130
	ED = MOD( EMINT(4), ESTEP ) - ESTEP*0.5
	WRITE(1, 87) ED
130	WRITE(1, '(1H1)')

	END


	SUBROUTINE RTABLE
C Table of level densities

C	size of arrays in EKIN dimension
	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),
     1   EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),
     1   ESTEP
	COMMON IEXXL(NUCL),ESEP(4,NUCL),JMIN(NUCL),JMAX(NUCL),
     1   JJMAX(NUCL)

	COMMON/C2/ FT(NUCL),DA(NUCL),DELTA(NUCL),DELTA1(NUCL),
     1   CK(NUCL)
	COMMON/C2/ R0LDM,DEF,DEFS,DALDM,DAF,UTR,ULDM,UJTR,UJLDM,
     1   DLDM(NUCL)

	COMMON/C3/ IPSLVX,IZLV(100),IALV(100),EXLVX(100),LVMAX(100)
	COMMON/C3/ EXLV(50,100),JLV(50,100),LVPARI(50,100)

	COMMON/C6/ TSUM(KIN_PAR,32,31,4),RHO(L_EX_DIM,L_DIM,2,2,5)
	COMMON/C6/ RHOG(L_EX_DIM,L_DIM,2,2),
     1             DMMY(L_EX_DIM,L_DIM,2,2,4)
	COMMON/ISO/ ISPIN,INDPAR,INDIS,AMIX,BMIX,MINFIT

	DIMENSION JJJ(L_DIM),TOTRHO(L_EX_DIM),CUMRHO(L_EX_DIM)
	CHARACTER*8 XPAR(2)
	CHARACTER*2 XISO(2)
	DATA  XPAR(1)/'POSITIVE'/, XPAR(2)/'NEGATIVE'/,
     1 XISO(1)/'T<'/, XISO(2)/'T>' /

	IF(MINFIT.NE.1) THEN
	DO 50 IPS=1,IPSMAX
	IF (IEXXMX(IPS).GE.1) THEN

	  IEXXX = IEXXMX(IPS)
	  JJX = JJMAX(IPS)

	  IF (DALDM.LE.0.01) THEN
	    DALD = DA(IPS)
	    DLDM(IPS) = DELTA(IPS)
	  ELSE
	    DALD = DALDM
	  ENDIF

	  CALL LEVELD(EXMIN(IPS),IEXXX,JMIN(IPS),JJX,CK(IPS),
     1     IA(IPS),IZ(IPS),EIAS(IPS),DA(IPS),DALD,DELTA(IPS),
     1     DELTA1(IPS),DLDM(IPS),FT(IPS),R0LDM,DEF,DEFS,UTR,
     1     ULDM,UJTR,UJLDM,ESTEP)

C See if levels are read in
	  DO 10 IPSLV=2,IPSLVX
	  IZZ = IZLV(IPSLV)
	  IAA = IALV(IPSLV)
	  IF (IAA.EQ.IA(IPS).AND.
     1        (IZZ.EQ.IZ(IPS).OR.IAA-IZZ.EQ.IZ(IPS))) GO TO 12
10	  CONTINUE
C If no levels entered, calculate some
	  IPSLV = 1

12	  IETEMP = (EXLVX(IPSLV)-EXMIN(IPS))/ESTEP
	  IF((EXMIN(IPS)+IETEMP*ESTEP).GT.EXLVX(IPSLV))
     1	IETEMP=IETEMP-1
	  IETEMP = MIN(IETEMP,IEXXX)
	  DO 13 IEXX=1,IETEMP
	  DO 13 JJ=1,JJX
	  DO 13 JPAR=1,2
C Erase level densities below given excitation.
	  RHOG(IEXX,JJ,JPAR,1) = 0
13	  RHOG(IEXX,JJ,JPAR,2) = 0

14	  LVX = LVMAX(IPSLV)
	  DO 17 LV=1,LVX
	  IEXX = NINT( (EXLV(LV,IPSLV)-EXMIN(IPS))/ESTEP )
	  IF (IEXX.LE.0 .OR. IEXX.GT.IEXXX) GO TO 17
	  IF (IEXX.GT.IETEMP.AND.EXLV(LV,IPSLV).LE.EXLVX(IPSLV))
     1    GO TO 17
	  JJ = JLV(LV,IPSLV) - JMIN(IPS)
	  IF (JJ.LE.0 .OR. JJ.GT.JJX) GO TO 17

C MNH	Set isospin of level
	  IS = 1
	  IF (LVPARI(LV,IPSLV).GT.1) THEN
	    LVPARI(LV,IPSLV) = LVPARI(LV,IPSLV) - 4
	    IS = 2
	  ENDIF

C MNH	If parity of this Ex and J not yet set, set it
		JPAR = LVPARI(LV,IPSLV) + 1
C MNH	Enter level density per MeV for this interval
	  IF (JPAR.EQ.0) THEN
C MNH	For undefined parity take half positive half negative
	    RHOG(IEXX,JJ,1,IS)=RHOG(IEXX,JJ,1,IS)+.5/ESTEP
	    RHOG(IEXX,JJ,2,IS)=RHOG(IEXX,JJ,2,IS)+.5/ESTEP
	  ELSE
	    RHOG(IEXX,JJ,JPAR,IS)=RHOG(IEXX,JJ,JPAR,IS)+1/ESTEP
	  ENDIF
	  IF(EXLV(LV,IPSLV).LT.EXLVX(IPSLV)) GO TO 17
	  JJ1 = JJ + 1
	  IF (JJ1.GT.JJX) GO TO 17
	IF(LV.LT.LVX) THEN
	    LVF = LV+1
	    IEXXF = NINT( (EXLV(LVF,IPSLV)-EXMIN(IPS))/ESTEP )
	    IEXXF = MIN(IEXXF-1,IEXXX)
	ELSE
	  IEXXF = IEXX
	ENDIF
	  DO 16 IEXXJ=IEXX,IEXXF
	  DO 16 JJ=JJ1,JJX
	  RHOG(IEXXJ,JJ,1,1) = 0
	  RHOG(IEXXJ,JJ,2,1) = 0
	  RHOG(IEXXJ,JJ,1,2) = 0
16	  RHOG(IEXXJ,JJ,2,2) = 0
17	  CONTINUE

C MNH	Isospin mixing performed according to the simple relation that a state
C MNH	at excitation energy EX has an isospin admixture = AMIX + BMIX*EX
	  CUM=0.
	  IF ((AMIX+BMIX).NE.0..OR.(INDIS.EQ.2.OR.INDIS.EQ.9)) THEN
	    DO 18 IEXX=1,IEXXX
	    TOTRHO(IEXX)=0.
	    EX=EXMIN(IPS)+IEXX*ESTEP
	    TEMP=AMIX+BMIX*EX
	    DO 19 JJ=1,JJX
	    DO 19 JPAR=1,2
	    TEMP1=RHOG(IEXX,JJ,JPAR,1)
	    TEMP2=RHOG(IEXX,JJ,JPAR,2)
	    IF (INDIS.EQ.2.OR.INDIS.EQ.9)
     1   TOTRHO(IEXX)=TOTRHO(IEXX)+TEMP1+TEMP2
	    IF (TEMP.GT.0) THEN
	      RHOG(IEXX,JJ,JPAR,1) = (1.-TEMP)*TEMP1 + TEMP*TEMP2
	      RHOG(IEXX,JJ,JPAR,2) = (1.-TEMP)*TEMP2 + TEMP*TEMP1
	    ENDIF
19	    CONTINUE
	    CUM=CUM+TOTRHO(IEXX)
	    CUMRHO(IEXX)=CUM
18	    CONTINUE
	  ENDIF

	  RHOG(2,L_DIM,2,2) = IPS
	  WRITE(12,REC=8*IPS-7) 
     1     ((RHOG(J,I,1,1),J=1,L_EX_DIM),I=1,L_DIM/2)
	  WRITE(12,REC=8*IPS-6) 
     1      ((RHOG(J,I,1,1),J=1,L_EX_DIM),I=L_DIM/2+1,L_DIM)
	  WRITE(12,REC=8*IPS-5) 
     1     ((RHOG(J,I,2,1),J=1,L_EX_DIM),I=1,L_DIM/2)
	  WRITE(12,REC=8*IPS-4) 
     1      ((RHOG(J,I,2,1),J=1,L_EX_DIM),I=L_DIM/2+1,L_DIM)
	  WRITE(12,REC=8*IPS-3) 
     1     ((RHOG(J,I,1,2),J=1,L_EX_DIM),I=1,L_DIM/2)
	  WRITE(12,REC=8*IPS-2) 
     1      ((RHOG(J,I,1,2),J=1,L_EX_DIM),I=L_DIM/2+1,L_DIM)
	  WRITE(12,REC=8*IPS-1) 
     1     ((RHOG(J,I,2,2),J=1,L_EX_DIM),I=1,L_DIM/2)
	  WRITE(12,REC=8*IPS  ) 
     1      ((RHOG(J,I,2,2),J=1,L_EX_DIM),I=L_DIM/2+1,L_DIM)

C MNH	Write down level densities
	  IF (INDIS.EQ.2.OR.INDIS.EQ.9) THEN
	    WRITE(1, 60) IPS,IZ(IPS),IA(IPS)
60	    FORMAT (' Total level density  (1/MeV)   IPS=',I3,
     1       '   IZ=',I3,'  IA=',I3/)
	    WRITE(1, 61)
61	    FORMAT('   Ex',8X,'Total',5x,'Cummulative')
	    DO 62 IEXX=1,IEXXX
	    EX = EXMIN(IPS) + IEXX*ESTEP
	    WRITE(1,63) EX,TOTRHO(IEXX),CUMRHO(IEXX)
63	    FORMAT (1X,F6.2,4X,2(E10.4,2X))
62	    CONTINUE
	  ENDIF
	  IF (INDIS.EQ.3.OR.INDIS.EQ.9) THEN
	    WRITE(1, 64) IPS,IZ(IPS),IA(IPS)
64	    FORMAT (' Level density matrix (1/MeV)   IPS=',I3,
     1       '   IZ=',I3,'  IA=',I3/)
	    JD = MOD(IA(IPS),2)
	    DO 65 JJ=1,JJX
65	    JJJ(JJ) = (JD+1) * (JMIN(IPS)+JJ) + JD
	    DO 66 IS=1,2
	    DO 66 JPAR=1,2
	    WRITE(1,67) XISO(IS),XPAR(JPAR)
	    IF (JD.EQ.0) WRITE(1, 68) (JJJ(JJ),JJ=1,JJX)
	    IF (JD.EQ.1) WRITE(1, 69) (JJJ(JJ),JJ=1,JJX)
67	    FORMAT(' Level density for ',A2,1X,A8,' parity states')
68	    FORMAT (T4,'Ex', (T11,10I11,:) )
69	    FORMAT (T4,'Ex', (T11,10(I9,'/2'),:) )
	    DO 66 IEXX=1,IEXXX
	    EX = EXMIN(IPS) + IEXX*ESTEP
	    WRITE(1,70) EX,(RHOG(IEXX,JJ,JPAR,IS),JJ=1,JJX)
70	    FORMAT (1X,F6.2,2X, (T11,10(1X,E10.4),:))
66	    CONTINUE
	  ENDIF
	ENDIF
50	CONTINUE
	ENDIF
	END


	SUBROUTINE LEVELD (EXMIN,IEXXMX,JMIN,JJMAX,CK,IA,IZ,EIAS,
     1	DA,DALDM,DELTA,DELTA1,DLDM,FTHETA,R0LDM,DEF,DEFS,
     2	UTR,ULDM,UJTR,UJLDM,ESTEP)
C Level density subroutine for CASCADE I/P (29.4.80)
C Fermi gas level density with energy dependent parameters A,DELTA,THETA

C	size of arrays in EKIN dimension
	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )

	COMMON/C6/ TSUM(KIN_PAR,32,31,4), RHO(L_EX_DIM,L_DIM,2,2,5)
	COMMON/C6/ RHOG(L_EX_DIM,L_DIM,2,2),
     1             DMMY(L_EX_DIM,L_DIM,2,2,4)
	COMMON/ISO/ ISPIN,INDPAR,INDIS,AMIX,BMIX,MINFIT

	DO 10 IS=1,ISPIN
	DO 10 JPAR=1,2
	DO 10 JJ=1,L_DIM
	DO 10 IEXX=1,L_EX_DIM
10	RHOG(IEXX,JJ,JPAR,IS) = 0

	XPOS=.5
	XNEG=.5
	IF(INDPAR.EQ.1.AND.(MOD(IA,2).EQ.0.AND.MOD(IZ,2).EQ.0)) THEN
	  A13=IA**(1./3.)
	  EHIGH=40./A13
	  ELOW=15./A13
	  DP=.5*ESTEP/(EHIGH-ELOW)
	  XPOS=1.
	  XNEG=0.
	ENDIF

	A = IA/DA
	ALDM = IA/DALDM
	C1 = 0.50/ALDM
	C2 = C1**2
	THLDM = 0.0192964 * R0LDM**2 * IA**(5./3.)
	THETA = FTHETA * THLDM
	CJD = 0.5 * MOD(IA,2)
	DTEMP=DELTA
	ETEMP=EXMIN

	DO 30 IS=1,ISPIN
	IF(IS.EQ.ISPIN) THEN
	  ETEMP=ETEMP-EIAS
	  DTEMP=DELTA1
	ENDIF
	ETR = UTR + DTEMP
	ELDM = ULDM + DTEMP
	AA = (ALDM-A)/(ELDM-ETR)
	DD = (DLDM-DTEMP)/(ELDM-ETR)
	EJTR = UJTR + DTEMP
	EJLDM = UJLDM + DTEMP
	TT = (THLDM-THETA)/(EJLDM-EJTR)

	DO 30 IEXX=1,IEXXMX
	EX = ETEMP + IEXX*ESTEP
	IF(EX.LT.0.) GO TO 30
	AX = ALDM
	DELTAX = DLDM
	IF (EX.GT.ELDM) GO TO 18
	AX = A
	DELTAX = DTEMP
	IF (EX.LE.ETR) GO TO 18
	EE = EX - ETR
	AX = A + AA*EE
	DELTAX = DTEMP + DD*EE
18	THETAX = THLDM
	IF (EX.GT.EJLDM) GO TO 19
	THETAX = THETA
	IF (EX.LE.EJTR) GO TO 19
	EE = EX - EJTR
	THETAX = THETA + TT*EE
19	U = EX - DELTAX
	CX = CK*SQRT(AX)/(12*THETAX**1.5)
	IF(INDPAR.EQ.1.AND.(MOD(IA,2).EQ.0.AND.MOD(IZ,2).EQ.0)) THEN
	  IF(EX.GT.EHIGH) THEN
	    XPOS=.5
	    XNEG=.5
	  ELSEIF(EX.GT.ELOW)THEN
	    XPOS=1.-DP*EX
	    XNEG=DP*EX
	  ENDIF
	ENDIF
	DO 26 JJ=1,JJMAX
	CJ = JMIN + JJ + CJD
C MNH	These statements have been replaced by the three following ones to be
C MNH	consistent with FUNCTION YRASTL which uses integer angular momentum to
C MNH	calculate rotational energy.
C MNH	CJ2 = CJ*CJ
C MNH	CJ1 = CJ2 + CJ
	CJ2 = (CJ-CJD)*(CJ-CJD)
	CJ1 = CJ2 + (CJ-CJD)
	UJ= U - CJ1/(THETAX*(1+(DEF+DEFS*CJ2)*CJ2))
	IF (UJ.LE.0) GO TO 30
	T = C1 + SQRT(UJ/AX+C2)
	CJ = 2*CJ+ 1
	TEMP = (CX*CJ/(UJ+T)**2)* EXP(2*SQRT(AX*UJ))
	RHOG(IEXX,JJ,1,IS)=XPOS*TEMP
26	RHOG(IEXX,JJ,2,IS)=XNEG*TEMP
30	CONTINUE

C MNH	Renormalize T< and T> level densities
	DO 40 JPAR=1,2
	DO 40 IEXX=1,IEXXMX
	DO 40 JJ=1,JJMAX
	TEMP=RHOG(IEXX,JJ,JPAR,1)
	IF(TEMP.EQ.0) GO TO 40
	TEMP=TEMP/(TEMP+RHOG(IEXX,JJ,JPAR,2))
	RHOG(IEXX,JJ,JPAR,1)=TEMP*RHOG(IEXX,JJ,JPAR,1)
	RHOG(IEXX,JJ,JPAR,2)=TEMP*RHOG(IEXX,JJ,JPAR,2)
40	CONTINUE

	END
	SUBROUTINE LQPARM (KOPTLQ,KOPTEB,ALPHA2)
C Calculates standard parameters for level densities in the liquid-drop region

C	size of arrays in EKIN dimension
	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),
     1   EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),
     1   ESTEP
	COMMON IEXXL(NUCL),ESEP(4,NUCL),JMIN(NUCL),JMAX(NUCL),
     1   JJMAX(NUCL)

	COMMON/C2/ FT(NUCL),DA(NUCL),DELTA(NUCL),DELTA1(NUCL),
     1   CK(NUCL)
	COMMON/C2/ R0LDM,DEF,DEFS,DALDM,DAF,UTR,ULDM,UJTR,UJLDM,
     1   DLDM(NUCL)

	COMMON/C6/ TSUM(KIN_PAR,32,31,4),RHO(L_EX_DIM,L_DIM,2,2,5)
	COMMON/C6/ W(L_EX_DIM,L_DIM,2,2,4),WF(L_EX_DIM,L_DIM,2,2)
	DIMENSION EB(128,144)
c	EQUIVALENCE (EB(1),TSUM(1))
	EQUIVALENCE (EB(1,1),TSUM(1,1,1,1))

	Z = IZ(1) - 2
	A = IA(1) - 4
	A13 = A**(1./3.)
	IF (R0LDM.GT.0.01) GO TO 12
	A23 = A13*A13
	R0LDM = 1.13 + 2.1/A23
	IF (R0LDM.GT.1.3) R0LDM = 1.3
12	IF (ABS(DEF).GT.1E-8) GO TO 13
	CALL CPS (Z,A,R0LDM,DEF,DEFS)
13	IF (DALDM.LE.0.01) DALDM = 8
	IF (DAF .LE.0.01) DAF = DALDM

C MNH	The energy for the liquid drop is now set by default at 120*A**-1/3 MeV
C MNH	and the transition energy at 60*A**-1/3 MeV instead of the original 20
C MNH	MeV and 10 MeV, respectively

	IF (ULDM .LE.0.01) ULDM = 120/A13
	IF (UTR .LE.0.01) UTR = 60/A13
	IF (UJLDM.LE.0.01) UJLDM = ULDM
	IF (UJTR .LE.0.01) UJTR = UTR
	IF (KOPTLQ.NE.2) GO TO 14
	DALDM = 0
	RETURN

14	DO 15 IPS=1,IPSMAX
	DLDM(IPS) = 0
	IF (IEXXMX(IPS).LE.0) GO TO 15
	IZZ = IZ(IPS)
	IAA = IA(IPS)
	N = IAA - IZZ
	NN = N + 1 - NPDRIP(IZZ)
	DLDM(IPS) = EB(NN,IZZ) - EBLDM(IZZ,IAA,KOPTEB,ALPHA2)
	IF (EB(NN,IZZ).LT.0.1) DLDM(IPS) = 0
15	CONTINUE

	END


	SUBROUTINE LDPARM (KOPTLD)
C Calculates standard level density parameters
	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),
     1   EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),
     1   ESTEP
	COMMON IEXXL(NUCL),ESEP(4,NUCL),JMIN(NUCL),JMAX(NUCL),
     1   JJMAX(NUCL)

	COMMON/C2/ FT(NUCL),DA(NUCL),DELTA(NUCL),DELTA1(NUCL),
     1   CK(NUCL)
	COMMON/C2/ R0LDM,DEF,DEFS,DALDM,DAF,UTR,ULDM,UJTR,UJLDM,
     1   DLDM(NUCL)

	IF (KOPTLD.GE.50) GO TO 30
	KDILG = KOPTLD
	IF (KDILG.GE.10) KDILG = KDILG - 10
	CALL DILG (KDILG)
	IF (KOPTLD.LE.9) RETURN
	DO 20 IPS=1,IPSMAX
	DA(IPS) = DA(IPS) - 1
	DELTA(IPS) = DELTA(IPS) + 1
20	DELTA1(IPS) = DELTA1(IPS) + 1
	RETURN

30	DO 38 IPS=1,IPSMAX
	CK(IPS) = 1
	DA(IPS) = 8
	IZZ = IZ(IPS)
	NN = IA(IPS) - IZZ
	IF (MOD(IZZ,2).EQ.0 .AND. MOD(NN,2).EQ.0) THEN
	  DELTA(IPS) = 0.7
	  DELTA1(IPS) = -2
	ELSEIF (MOD(IZZ,2).NE.0 .AND. MOD(NN,2).NE.0) THEN
	  DELTA(IPS) = -2
	  DELTA1(IPS) = 0.7
	ELSE
	  DELTA(IPS) = -0.7
	  DELTA1(IPS) = -0.7
	ENDIF
38	CONTINUE

	END


	SUBROUTINE DILG (KDILG)
C Calculates level density parameters DA,DELTA,CK using analytical expressions
C fitted to the empirical values of Dilg et al. Nucl.Phys.A217(1973)269.

C	size of arrays in EKIN dimension
	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),
     1   EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),
     1   ESTEP
	COMMON IEXXL(NUCL),ESEP(4,NUCL),JMIN(NUCL),JMAX(NUCL),
     1   JJMAX(NUCL)

	COMMON/C2/ FT(NUCL),DA(NUCL),DELTA(NUCL),DELTA1(NUCL),
     1   CK(NUCL)
	COMMON/C2/ R0LDM,DEF,DEFS,DALDM,DAF,UTR,ULDM,UJTR,UJLDM,
     1   DLDM(NUCL)

	COMMON/C6/ TSUM(KIN_PAR,32,31,4),RHO(L_EX_DIM,L_DIM,2,2,5)
	COMMON/C6/ V(L_EX_DIM,L_DIM,2,2,5)
	DIMENSION EB(128,144)
c	EQUIVALENCE (EB(1),TSUM(1))
	EQUIVALENCE (EB(1,1),TSUM(1,1,1,1))
	DIMENSION SHLLZ(5),SHLLN(5)
	DATA SHLLZ /28,50,82,114,184/
	DATA SHLLN /28,50,82,126,184/

	PARAMETER (REAL_MAX = 88.)

	DO 90 IPS=1,IPSMAX
	IF (IEXXMX(IPS).LE.0) GO TO 90
	CK(IPS) = 1
	AA = IA(IPS)
	IZZ = IZ(IPS)
	NN = IA(IPS) - IZZ

	CALL IAS(AA,IZZ,EIAS(IPS))

	KD = KDILG + 1
	GO TO (10,20,30,30,30,60), KD

C Option 0
C Backshift B and level density parameters DAZ and DAN without shell effects
10	B = 1.1 + 80/AA
	IF (AA.LT.40) B = 3.1 + (40-AA)*0.035
	DAZ = 7.7
	DAN = 7.7
	IF (IZZ.GE.65) DAZ = 9
	IF (NN.GE.100) DAN = 9
	IF (IZZ.GT.50 .AND. IZZ.LT.65) DAZ = 7.7 + .0867*(IZZ-50)
	IF (NN .GT.82 .AND. NN.LT.100) DAN = 7.7 + .0722*(NN-82)
	IF (IZZ.LE.20) DAZ = 9
	IF (NN .LE.20) DAN = 9
	IF (IZZ.GT.20 .AND. IZZ.LT.24) DAZ = 9 - 0.325*(IZZ-20)
	IF (NN .GT.20 .AND. NN .LT.24) DAN = 9 - 0.325*(NN -20)
	IF (AA.GE.30) GO TO 12
	DAZ = 9 - (30-AA)*0.05
	DAN = DAZ
12	SB = -1.5
	SD = 2
	W = 0.4
	GO TO 50

C Option 1
20	B = 1.7 + 80/AA
	IF (AA.LT.40) B = 3.7 + (40-AA)*0.035
	DAZ = 7.2
	DAN = 7.2
	IF (IZZ.GE.65) DAZ = 9
	IF (NN.GE.100) DAN = 9
	IF (IZZ.GT.50 .AND. IZZ.LT.65) DAZ = 7.2 + .1200*(IZZ-50)
	IF (NN .GT.82 .AND. NN.LT.100) DAN = 7.2 + .1000*(NN-82)
	IF (IZZ.LE.20) DAZ = 9
	IF (NN .LE.20) DAN = 9
	IF (IZZ.GT.20 .AND. IZZ.LT.24) DAZ = 9 - 0.450*(IZZ-20)
	IF (NN .GT.20 .AND. NN .LT.24) DAN = 9 - 0.450*(NN -20)
	IF (AA.GE.30) GO TO 22
	DAZ = 9 - (30-AA)*0.05
	DAN = DAZ
22	SB = -2
	SD = 2
	W = 0.5
	GO TO 50

C Option 2
30	B = 0.7 + 19/SQRT(AA)
	DAA = 7.2
	SB = - 1.5
	SD = 1.8
	W = 0.4
	IF (KDILG.EQ.3) SB = -2
	IF (KDILG.EQ.4) SD = 2.3

C Shell effect for options 0...4
C Next shells ISHLLZ,ISHLLN
50	ISHLLZ = 1
	DZ = 100
	DO 51 I=1,5
	DZZ = ABS(IZZ-SHLLZ(I))
	IF (DZZ.GE.DZ) GO TO 51
	DZ = DZZ
	ISHLLZ = I
51	CONTINUE
	ISHLLN = 1
	DN = 100
	DO 52 I=1,5
	DNN = ABS(NN-SHLLN(I))
	IF (DNN.GE.DN) GO TO 52
	DN = DNN
	ISHLLN = I
52	CONTINUE

C Damping functions
	DBZ = W * SQRT(SHLLZ(ISHLLZ))
	DBN = W * SQRT(SHLLN(ISHLLN))
	X = DZ/DBZ
	EZ = 0
	IF (X.LT.REAL_MAX) EZ = EXP(-X)
	X = DN/DBN
	EN = 0
	IF (X.LT.REAL_MAX) EN = EXP(-X)

C DELTA with shell effect
	SBZ = SB * EZ
	SBN = SB * EN
	B = B + SBZ + SBN
	P1 = 29.4/AA
	IF (KDILG.GE.2) P1 = P1 + 0.5
	P = 25.6/SQRT(AA)
	IF (MOD(IZZ,2).EQ.0 .AND.MOD(NN,2).EQ.0) THEN
	  DELTA(IPS) = P - B
	  DELTA1(IPS) = P1 - B
	ELSEIF (MOD(IZZ,2).NE.0 .AND.MOD(NN,2).NE.0) THEN
	  DELTA(IPS) = P1 - B
	  DELTA1(IPS) = P - B
	ELSE
	  DELTA(IPS) = P/2. - B
	  DELTA1(IPS) = P/2. - B
	ENDIF

C DA with shell effect
	SDZ = SD * EZ
	SDN = SD * EN
	DAZ = DAZ + SDZ
	DAN = DAN + SDN
	DA(IPS) = AA/(NN/DAN+IZZ/DAZ)
	IF (KDILG.GE.2) DA(IPS) = DAA + SDZ + SDN

C Corrections for light nuclei
C MNH	Modified to reproduce the level densities of many light nuclei at low
C MNH	excitation energies as obtained from Endt and van der Leun or from
C MNH	Ajzenberg-Selove.

	IF (AA.GT.44.1) GO TO 90
	IF (IZZ.EQ.NN) THEN
	  IF (MOD(IZZ,2).EQ.0) THEN
	    DA(IPS) = DA(IPS) + 0.5
	    DELTA(IPS) = DELTA(IPS) + 0.5
	    IF (NN.EQ.8.OR.NN.EQ.20) THEN
	      DA(IPS) = DA(IPS) + 0.5
	      DELTA (IPS) = DELTA(IPS) + 0.5
	    ELSEIF (NN.EQ.14) THEN
	      DA(IPS) = DA(IPS) + 1.15
	      DELTA (IPS) = DELTA(IPS) + 0.25
	    ELSEIF (NN.EQ.12) THEN
	      DA(IPS) = DA(IPS) + 0.2
	    ELSEIF (NN.EQ.10) THEN
	      DA(IPS) = DA(IPS) - 0.75
	    ELSEIF (NN.EQ.6) THEN
	      DA(IPS) = DA(IPS) + 1.2
	      DELTA (IPS) = DELTA(IPS) + 0.5
	    ENDIF
	  ELSE
	    DELTA1(IPS)=DELTA1(IPS)+0.5
	    IF (NN.EQ.9) THEN
	      DA(IPS) = DA(IPS) - 0.7
	    ELSEIF (NN.EQ.7) THEN
	      DA(IPS) = DA(IPS) + 0.85
	    ENDIF
	  ENDIF
	ELSEIF (IA(IPS).EQ.39.AND.(IZZ.EQ.20.OR.IZZ.EQ.19)) THEN
	  DA(IPS) = DA(IPS) + 1.5
	  DELTA(IPS) = DELTA(IPS) + 1.2
	ELSEIF (IA(IPS).EQ.27.AND.(IZZ.EQ.14.OR.IZZ.EQ.13)) THEN
	  DA(IPS) = DA(IPS) + 0.5
	  DELTA(IPS) = DELTA(IPS) + 0.2
	ELSEIF (IA(IPS).EQ.26.AND.(IZZ.EQ.14.OR.IZZ.EQ.12)) THEN
	  DA(IPS) = DA(IPS) - 0.1
	  DELTA(IPS) = DELTA(IPS) - 0.5
	ELSEIF (IA(IPS).EQ.23.AND.(IZZ.EQ.12.OR.IZZ.EQ.11)) THEN
	  DA(IPS) = DA(IPS) + 0.4
	ELSEIF (IA(IPS).EQ.22.AND.(IZZ.EQ.12.OR.IZZ.EQ.10)) THEN
	  DA(IPS) = DA(IPS) - 0.75
	  DELTA(IPS) = DELTA(IPS) - 0.75
	ELSEIF (IA(IPS).EQ.21.AND.(IZZ.EQ.11.OR.IZZ.EQ.10)) THEN
	  DA(IPS) = DA(IPS) - 0.25
	ELSEIF (IA(IPS).EQ.19.AND.(IZZ.EQ.10.OR.IZZ.EQ.9)) THEN
	  DA(IPS) = DA(IPS) - 1.15
	ELSEIF (IA(IPS).EQ.18.AND.(IZZ.EQ.10.OR.IZZ.EQ.8)) THEN
	  DA(IPS) = DA(IPS) - 1.1
	  DELTA(IPS) = DELTA(IPS) - 1.
	ELSEIF (IA(IPS).EQ.15.AND.(IZZ.EQ.8.OR.IZZ.EQ.7)) THEN
	  DA(IPS) = DA(IPS) + 1.15
	  DELTA(IPS) = DELTA(IPS) + 0.5
	ENDIF
	GO TO 90

C Option 5
C Shell effects in the level density parameters derived from those of the g.s.
C binding energy
60	CALL MYERS (IZZ,IA(IPS),EBLD0,EBGS,P,P1)
	NNN = NN + 1 - NPDRIP(IZZ)
	S = EB(NNN,IZZ) - EBLD0

	DA(IPS) = 8.5 + 0.70*S
	B = 19/SQRT(AA) - 1.9 - 0.40*S
	B1 = B - 0.5
	IF (MOD(IZZ,2).EQ.0 .OR. MOD(NN,2).EQ.0) THEN
	  DELTA(IPS) = P - B
	  IF(MOD(IA(IPS),2).EQ.0) THEN
	    DELTA1(IPS) = P1 - B1
	  ELSE
	    DELTA1(IPS) = P1 - B
	  ENDIF
	ELSE
	  DA(IPS) = DA(IPS) - 0.5
	  DELTA(IPS) = P - B1
	  DELTA1(IPS) = P1 - B
	ENDIF
90	CONTINUE
	END


	SUBROUTINE IAS(A,IZT,EIAS)

C MNH	Program to calculate approximate energies of T> states (see J.Janecke
C MNH	in "Isospin In Nuclear Physics" ,pp 297 and following pages).
C MNH	Coulomb energies are obtained from formula D (page 341) from which the
C MNH	energies of IAS are calculated using masses obtained from the mass
C MNH	table.If some of the masses are not known an approximate formula is
C MNH	used to calculate the energy of the IAS (p.364) using T**2 instead of
C MNH	T*(T+1) and 4*delta if A and Z are even and zero if A or Z are odd.

C	size of arrays in EKIN dimension

	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )

	COMMON/C6/ TSUM(KIN_PAR,32,31,4),RHO(L_EX_DIM,L_DIM,2,2,5),
     1    V(L_EX_DIM,L_DIM,2,2,5)
	DIMENSION EB(128,144)
c	EQUIVALENCE (EB(1),TSUM(1))
	EQUIVALENCE (EB(1,1),TSUM(1,1,1,1))
	REAL*4 MN_MH
	DATA BETA,ETA,EPSILON,MN_MH /30.586,53.767,10.609,782./

	IAT=NINT(A)
	A13=A**(1./3.)
C MNH	Check whether nucleus is proton or neutron rich and then set charge and
C MNH	mass of isobar analog nucleus.
	IF ((IAT-IZT).GE.IZT) THEN
	  IZA=IZT-1
	  ZLO=IZA
	ELSE
	  IZA=IZT+1
	  ZLO=IZT
	ENDIF
	NT=IAT-IZT
	NA=IAT-IZA
	NNT=NT+1-NPDRIP(IZT)
	NNA=NA+1-NPDRIP(IZA)
	IF(EB(NNT,IZT).EQ.0..OR.EB(NNA,IZA).EQ.0.)THEN
C MNH	If mass of one of the nuclei cannot be found calculate EIAS from an
C MNH	approximate formula (p.364) but with modifications (see above note)
	  IF(MOD(IAT,2).NE.0)THEN
	    TEMP=0.
	  ELSE
	    IF(MOD(IZT,2).EQ.0)THEN
C	      TEMP=+2.*EPSILON/SQRT(A)
	      TEMP=+4.*EPSILON/SQRT(A)
	    ELSE
C	      TEMP=-2.*EPSILON/SQRT(A)
	      TEMP=0.
	    ENDIF
	  ENDIF
	  AA=4.*(BETA-ETA/A13)
	  EIAS=AA*(ABS(NT-IZT)+1)/A+TEMP
	ELSE
C MNH	Otherwise use formula D (p.341) to calculate Coulomb displacement
C MNH	energy EC and then IAS energy
	  CORR=(NT-NA)*8.07169+(IZT-IZA)*7.28922
	  ZAV=ZLO+.5
	  Z13=ZAV**(1./3.)
	  A23=A13*A13
	  A43=A23*A23
	  EC=ZAV*(1539/A13-3230/A+3600/A43)
	  EC=EC+Z13*(530/A23-783/A13)+60
	  EC=EC-17*ZAV/A23*(ZAV-A/(3+.022484*A23))
	  IF(IZT.LT.IZA) THEN
	    EIAS=EB(NNT,IZT)-EB(NNA,IZA)-CORR+(MN_MH-EC)/1000.
	  ELSE
	    EIAS=EB(NNT,IZT)-EB(NNA,IZA)-CORR-(MN_MH-EC)/1000.
	  ENDIF
	ENDIF
	RETURN
	END


	SUBROUTINE MASS(IZA,IAT,EBB)

C MNH	Program to calculate approximate nuclear binding energies from
C MNH	approximate energies of T> states (see J.Janecke in "Isospin In Nuclear
C MNH	Physics" ,pp 297 and following pages). Coulomb energies are obtained
C MNH	from formula D (page 341). The approximate formula is used to calculate
C MNH	the energy of the IAS is from (p.364) using T**2 instead of
C MNH	T*(T+1) and 4*delta if A and Z are even and zero if A or Z are odd.

C	size of arrays in EKIN dimension
	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )

	COMMON/C6/ TSUM(KIN_PAR,32,31,4),RHO(L_EX_DIM,L_DIM,2,2,5),
     1    V(L_EX_DIM,L_DIM,2,2,5)
	DIMENSION EB(128,144)
c	EQUIVALENCE (EB(1),TSUM(1))
	EQUIVALENCE (EB(1,1),TSUM(1,1,1,1))
	DATA BETA,ETA,EPSILON /30.586,53.767,10.609/

	A=IAT
	A13=IAT**(1./3.)
	IZH=IZA
	IZL=IZA
C Check whether nucleus is near proton or neutron stability lines.
C Try five times and no more, since inaccuracies will then be very large.
	DO I=1,5
	  IZH=IZH+1
	  IZL=IZL-1
	  NH =IAT-IZH
	  NL =IAT-IZL
	  NNH=NH+1-NPDRIP(IZH)
	  NNL=NL+1-NPDRIP(IZL)
	  IF(EB(NNH,IZH).GE.0.1) THEN
	    INC = -1
	    IZT=IZH
	    GO TO 1
	  ELSEIF(EB(NNL,IZL).GE.0.1) THEN
	    INC = +1
	    IZT=IZL
	    GO TO 1
	  ENDIF
	ENDDO
	STOP 'Could not find for mass extrapolation purposes a nucleus
     1  of the same mass within 5 Charge units'

1	DO J=1,I
	  IZ=IZT+INC

C MNH	Use formula D (p.341) to calculate Coulomb displacement
C MNH	energy EC and then binding energy.
	  ZLO=MIN(IZT,IZ)
	  ZAV=ZLO+.5
	  Z13=ZAV**(1./3.)
	  A23=A13*A13
	  A43=A23*A23
	  EC=ZAV*(1539/A13-3230/A+3600/A43)
	  EC=EC+Z13*(530/A23-783/A13)+60
	  EC=EC-17*ZAV/A23*(ZAV-A/(3+.022484*A23))

	  NT=IAT-IZT
	  N =IAT-IZ
	  NNT=NT+1-NPDRIP(IZT)
	  NN =N +1-NPDRIP(IZ )

C MNH	Check whether nucleus has proton excess or neutron excess and then 
C MNH	set charge of isobar analog nucleus.
	  IF(NT.GT.IZT) THEN
	    IZ_TEMP=MAX(IZ,IZT)
	  ELSE
	    IZ_TEMP=MIN(IZ,IZT)
	  ENDIF

	  IF(MOD(IAT,2).NE.0)THEN
	    TEMP=0.
	  ELSE
	    IF(MOD(IZ_TEMP,2).EQ.0)THEN
C	      TEMP=+2.*EPSILON/SQRT(A)
	      TEMP=+4.*EPSILON/SQRT(A)
	    ELSE
C	      TEMP=-2.*EPSILON/SQRT(A)
	      TEMP=0.
	    ENDIF
	  ENDIF
	  AA=4.*(BETA-ETA/A13)
	  EIAS=AA*(ABS(IAT-2*IZ_TEMP)+1)/A+TEMP

	  IF(NT.GT.IZT.AND.IZT.GT.IZ) THEN
	    EBB=EB(NNT,IZT)+EC/1000.-EIAS
	  ELSEIF(NT.GT.IZT.AND.IZT.LT.IZ) THEN
	    EBB=EB(NNT,IZT)-EC/1000.+EIAS
	  ELSEIF(NT.LT.IZT.AND.IZT.GT.IZ) THEN
	    EBB=EB(NNT,IZT)+EC/1000.+EIAS
	  ELSEIF(NT.LT.IZT.AND.IZT.LT.IZ) THEN
	    EBB=EB(NNT,IZT)-EC/1000.-EIAS
	  ENDIF
	  EB(NN ,IZ )=EBB
	  IZT=IZT+INC
	ENDDO
	RETURN
	END

	SUBROUTINE MYERS (IZ,IA,EBLD0,EBGS,EVODD1,EVODD2)
C Calculates the g.s. binding energy of a nucleus using the droplet model of
C Myers (Plenum Press 1977)
C EBGS	= g.s. binding energy in MeV
C EBLD0	= binding energy of a spherical liquid drop without shell correction,
C	  but with pairing and Wigner term
C EVODD	= Even-odd term (sign opposite to Myers)
C S	= Shell effect at equilibrium deformation ( " )
C SEFF	= Shell correction (EBGS - EBLD0) (sign opposite to Myers)
C MNH	EVODD1	= Correction term for g.s.
C MNH	EVODD2	= Correction term for I.A.S.

	DIMENSION MSHELL(9)

C Constants
	PARAMETER ( A1=15.96, A2=20.69, CJ=36.8, R0=1.18, A3=0 )
	PARAMETER ( Q=17, CK=240, CL=100, CM=0 )
C Constants for shell correction
	PARAMETER ( CC=5.8, CSC=0.325, CAR=0.444 )
C Derived parameters
	PARAMETER ( C1=0.73219, C2=1.6302E-4, C3=1.28846)
	PARAMETER ( C4=0.55911, C5=4.9274E-4 )

	DATA MSHELL /2,8,14,28,50,82,126,184,258/

	Z = IZ
	A = IA
	N = IA - IZ
	IF (IZ.LE.2 .OR. N.LE.2) GO TO 90
	CI = (A-2*Z)/A
	A13 = A**(1./3.)
	A23 = A**(2./3.)
	A43 = A**(4./3.)
C Binding energy of the atomic electrons
	ECLOUD = 14.33E-6*Z**2.39
C Wigner term
	EWIGN= -30*ABS(CI)
	IF (N.EQ.IZ .AND. MOD(N,2).NE.0) EWIGN = EWIGN - 30/A
C Even-odd term
	DELTA = 12/SQRT(A)
	SDELTA= 20/A
	EVODD = -0.5 * SDELTA
	IF (MOD(N,2).EQ.0 .AND. MOD(IZ,2).EQ.0) THEN
	  EVODD1 = EVODD + DELTA
	  EVODD2 = EVODD-DELTA+SDELTA
	ELSEIF (MOD(N,2).NE.0 .AND. MOD(IZ,2).NE.0) THEN
	  EVODD2 = EVODD + DELTA
	  EVODD1 = EVODD-DELTA+SDELTA
	ELSE
	  EVODD1 = EVODD
	  EVODD2 = EVODD
	ENDIF

C Shell function SNZ = S(N,Z)
C Next proton shell
	DO 10 I=2,9
	IF (IZ.LE.MSHELL(I)) GO TO 12
10	CONTINUE
12	MZI = MSHELL(I)
	MZI1= MSHELL(I-1)
C Next neutron shell
	DO 14 I=2,9
	IF (N .LE.MSHELL(I)) GO TO 16
14	CONTINUE
16	MNI = MSHELL(I)
	MNI1= MSHELL(I-1)

	QZ = 0.6 * (MZI**(5./3.)-MZI1**(5./3.))/(MZI-MZI1)
	QN = 0.6 * (MNI**(5./3.)-MNI1**(5./3.))/(MNI-MNI1)
	FZ = QZ*(IZ-MZI1) - 0.6*(IZ**(5./3.)-MZI1**(5./3.))
	FN = QN*(N -MNI1) - 0.6*(N **(5./3.)-MNI1**(5./3.))
	SNZ= -CC * (1.5874*(FN+FZ)/A23 - CSC*A13)

	EBX = 0
	ALPHA2 = 0
	IC = 1

C Shape dependences
C ALPHA2 is the deformation parameter defined in Ann.Phys.84 Table 2
20	AL2 = ALPHA2**2
	AL3 = ALPHA2**3
	AL4 = ALPHA2**4
	BS = 1 + 0.4*AL2 - 0.0381*AL3	- 0.3771*AL4
	BC = 1 - 0.2*AL2 - 0.0381*AL3	- 0.2082*AL4
	BK = 1 + 0.4*AL2 + 0.1524*AL3	- 0.4686*AL4
	BR = 1 + 0.4*AL2 + 0.1524*AL3	- 2.5264*AL4
	BV = 1 - 0.2*AL2 - 0.0190*AL3	- 0.2065*AL4
	BW = 1				- 0.9918*AL4
	THETA = ALPHA2*0.4472*A13/CAR
	BSHL = (1-2*THETA**2)*EXP(-THETA**2)

	S = SNZ * BSHL

	DBAR = (CI+0.0080756*BV*Z/A23)/(1+4.87059*BS/A13)
	EBAR = (-2*A2*BS/A13+CL*DBAR**2+C1*BC*Z*Z/A43)/CK

	EVOL = (A1 - CJ*DBAR**2 + 0.5*CK*EBAR**2) * A
	ESURF= (-A2 - 2.25*CJ*CJ*DBAR*DBAR/Q)*BS * A23
	ECOUL= -C1*BC*Z*Z/A13 + C2*BR*Z*Z*A13 + C3*Z*Z/A
     1	+ C4*Z/(2**(1./3.)) + C5*BW*Z*Z
C Terms with A3 and CM=0 left out

	EBLD = EVOL + ESURF + ECOUL + ECLOUD
	EBGS = EBLD + EVODD1 + EWIGN + S
	IF (ALPHA2.GT.0.005) GO TO 30
	EBLQ = EBLD
	EBLD0 = EBGS - S
	S0 = S

30	IF (SNZ.GT.0 .OR. IC.EQ.-1) GO TO 90
	IF (EBGS.LE.EBX) IC = -1
	ALPHA2 = ALPHA2 + IC*0.01
	EBX = EBGS
	IF (ALPHA2.LE.0.40) GO TO 20

90	SEFF = EBGS - EBLD0

	END


	SUBROUTINE STANLV (IZ,IA)
C Calculates a standard spectrum of low-lying levels
	COMMON/C3/ IPSLVX,IZLV(100),IALV(100),EXLVX(100),LVMAX(100)
	COMMON/C3/ EXLV(50,100),JLV(50,100),LVPARI(50,100)
	DIMENSION J0(41),SHLLZ(7),SHLLN(7)
	DATA J0 /1,1,3,1,5,3,5,1,3,3,7,7,5,7,3,3,3,3,5,1,9,3,5,7,9,
     1	5,5,5,5,5,7,5,3,5,5,5,5,5,5,5,5/
	DATA SHLLZ /8,20,28,50,82,114,184/
	DATA SHLLN /8,20,28,50,82,126,184/

	PARAMETER (REAL_MAX = 88.)

	E2 = MIN( 1.8, 0.1 * (173./IA)**2 )
	N = IA - IZ
	ISHLLZ = 1
	DZ = 100
	DO 10 I=1,7
	DZZ = ABS(IZ-SHLLZ(I))
	IF (DZZ.GE.DZ) GO TO 10
	DZ = DZZ
	ISHLLZ = I
10	CONTINUE
	ISHLLN = 1
	DN = 100
	DO 12 I=1,7
	DNN = ABS(N-SHLLN(I))
	IF (DNN.GE.DN) GO TO 12
	DN = DNN
	ISHLLN = I
12	CONTINUE

	SBZ = 1.3
	SBN = 1.3
	DBZ = 0.4*SQRT(SHLLZ(ISHLLZ))
	DBN = 0.4*SQRT(SHLLN(ISHLLN))
	X = DZ/DBZ
	EZ = 0
	IF (X.LT.REAL_MAX) EZ = EXP(-X)
	X = DN/DBN
	EN = 0
	IF (X.LT.REAL_MAX) EN = EXP(-X)
	SBZ = SBZ * EZ
	SBN = SBN * EN
	E2 = E2 + SBZ + SBN

	IF (E2.GE.0.5) THEN
	  E4 = MIN( 3.5, 2.3*E2 )
	  E6 = MIN( 4.8, 4.5*E2 )
	  E8 = MIN( 6.0, 7.5*E2 )
	ELSE
	  E4 = 3 *E2
	  E6 = 6 *E2
	  E8 = 10*E2
	ENDIF

	IUU = 0
	J = 0
	IF (MOD(IZ,2).EQ.0 .AND. MOD(N,2).EQ.0) GO TO 30
	N2 = (IZ+1)/2
	IF (N2.GT.41) N2 = 11
	J = J0(N2)/2
	IF (MOD(N,2).EQ.0) GO TO 30
	N2 = (N+1)/2
	IF (N2.GT.41) N2 = 11
	J = J0(N2)/2
	IF (MOD(IZ,2).EQ.0) GO TO 30
	IUU = 2
	N2 = (N+1)/2
	IF (N2.GT.41) N2 = 11
	IZ2 = (IZ+1)/2
	IF (IZ2.GT.41) IZ2 = 11
	J = (J0(N2)+J0(IZ2))/2
30	CONTINUE

	IZLV(1) = IZ
	IALV(1) = IA
	EXLVX(1) = E4 - 0.05
	EXLV(1,1) = 0
	EXLV(2,1) = E2
	EXLV(3,1) = E4
	EXLV(4,1) = E6
	EXLV(5,1) = E8
	JLV (1,1) = J
	JLV (2,1) = J + 2
	JLV (3,1) = J + 4
	JLV (4,1) = J + 6
	JLV (5,1) = J + 8
C FZ	Mark parities as unknown
	LVPARI(1,1) = -1
	LVPARI(2,1) = -1
	LVPARI(3,1) = -1
	LVPARI(4,1) = -1
	LVPARI(5,1) = -1
	LVMAX(1) = 5
	IF (IUU.LT.2) RETURN
	EXLVX(1) = E2 - 0.05
	LVMAX(1) = 2

	END


	SUBROUTINE GETRHO (IPS)
C Reads level density matrices for parent and daughter nuclei from table

C	size of arrays in EKIN dimension
	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),
     1   EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),
     1   ESTEP
	COMMON IEXXL(NUCL),ESEP(4,NUCL),JMIN(NUCL),JMAX(NUCL),
     1   JJMAX(NUCL)

	COMMON/C6/ TSUM(KIN_PAR,32,31,4),RHO(L_EX_DIM,L_DIM,2,2,5)
	COMMON/C6/ RHOG(L_EX_DIM,L_DIM,2,2),
     1             DMMY(L_EX_DIM,L_DIM,2,2,4)
	COMMON/ISO/ ISPIN,INDPAR,INDIS,AMIX,BMIX,MINFIT

	IZFM = IZFMAX + 1
	DO 40 IZF=1,IZFM
	IF (IZF.EQ.IZFM) THEN
	  IPSZF = IPS
	ELSE
	  IPSZF = IPSZO(IZF,IPS)
	ENDIF
	IF (IPSZF.EQ.0) GO TO 40
	IEXXX = IEXXMX(IPSZF)
	IF (IEXXX.LE.0) GO TO 40
	JJX = JJMAX(IPSZF)
	READ (12,REC=8*IPSZF-7) 
     1   ((RHOG(J,I,1,1),J=1,L_EX_DIM),I=1,L_DIM/2)
	READ (12,REC=8*IPSZF-6) 
     1    ((RHOG(J,I,1,1),J=1,L_EX_DIM),I=L_DIM/2+1,L_DIM)
	READ (12,REC=8*IPSZF-5) 
     1   ((RHOG(J,I,2,1),J=1,L_EX_DIM),I=1,L_DIM/2)
	READ (12,REC=8*IPSZF-4) 
     1    ((RHOG(J,I,2,1),J=1,L_EX_DIM),I=L_DIM/2+1,L_DIM)
	READ (12,REC=8*IPSZF-3) 
     1   ((RHOG(J,I,1,2),J=1,L_EX_DIM),I=1,L_DIM/2)
	READ (12,REC=8*IPSZF-2)
     1    ((RHOG(J,I,1,2),J=1,L_EX_DIM),I=L_DIM/2+1,L_DIM)
	READ (12,REC=8*IPSZF-1) 
     1   ((RHOG(J,I,2,2),J=1,L_EX_DIM),I=1,L_DIM/2)
	READ (12,REC=8*IPSZF  )
     1    ((RHOG(J,I,2,2),J=1,L_EX_DIM),I=L_DIM/2+1,L_DIM)

	IPSR = NINT(RHOG(2,L_DIM,2,2))
	RHOG(2,L_DIM,2,2) = 0
	IF (IPSR.NE.IPSZF) WRITE(1, 37) IPSZF,IPSR
	DO 38 IS=1,ISPIN
	DO 38 JPAR=1,2
	DO 38 JJ=1,JJX
	DO 38 IEXX=1,IEXXX
38	RHO (IEXX,JJ,JPAR,IS,IZF) = RHOG(IEXX,JJ,JPAR,IS)
40	CONTINUE

37	FORMAT (' ***ERROR: rho cannot be found,  IPSZF,IPSR =',2I4//)
	END


	SUBROUTINE TSUMME (IPS,EMINT,IK)
C Transmission coefficients (CASCADE I)
C IK.NE.0 for reading EMINT only
C FZ	Completely revised version to include parity. F .Zwarts, KVI, Groningen
C FZ	Tl tables from direct access file

C	size of arrays in EKIN dimension
	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),
     1   EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),
     1   ESTEP
	COMMON IEXXL(NUCL),ESEP(4,NUCL),JMIN(NUCL),JMAX(NUCL),
     1   JJMAX(NUCL)

	COMMON/C6/TSUM(KIN_PAR,32,31,4),RHO(L_EX_DIM,L_DIM,2,2,5)
	COMMON/C6/T(KIN_PAR,32,4),DMY(L_EX_DIM*L_DIM*20-128*KIN_PAR)
	DIMENSION T1(KIN_PAR*32),T2(KIN_PAR*32),T3(KIN_PAR*32),
     1   T4(KIN_PAR*32)
c	EQUIVALENCE (T1(1),T(0*KIN_PAR*32+1))
c	EQUIVALENCE (T2(1),T(1*KIN_PAR*32+1))
c	EQUIVALENCE (T3(1),T(2*KIN_PAR*32+1))
c	EQUIVALENCE (T4(1),T(3*KIN_PAR*32+1))
	EQUIVALENCE (T1(1),T(1,1,1))
	EQUIVALENCE (T2(1),T(1,1,2))
	EQUIVALENCE (T3(1),T(1,1,3))
	EQUIVALENCE (T4(1),T(1,1,4))
	DIMENSION EMINT(4)

c open statement is moved from main 
	OPEN(UNIT=11,STATUS='OLD',FILE='TLCALC.DAT')
cc     1	,FORM='UNFORMATTED',RECL=KIN_PAR*128)
c    1	,FORM='UNFORMATTED',RECL=KIN_PAR*32,ACCESS='DIRECT')
c    1	,READONLY,SHARED		! Not ANSI FORTRAN
c    1	)
C In order to start with existing record:
	IRECOR = 1
        irecor0=0

C Read T from disc (IZF=1,IZFT)
	IZZ = IZ(IPS)
	IF (IZZ.LT.6) IZZ = 6
	IVS = 0

7	IVS = IVS + 1
C FZ	Error if more than 5 tries; (Why not 2 ??)
	IF (IVS.GE.5) THEN
	  WRITE(1, 8) IZZ,IZT
8	  FORMAT (' ***ERROR, Transmission coeff cannot be found,',
     1 ' IZZ,IZT:', 2I3)
	  STOP 'ERROR: Transmission coeff cannot be found. See 
     1 output for details'
	ELSE
C Read table for proton and neutron
        do j=1,irecor-irecor0
	  READ (11,*,ERR=7) T1
c	  READ (11,REC=IRECOR,ERR=7) T1
	  IZT = NINT( T(1,13,1) )
	  IZFT = NINT( T(1,15,1) )
        enddo
C See if this was the right record
	  IF (IZT.NE.IZZ) THEN
C If wrong then calculate record number and retry:
            irecor0=irecor
	    IRECOR = IRECOR + (IZFT-1)*(IZZ-IZT)
	    GO TO 7
	  ELSE
C Record found; read tables for alpha and 4th particle
	    READ (11,*) T3
c	    READ (11,REC=IRECOR+1) T3
	    IF (IZFT.EQ.4) READ (11,*) T4
c	    IF (IZFT.EQ.4) READ (11,REC=IRECOR+2) T4
	  ENDIF
	ENDIF
c
        close (11)
C FZ	If wrong step size further calculation is useless
	IF( ESTEP.NE.T(1,31,3) .AND.
     1	( ESTEP.NE.1 .OR. T(1,31,3).NE.0 ) ) THEN
	  WRITE(1, 9) ESTEP, T(1,31,3) 
9	  FORMAT (' ***ERROR, Wrong energy step size for transm.',
     1   ' coeff. ESTEP_CASCADE, ESTEP_TL:', 2F7.3)
	  STOP 'ERROR: Wrong energy step size for transm. coeff. See
     1 output for more details.'
	ENDIF
	T(1,31,3) = 0
	T(1,32,3) = 0

C In order to save space, proton and neutron Tl are stored in one table.
C Create separate tables.
	DO 40 I=1,KIN_PAR*16
40	T2(I) = T1(I+KIN_PAR*16)

C Transferred parameters
	DO 50 IZF=1,IZFT
	EMINT(IZF) = T(1,16,IZF)
	IZET = NINT( T(2,15,IZF) )
	IAET = NINT( T(2,16,IZF) )
C Check that same particles were used during calculation of Tl
	IF((IZET.NE.IZE(IZF).OR.IAET.NE.IAE(IZF)).AND.IZF.LE.IZFMAX)
     1 WRITE(1,42)IZZ,IZE(IZF),IAE(IZF),IZET,IAET
42	FORMAT ('***ERROR, wrong transmission coefficients for IZ=',
     1 I3,' in table, IZE,IAE=',2I2,2X,2I2/)
C Clear special elements of the table
	DO 44 L1=13,16
44	T(1,L1,IZF) = 0
	T(2,15,IZF) = 0
50	T(2,16,IZF) = 0

C Internal calculation of Tl for 4th decay if Tl not available
	IF (IZFMAX.EQ.4 .AND. IZFT.EQ.3) CALL TLCALC(IPS,EMINT(4))

C *************************************************************************

	IF (IK.NE.0) RETURN

C FZ	Calculation of TSUM(IEKIN,I1,I2,IZF)
C FZ	Calculated is a sum of Tl for JT1..JT2 which is stored in the lower
C FZ	half diagonal of the I1,I2 matrix for even parity and in the upper half
C FZ	diagonal for odd parity (by shifting I2 1 position the diagonal terms
C FZ	are separated). Thus, for even parity I1=JT1, I2=JT2
C FZ			      for odd  parity I1=JT2+1, I2=JT1
C FZ	The summation is done in two steps. First sum as if it was a spin 0
C FZ	particle, then correct for spin.

C For all decay particles
	DO 100 IZF=1,IZFMAX
C See if nucleus decays with this particle
	IPSZF = IPSZO(IZF,IPS)
	IF (IPSZF.EQ.0) GO TO 100
C See if we are above threshold
	IF (IEXXMX(IPSZF).LE.0) GO TO 100
	IF (IZF.GE.3) THEN
	  JTMAX = 31
	ELSE
C Proton and neutron maximum J value
	  JTMAX = 16
	ENDIF

C FZ	Summation for spin 0 particle (also pre-summation for other spins)
C FZ	Because of spin 0 J=L
	DO 55 JT1=1,JTMAX
C FZ	Calculate parity;	1 : odd;	0 : even
	IPAR = MOD(JT1-1,2)
	DO 55 IEKIN=1,KIN_PAR
C FZ	Set unnatural parities to 0
	IF(IPAR.EQ.0) TSUM(IEKIN,JT1+1,JT1,IZF) = 0
	IF(IPAR.EQ.1) TSUM(IEKIN,JT1,JT1,IZF) = 0
C FZ	Step size 2 in order to fix parity in the summation
	SUM = 0
	DO 55 JT2=JT1,JTMAX,2
	SUM = SUM + T(IEKIN,JT2,IZF)
	IF(IPAR.EQ.0) THEN
C FZ	Even parity
	  TSUM(IEKIN,JT1,JT2,IZF) = SUM
C FZ	Since JT2-JT1 is even and step size of both JT1 and JT2 = 2 because of
C FZ	parity : Sum JT1-1..JT2 = Sum JT1..JT2
	  IF(JT1.GT.1) TSUM(IEKIN,JT1-1,JT2,IZF) = SUM
C FZ	Sum JT1..JT2+1 = Sum JT1..JT2
	  IF(JT2.LT.JTMAX) TSUM(IEKIN,JT1,JT2+1,IZF) = SUM
C FZ	Sum JT1-1..JT2+1 = Sum JT1..JT2
	  IF( JT1.GT.1 .AND. JT2.LT.JTMAX )
     1 TSUM(IEKIN,JT1-1,JT2+1,IZF) = SUM
	ELSE
C FZ	Same for odd parity
	  TSUM(IEKIN,JT2+1,JT1,IZF) = SUM
	  IF(JT1.GT.1) TSUM(IEKIN,JT2+1,JT1-1,IZF) = SUM
	  IF(JT2.LT.JTMAX) TSUM(IEKIN,JT2+1+1,JT1,IZF) = SUM
	  IF( JT1.GT.1 .AND. JT2.LT.JTMAX )
     1 TSUM(IEKIN,JT2+1+1,JT1-1,IZF) = SUM
	ENDIF
55	CONTINUE

C FZ	Get twice spin of decay particle and its parity
	ISP = JE(IZF)
	IPAR = IPE(IZF)
C FZ	If 0+ then summation is done
	IF( ISP.EQ.0 .AND. IPAR.EQ.0 ) GO TO 100

C FZ	Sum JT1..JT2 (spin S)	= Sum JT1-S..JT2+S (spin 0)
C FZ	If particle's parity positive use same parities at both sides of = sign
C FZ	If negative use different parities at both sides
C FZ	If unknown parity take average
	DO 90 JT1=1,JTMAX
	DO 90 JT2=JT1,JTMAX
	DO 90 IEKIN=1,KIN_PAR
	TSE = 0
	TSO = 0
C FZ	Sum over all possible orientations of S with respect to J
	DO 80 IDIFF = -ISP/2,(ISP+1)/2
	LT1 = MAX( 1, MIN( JTMAX, JT1+IDIFF ) )
	LT2 = MAX( 1, MIN( JTMAX, JT2+IDIFF ) )
C FZ	Be carefull not to use sums that are modified already
	LMIN = MAX(JT1,LT1)
	LMAX = MAX(JT2,LT2)
C FZ	Even parity
	TSE = TSE + TSUM(IEKIN,LMIN,LMAX,IZF)
C FZ	Odd parity
	TSO = TSO + TSUM(IEKIN,LMAX+1,LMIN,IZF)
C FZ	But correct for being carefull
C FZ	Add forgotten terms
	DO 60 L = LT1,LMIN-1
	IF(MOD(L+1,2).EQ.0) THEN
C FZ	Positive parity
	  TSE = TSE + T(IEKIN,L,IZF)
	ELSE
C FZ	Negative parity
	  TSO = TSO + T(IEKIN,L,IZF)
	ENDIF
60	CONTINUE
C FZ	Subtract extra terms
	DO 70 L = LT2,LMAX-1
	IF(MOD(L+1,2).EQ.0) THEN
	  TSE = TSE - T(IEKIN,L,IZF)
	ELSE
	  TSO = TSO - T(IEKIN,L,IZF)
	ENDIF
70	CONTINUE
80	CONTINUE
	IF(IPAR.EQ.0) THEN
	  TSUM(IEKIN,JT1,JT2,IZF) = TSE
	  TSUM(IEKIN,JT2+1,JT1,IZF) = TSO
	ELSEIF(IPAR.EQ.1) THEN
	  TSUM(IEKIN,JT1,JT2,IZF) = TSO
	  TSUM(IEKIN,JT2+1,JT1,IZF) = TSE
	ELSE
	  TSUM(IEKIN,JT1,JT2,IZF) = (TSE+TSO)/2
	  TSUM(IEKIN,JT2+1,JT1,IZF) = (TSE+TSO)/2
	ENDIF
90	CONTINUE

100	CONTINUE

	END


	SUBROUTINE TLCALC (IPS,EMINT4)
C Ist noch zu erfinden *******************************************
C ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

C	size of arrays in EKIN dimension
	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )

	COMMON/C6/TSUM(KIN_PAR,32,31,4),RHO(L_EX_DIM,L_DIM,2,2,5)
	COMMON/C6/T(KIN_PAR,32,4),
     1            DMY(L_EX_DIM*L_DIM*20-128*KIN_PAR)
	STOP 'ERROR: Internal calc. of Tl for decay 4 not available'

	END


	FUNCTION YRASTL( EX,IA,DELTA,R0,DEF,DEFS,LCR)
C Yrast angular momentum, calculated in agreement with LEVELD
C minimum = 8, maximum = LCR
	EXD = EX - DELTA
	A = MAX( 4, IA )
	CR = 34.540 * (1.2249/R0)**2
	CR = CR/A**(5./3.)
	DO 10 L=8,LCR
	CL2 = L * L
	EROT = CR * L * (L+1) / (1+(DEF+DEFS*CL2)*CL2)
	IF (EROT.GT.EXD) GO TO 20
10	CONTINUE
	L = LCR + 1
20	YRASTL = L - 1

	END


	FUNCTION NPDRIP(IZ)
C Analytical approximation to the proton drip line (EB=-3 MeV) taken from Myers
C and Swiatecki UCRL
C Definition of NPDRIP see EBTABLE
	PARAMETER ( ALPHA = -5, BETA = 0.7, GAMMA = 4.95E-3 )

	NPDRIP = MAX( 0, NINT(ALPHA + (BETA+GAMMA*IZ)*IZ) )

	END


	FUNCTION CLFUS (IZP,IAP,IZT,IAT,ELAB)
C Calculates approximate value for maximum angular momentum for fusion
	PARAMETER ( R0=1.18, D1=0.8 )
	PARAMETER ( A0 = -4, A1 = 0.95, A2 = -1E-3, A3 = -11.9E-6 )

	D2 = 2.9 - 0.005*(IAP+IAT)
	CL = 0
	ZP = IZP
	AP = IAP
	ZT = IZT
	AT = IAT
	CMY = 931*AP*AT/(AT+AP)
	AC = SQRT(2*CMY)/197
	R = R0*(AT**(1./3.)+AP**(1./3.))
	ECM = ELAB * AT/(AP+AT)
	ECB = 1.44 * ZP * ZT/(R+D2)
	IF (ECM.LE.ECB) GO TO 100
	CL = AC * SQRT(ECM-ECB) * (R+D1)

C Maximum value, Cohen,Plasil,Swiatecki BF = 8 MeV for valley of stability
	A = AP + AT
	CLCPS = A0 + (A1 + (A2 + A3*A)*A)*A
	IF (CLCPS.LT.0) CLCPS = 0
	IF (CL.GT.CLCPS) CL = CLCPS
100	CLFUS = CL

	END


	FUNCTION EBLDM (IZ,IA,KOPTEB,ALPHA2)
C Liquid-drop binding energy (MeV)
C Options KOPTEB =
C	0 Myers-Swiatecki Lysekil
C	1 Myers droplet model
C	2 Same with Wigner term
C	3 Groote,Hilf,Takahashi
C	4 Same with Wigner term
C	5 Seeger
C	6 Same with Wigner term

	PARAMETER ( ALPHA=15.2568, BETA=33.166, GAMMA=17.073 )
	PARAMETER ( ZETA=3.28, PHI=-0.76 )
	PARAMETER ( CKAPPA=1.7826, A3=0, CL=100, CM=0, B0=0.7 )

	Z = IZ
	A = IA
	N = IA - IZ
	CI = (A-2*Z)/A
	A13 = A**(1./3.)
	A23 = A**(2./3.)
	A43 = A**(4./3.)

C Shape dependence (droplet model) (KOPTEB = 1,2,3,4)
C ALPHA2 is the deformation parameter defined in Ann.Phys.84 Table 2
	AL2 = ALPHA2**2
	AL3 = AL2*ALPHA2
	AL4 = AL2*AL2
	BS = 1 + 0.4*AL2 - 0.0381*AL3	- 0.3771*AL4
	BC = 1 - 0.2*AL2 - 0.0381*AL3	+ 0.2082*AL4
	BK = 1 + 0.4*AL2 + 0.1524*AL3	- 0.4686*AL4
	BR = 1 + 0.4*AL2 + 0.1524*AL3	- 2.5264*AL4
	BV = 1 - 0.2*AL2 - 0.0190*AL3	- 0.2065*AL4
	BW = 1				- 0.9918*AL4

	K = KOPTEB + 1
	GO TO (10,20,20,30,30,40,40), K
C Option	0  1  2  3  4  5  6

C Binding energy of a spherical liquid drop without even-odd correction
C Myers-Swiatecki Lysekil mass formula (Arkiv for Fysik 36)
10	A1 = 15.4941
	A2 = 17.9439
	C3 = 0.7053
	C4 = 1.1530
	E1 = (1-CKAPPA*CI**2)*(A1*A - A2*A23)
	E2 = C3*Z*Z/A13
	E3 = C4*Z*Z/A
	EBLDM = E1 - E2 + E3
	RETURN

C Binding energy (in MeV) of a spherical liquid drop without shell and even-odd
C correction, according to the droplet model of Myers and Swiateccki, Ann.Phys.
C 84(1974)186, with parameter values as given by Myers, Droplet Model Of Atomic
C Nuclei, Plenum Press, 1977
C If KOPTEB = 2, the Wigner term is included
C Deformation is also treated

C Constants
20	A1 = 15.96
	A2 = 20.69
	CJ = 36.8
	R0 = 1.18
	Q = 17
	CK = 240
C Derived parameters
	C1 = 0.73219
	C2 = 1.6302E-4
	C3 = 1.28846
	C4 = 0.55911
	C5 = 4.9274E-4
	DBAR = (CI+0.0080756*BV*Z/A23) / (1+4.87059*BS/A13)
	EBAR = (-2*A2*BS/A13+CL*DBAR**2+C1*BC*Z*Z/A43) / CK

	EVOL = (A1 - CJ*DBAR**2 + 0.5*CK*EBAR**2) * A
	ESURF= (-A2 - 2.25*CJ*CJ*DBAR*DBAR/Q)*BS * A23
	ECOUL= -C1*BC*Z*Z/A13 + C2*BR*Z*Z*A13 + C3*Z*Z/A
     1	+ C4*Z/(2**(1./3.)) + C5*BW*Z*Z
C Terms with A3 and CM=0 left out
	EWIGN = 0
	IF (KOPTEB.EQ.1) GO TO 22
	EWIGN= -30*ABS(CI)
	IF (N.EQ.IZ .AND. MOD(N,2).NE.0) EWIGN = EWIGN - 30/A
22	EBLDM = EVOL + ESURF + ECOUL + EWIGN + 14.33E-6*Z**2.39
	RETURN

C Droplet model
C Parameters from Groote,Hilf,Takahashi, At.Data & Nucl.Data Tables 17(1976)418
30	A1 = 16.19
	A2 = 20.85
	CJ = 38.2
	R0 = 1.167
	Q = 17.7
	CK = 300
C Derived parameters
	C1 = 0.7403
	C2 = 1.406E-4
	C3 = 0.6659
	C4 = 0.5653
	C5 = 4.838E-4
	B = B0/R0
	DBAR = (CI+0.1875*(C1/Q)*BV*Z/A23) / (1+2.25*(CJ/Q)*BS/A13)
	EBAR = (-2*A2*BS/A13+CL*DBAR**2+C1*BC*Z*Z/A43) / CK
	ETAZ = C3*Z*Z/A
	ETAZ = ETAZ * (2-3.63*B/A13)
	ETAZ = ETAZ/(0.332*A2*A23-C3*Z*Z/A*(2-7.26*B/A13))

	EVOL = (A1 - CJ*DBAR**2 + 0.5*CK*EBAR**2 - 0.5*CM*DBAR**4)*A
	ESURF= (-A2 - 2.25*CJ*CJ*DBAR*DBAR/Q)*BS*A23 - 0.166*A2*A23*
     1	ETAZ*ETAZ
	ECOUL= -C1*BC*Z*Z/A13 + C2*BR*Z*Z*A13 + C3*Z*Z/A*
     1	(1+ETAZ)**2*(1-1.21*B*(1+ETAZ)/A13)
     2	+ C4*Z**(4./3.)/A13 + C5*BW*Z*Z
	EWIGN = 0
	IF (KOPTEB.EQ.4) EWIGN =-30*ABS(CI)
	EBLDM = EVOL + ESURF + ECOUL + EWIGN + 14.33E-6*Z**2.39
	RETURN

C Liquid-drop model Seeger At.Data & Nucl.Data Tables 17(1976)428
40	R0 = 1.2254

	EVS = ALPHA*A - BETA*CI*CI*A/(1+ZETA/A13) - GAMMA*A23 +
     1   PHI*A13
	AD = .513
	RD= R0*A13
	R = RD * (1+(8.2247-28.44*(AD/RD)**2)*(AD/RD)**2)
	AD = AD/R
	EDIR = 0.864*Z*(Z-1)/R * (1+(18.0295-85.233*AD)*AD**3 )
	EEXC = EDIR/Z - 0.6598*Z**(4./3.)/R * (1-(1.3356 - (7.127
     1	-18.2104*AD)*AD)*AD)
	ESOR = (0.0369*A-0.0805*Z)*Z/R**3*(1+9.8696*AD**2)
	ECOUL =-EDIR - EEXC - ESOR
	EWIGN = 0
	IF (KOPTEB.EQ.6) EWIGN =-35*ABS(CI)
	EBLDM = EVS + ECOUL + 14.33E-6*Z**2.39 + EWIGN

	END


	SUBROUTINE CPS(Z,A,R0,DEF,DEFS)
C Calculates the deformabilities DEF, DEFS
C Definition: Moment of inertia = Sphere * (1 + DEF*J**2 + DEFS*J**4)
C Fit to the deformations given by Cohen,Plasil and Swiatecki
	C = (A-2*Z)/A
	C = C*C
	ESO = 17.9439 * (1-1.7826*C)*A**(2./3.)
	ECO = 0.7053*Z*Z/A**(1./3.)
	X = ECO/(2*ESO)
	CR = (34.540*1.2249*1.2249) / R0**2
	CR = CR/A**(5./3.)
	CY = CR/ESO
	IF (X.GT.0.75) GO TO 14
	Y1 = 0.2829 - (0.3475 + (0.0016 - 0.0501*X)*X)*X
	GO TO 15
14	CX = 1 - X
	Y1 = (1.4 - (4.566 - 6.7443*CX)*CX)*CX**2
15	CONTINUE
	IF (X.GT.0.5) GO TO 17
	Y2 = 0.78 - (1.2568 - 0.1335*X)*X
	GO TO 19
17	IF (X.GT.0.7) GO TO 18
	Y2 = 1.33 - (3.465 - 2.350*X)*X
	GO TO 19
18	Y2 = Y1
19	CONTINUE
	ZETA1 = MIN(0., -0.0380 + (0.0648 - 0.0253*X)*X )
	IF (X.GT.0.5) GO TO 22
	ZETA2 = -0.3100 + (0.5533 - 0.0665*X)*X
	GO TO 25
22	IF (X.GT.0.7) GO TO 23
	ZETA2 = -0.6175 + (1.785 - 1.3*X)*X
	GO TO 25
23	ZETA2 = ZETA1
25	CONTINUE
	CL12 = Y1/CY
	ETA1 = ZETA1/Y1
	B1 = ETA1/CL12
	B1 = B1/(1+ETA1)
	IF (X.GT.0.5) GO TO 28
	CL22 = Y2/CY
	ETA2 = ZETA2/Y2
	B2 = ETA2/CL22
	B2 = B2/(1+ETA2)
	DEFS = (B2-B1)/(CL12-CL22)
	DEF = -B1 - CL12*DEFS
	GO TO 30
28	DEFS = 0
	DEF = -B1
30	CONTINUE

	END


	SUBROUTINE FISSN (IPS,JJFMIN,JJFMAX,FFB)
C Calculates for the nucleus IPS the relative fission probability
C WF(IEXX,JJ,JPAR,IS); WF is only calculated in the spin range JJFMIN,JJFMAX
C Corresponding to BF = 15 TO 2 MeV

C	size of arrays in EKIN dimension
	PARAMETER	( KIN_PAR = 128 )
	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL	= 500 )

	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),
     1   EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),
     1   ESTEP
	COMMON IEXXL(NUCL),ESEP(4,NUCL),JMIN(NUCL),JMAX(NUCL),
     1   JJMAX(NUCL)

	COMMON/C2/ FT(NUCL),DA(NUCL),DELTA(NUCL),DELTA1(NUCL),
     1   CK(NUCL)
	COMMON/C2/ R0LDM,DEF,DEFS,DALDM,DAF,UTR,ULDM,UJTR,UJLDM,
     1   DLDM(NUCL)

	COMMON/C6/ TSUM(KIN_PAR,32,31,4),RHO(L_EX_DIM,L_DIM,2,2,5)
	COMMON/C6/ W(L_EX_DIM,L_DIM,2,2,4),WF(L_EX_DIM,L_DIM,2,2)
	COMMON/ISO/ ISPIN,INDPAR,INDIS,AMIX,BMIX,MINFIT

	DIMENSION RHOF(L_EX_DIM,L_DIM,2,2)
c	EQUIVALENCE (RHOF(1),WF(1))
	EQUIVALENCE (RHOF(1,1,1,1),WF(1,1,1,1))
	DIMENSION ESP(L_DIM), BF(L_DIM)

	IEXXX = IEXXMX(IPS)
	JJX = JJMAX(IPS)
	CJD = 0.5 * MOD(IA(IPS),2)
	DO 10 IS=1,ISPIN
	DO 10 JPAR=1,2
	DO 10 JJ=1,L_DIM
	DO 10 IEXX=1,L_EX_DIM
10	WF(IEXX,JJ,JPAR,IS) = 0

C Fission barrier BF(JJ)
	CALL FBARR(IPS,BF,FFB)

C J-Limits
	DO 20 JJ=1,JJX
	IF (BF(JJ).LE.15) GO TO 22
20	CONTINUE
	JJFMIN = JJX + 1
	JJFMAX = JJFMIN
	RETURN

22	JJFMIN = JJ
	DO 24 JJ=JJFMIN,JJX
	IF (BF(JJ).LE.1) GO TO 26
24	CONTINUE
	JJ = JJX
26	JJFMAX = JJ

C Saddle point energy ESP(JJ) (relative to the liquid-drop g.s.)
	THLDM = 0.0192964 * R0LDM**2 * IA(IPS)**(5./3.)
	DO 34 JJ=JJFMIN,JJFMAX
C MNH	This statement has been replaced by the following one to be
C MNH	consistent with FUNCTION YRASTL which uses integer angular momentum to
C MNH	calculate rotational energy.
C MNH	CJ = JMIN(IPS) + JJ + CJD
	CJ = JMIN(IPS) + JJ
	CJ2 = CJ * CJ
34	ESP(JJ) = BF(JJ) + CJ*(CJ+1)/(THLDM*(1+(DEF+DEFS*CJ2)*CJ2))

C Level density RHOF(IEXX,JJ,JPAR,IS) for the saddle point configuration
	XPOS=.5
	XNEG=.5
	IF(INDPAR.EQ.1.AND.(MOD(IA(IPS),2).EQ.0.AND.MOD(IZ(IPS),2)
     1.EQ.0)) THEN
	  A13=IA(IPS)**(1./3.)
C MNH	The values 20 and 7.5 are half the values in the main program, since
C MNH	at saddle the deformation is high
	  EHIGH=20./A13
	  ELOW=7.5/A13
	  DP=.5*ESTEP/(EHIGH-ELOW)
	  XPOS=1.
	  XNEG=0.
	ENDIF
	AF = IA(IPS)/DAF
	C = SQRT(AF)/(12*THLDM**1.5)
	C1 = 0.50/AF
	C2 = C1**2

	ETEMP=EXMIN(IPS)
	DO 50 IS=1,ISPIN
	IF(IS.EQ.ISPIN) ETEMP=ETEMP-EIAS(IPS)
	DO 50 IEXX=1,IEXXX
	EX = ETEMP + IEXX*ESTEP
	IF(EX.LT.0.) GO TO 50
	U = EX - DLDM(IPS)
	IF(INDPAR.EQ.1.AND.(MOD(IA(IPS),2).EQ.0.AND.MOD(IZ(IPS),2)
     1.EQ.0)) THEN
	  IF(EX.GT.EHIGH) THEN
	    XPOS=.5
	    XNEG=.5
	  ELSEIF(EX.GT.ELOW)THEN
	    XPOS=1.-DP*EX
	    XNEG=DP*EX
	  ENDIF
	ENDIF
	DO 42 JJ=JJFMIN,JJFMAX
	UJ = U - ESP(JJ)
	IF (UJ.LE.0) GO TO 50
	CJ = JMIN(IPS) + JJ + CJD
	CJ = 2*CJ + 1
	T = C1 + SQRT(UJ/AF+C2)
	TEMP = (C*CJ/(UJ+T)**2) * EXP(2*SQRT(AF*UJ))
	RHOF(IEXX,JJ,1,IS) = XPOS*TEMP
42	RHOF(IEXX,JJ,2,IS) = XNEG*TEMP
50	CONTINUE

C MNH	Renormalize T< and T> level densities
	DO 55 JPAR=1,2
	DO 55 IEXX=1,IEXXX
	DO 55 JJ=JJFMIN,JJFMAX
	TEMP=RHOF(IEXX,JJ,JPAR,1)
	IF(TEMP.EQ.0) GO TO 55
	TEMP=TEMP/(TEMP+RHOF(IEXX,JJ,JPAR,2))
	RHOF(IEXX,JJ,JPAR,1)=TEMP*RHOF(IEXX,JJ,JPAR,1)
	RHOF(IEXX,JJ,JPAR,2)=TEMP*RHOF(IEXX,JJ,JPAR,2)
55	CONTINUE

C Relative fission probability WF
	DO 60 IS=1,ISPIN
	DO 60 JPAR=1,2
	DO 60 JJ=JJFMIN,JJFMAX
	SUM = 0
	DO 58 IEXX=1,IEXXX
	SUM = SUM + RHOF(IEXX,JJ,JPAR,IS)
58	WF(IEXX,JJ,JPAR,IS) = SUM
60	CONTINUE

	END


	SUBROUTINE FBARR (IPS,BF,FFB)
C Calculates the fission barrier BF(JJ) of nucleus IPS according to the
C rotating-liquid-drop model of CPS Ann.Phys.82. The essential parts of this
C subroutine are taken from Blann/Plasil's ALICE (FISROT).
C FFB is a multiplier for the liquid-drop fission barrier

	PARAMETER	( L_EX_DIM = 128 )
	PARAMETER	( L_DIM	= 64 )
	PARAMETER	( NUCL = 500 )

	COMMON IZFMAX,IZE(4),IAE(4),JE(4),JDE(4),EBE(4),IPE(4)
	COMMON IPS1,IPSMAX,IPSZO(4,NUCL),IZ(NUCL),IA(NUCL),
     1   EIAS(NUCL)
	COMMON EXMIN(NUCL),EXMAX(NUCL),IEXXMX(NUCL),IEXXS(NUCL),
     1   ESTEP
	COMMON IEXXL(NUCL),ESEP(4,NUCL),JMIN(NUCL),JMAX(NUCL),
     1   JJMAX(NUCL)

	COMMON/C2/ FT(NUCL),DA(NUCL),DELTA(NUCL),DELTA1(NUCL),
     1   CK(NUCL)
	COMMON/C2/ R0LDM,DEF,DEFS,DALDM,DAF,UTR,ULDM,UJTR,UJLDM,
     1   DLDM(NUCL)

	DIMENSION BF(L_DIM)
	DIMENSION X1B(6,11),X2B(6,11),X3B(10,20),X1H(6,11),
     1   X2H(6,11),X3H(10,20)
	DATA X1B/.28,.243,.221,.208,.195,.18,.211,
     1 .186,.17,.1506,.136,.12,
     1 .152,.131,.1155,.096,.0795,.0625,.09725,
     1 .0795,.065,.0506,.0375,.0253,.05771,.0455,.03414,
     1 .0235,.014,.0065,.03325,.0235,.0153,.0081,
     1 .001,.0,.01625,.009,.0032,0,0,0,.0071,0,0,0,0,0,0,0,0,0,
     1 0,0,0,0,0,0,0,0,0,0,0,0,0,0/
	DATA X1H/0,0,0,0,0,0,-.0057,-.0058,-.006,-.0061,-.0062,
     1 -.0063,-.0193,-.0203,-.0211,-.022,-.023,-.0245,-.0402,-.0427,
     1 -.0456,-.0497,-.054,-.0616,-.0755,-.0812,-.0899,-.0988,-.109,
     1 -.12,-.1273,-.1356,-.147,-.1592,-.1745,-.1897,-.1755,-.1986,
     1 -.2128,-.2296,-.251,-.26,-.255,-.271,-.291,-.301,-.327,-.335,
     1 -.354,-.36,-.365,-.372,-.403,-.42,0,0,0,0,0,0,0,0,0,0,0,0/
	DATA X2B/.18,.1695,.1515,.133,.1155,.0949,.1495,.1363,.1165,
     1 .099,.0815,.0594,.12,.1032,.0864,.0678,.0469,.028,.09,.0725,
     1 .0556,.037,.019,.0057,.0625,.045,.0304,.016,.005,0,.0406,
     1 .0264,.0151,.0052,0,0,.0253,.0144,.0027,0,0,0,.0141,.006,
     1 0,0,0,0,.0065,.0008,0,0,0,0,.002,0,0,0,0,0,0,0,0,0,0,0/
	DATA X2H/0,0,0,0,0,0,-.0018,-.0019,-.00215,-.0024,-.0025,
     1 -.003,-.0063,-.00705,-.0076,-.0083,-.0091,-.0095,-.015,
     1 -.0158,-.0166,-.0192,-.0217,-.025,-.0245,-.0254,-.029,
     1 -.0351,-.0478,-.0613,-.0387,-.0438,-.0532,-.0622,-.0845,
     1 -.0962,-.0616,-.0717,-.0821,-.0972,-.1123,-.1274,-.0793,
     1 -.1014,-.1138,-.1262,-.1394,-.1526,-.12,-.134,-.1503,-.1666,
     1 -.1829,-.1992,-.1528,-.171,-.1907,-.2104,-.2301,-.2498,
     1 0,0,0,0,0,0/
	DATA X3H/0,0,0,0,0,0,0,0,0,0,-.00012,-.00014,-.00016,
     1 -.00018,-.0002,-.00024,-.00029,-.00036,-.00065,-.00089,
     1 -.00047,-.0005,-.00058,-.00065,-.00074,-.00085,-.00101,
     1 -.00124,-.00138,-.00178,-.001,-.00105,-.00124,-.00138,
     1 -.00156,-.00179,-.00275,-.00292,-.003,-.003,-.00176,-.0019,
     1 -.00211,-.00235,-.00263,-.00298,-.00449,-.0053,-.0053,-.0053,
     1 -.003,-.00308,-.00318,-.00352,-.00392,-.00417,-.0062,-.0062,
     1 -.0062,-.0062,-.00374,-.0041,-.00444,-.00488,-.00521,-.00545,
     1 -.0066,-.0066,-.0066,-.0066,-.0053,-.0055,-.00585,-.0064,
     1 -.00695,-.007,-.007,-.007,-.007,-.007,-.00632,-.007,-.00742,
     1 -.00792,-.00856,-.009,-.009,-.009,-.009,-.009,-.0079,-.0085,
     1 -.01022,-.0119,-.012,-.012,-.012,-.012,-.012,-.012,-.00944,
     1 -.0102,-.0142,-.0182,-.019,-.019,-.019,-.019,-.019,-.019,
     1 -.0112,-.0133,-.0182,-.0238,-.024,-.024,-.024,-.024,-.024,
     1 -.024,-.01303,-.0178,-.0226,-.0274,-.028,-.028,-.028,-.028,
     1 -.028,-.028,-.0165,-.0254,-.0343,-.0343,-.034,-.034,-.034,
     1 -.034,-.034,-.034,-.0203,-.033,-.04,-.04,-.04,-.04,-.04,-.04,
     1 -.04,-.04,-.025,-.0406,-.046,-.047,-.047,-.047,-.047,-.047,
     1 -.047,-.047,-.03036,-.0482,-.048,-.048,-.048,-.048,-.048,
     1 -.048,-.048,-.048,-.0363,-.0558,-.056,-.056,-.056,-.056,
     1 -.056,-.056,-.056,-.056,-.04234,-.0634,-.064,-.064,-.064,
     1 -.064,-.064,-.064,-.064,-.064,0,0,0,0,0,0,0,0,0,0/
	DATA X3B/.0949,.0755,.0564,.0382,.0223,.0121,.00588,.00242,
     1 .00069,.0001,.0873,.0684,.049,.0306,.0162,.0074,.00267,
     1 .00055,0,0,.0801,.061,.0418,.0235,.0108,.00373,.00071,
     1 0,0,0,.073,.054,.035,.0178,.0062,.00125,0,0,0,0,.0661,
     1 .047,.0284,.012,.0025,0,0,0,0,0,.0594,.0404,.022,.0065,
     1 0,0,0,0,0,0,.0528,.034,.0159,.002,0,0,0,0,0,0,.0465,
     1 .0277,.01,0,0,0,0,0,0,0,.0401,.0217,.0044,0,0,0,0,0,0,0,
     1 .0339,.0158,.00024,0,0,0,0,0,0,
     1 0,.028,.0106,0,0,0,0,0,0,0,0,.0219,.0064,0,0,0,0,0,0
     1 ,0,0,.0164,.0025,0,0,0,0,0,0,0,0,.0122,0,0,0,0,0,0
     1 ,0,0,0,.0085,0,0,0,0,0,0,0,0,0,.0057,0,0,0,0,0,0
     1 ,0,0,0,.0035,0,0,0,0,0,0,0,0,0,.0016,0,0,0,0,0,0
     1 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     1 ,0/

C Input parameters ESO,X,Y
	A = IA(IPS)
	Z = IZ(IPS)
	C = (A-2*Z)/A
	ESO = 17.9439 * (1-1.7826*C*C) * A**(2./3.)
	ECO = 0.7053*Z*Z/A**(1./3.)
	X = ECO/(2*ESO)
	CR = (34.540*1.2249*1.2249) / R0LDM**2
	CR = CR/A**(5./3.)
	CYC= CR/ESO

	DO 30 JJ=1,JJMAX(IPS)
	CJ = JMIN(IPS) + JJ + MOD(IA(IPS),2)*0.5
	Y = CYC * CJ * CJ

	IX=20*X+1
	DX=MOD( 20*X, 1. )
	IF(X.GT..25) GO TO 6

	BY=MAX( 1., MIN( 9., 10*Y+1 ) )
5	IY=BY
	DY=BY-IY
	H1=(X1H(IX+1,IY)-X1H(IX,IY))*DX+X1H(IX,IY)
	H2=(X1H(IX+1,IY+1)-X1H(IX,IY+1))*DX+X1H(IX,IY+1)
	HF=(H2-H1)*DY+H1
	B1=(X1B(IX+1,IY)-X1B(IX,IY))*DX+X1B(IX,IY)
	B2=(X1B(IX+1,IY+1 )-X1B(IX,IY+1))*DX+X1B(IX,IY+1)
	BFF =(B2-B1)*DY+B1
	GO TO 19

6	IF(X.GT..5) GO TO 12
	BY=MAX( 1., MIN( 11., 20*Y+1 ) )
	IX=IX-5
	IY=BY
	DY=BY-IY
	H1=(X2H(IX+1,IY)-X2H(IX,IY))*DX+X2H(IX,IY)
	H2=(X2H(IX+1,IY+1)-X2H(IX,IY+1))*DX+X2H(IX,IY+1)
	HF=(H2-H1)*DY+H1
	B1=(X2B(IX+1,IY)-X2B(IX,IY))*DX+X2B(IX,IY)
	B2=(X2B(IX+1,IY+1 )-X2B(IX,IY+1))*DX+X2B(IX,IY+1)
	BFF =(B2-B1)*DY+B1
	GO TO 19

12	X = MIN( .95, X )
	IX=20*X+1
	IX=IX-10
	BY= MAX ( 1., MIN( 19., 100*Y+1 ) )
	IY=BY
	DY=BY-IY
	H1=(X3H(IX+1,IY)-X3H(IX,IY))*DX+X3H(IX,IY)
	H2=(X3H(IX+1,IY+1)-X3H(IX,IY+1))*DX+X3H(IX,IY+1)
	HF=(H2-H1)*DY+H1
	B1=(X3B(IX+1,IY)-X3B(IX,IY))*DX+X3B(IX,IY)
	B2=(X3B(IX+1,IY+1 )-X3B(IX,IY+1))*DX+X3B(IX,IY+1)
	BFF =(B2-B1)*DY+B1

19	ERO = Y * ESO
	DELR=ERO+HF*ESO
30	BF(JJ) = FFB * BFF * ESO

	END
