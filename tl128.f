	PROGRAM TLCALC
C CALCULATES A TABLE OF TRANSMISSION COEFFICIENTS FOR CASCADE I
C FOR A RANGE OF DECAYING NUCLEI SPECIFIED BY THEIR
C ATOMIC NUMBER Z, THEIR MASS BEING CALCULATED INTERNALLY
C IN PARAM1

C T(IEKIN=1, KIN_PAR L1=1,32 IZF=1,4)
C EKIN = EMINT(IPS,IZF) + (IEKIN-1)*ESTEP MeV	(C.M.ENERGY)
C L1 = 1,16 FOR IZF=1,2; =1,32 FOR IZF=3,4 (ANGULAR MOMENTUM +1)
C IZF = 1,IZFMAX = DECAY CHANNEL (N,P,ALPHA,
C 4. CHANNEL TO BE SPECIFIED BY INPUT, MAY BE OMITTED)

C THE PROGRAM USES SUBROUTINES FROM PEREY'S OPTICAL MODEL
C CODE JIB. ON IBM COMPUTERS IT SHOULD BE RUN IN DOUBLE PRECISION
C USING THE APPROPRIATE OPTION OF THE H-COMPILER.
C THE TRANSMISSION COEFFICIENTS ARE STORED ON DISC (FILE 10,TEMP)
C IN THE FOLLOWING STEP THEY ARE CONVERTED TO NORMAL PRECISION
C USING THE PROGRAM COPYTL (FILE 10,TEMPORARY, TO FILE 11,PERM.)

C F. PUEHLHOFER, GSI DARMSTADT, 11/74, 9/78, 7/79

C F.Zwarts added ANSI FORTRAN'77 OPEN statement for file 11
C	Added variable energy step size
C	Fixed bug in XTRPOL which sometimes gave Tl of order 1000
C	Changed potential output format in order to save disk space
C	Changed formatted reads into free formatted reads
C	Some general cleanup using FORTRAN'77
C M. N. Harakeh changed program to double precision. Stored file is in
C   single precision since CASCADE does not require more than that.
C   Also separated common blocks into reals and integers. All
C   variables IXn, Xn and Xnn are dummy.
c Nov-2000 M.Yosoi   Rev. for IBM/AIX-xlf

	IMPLICIT REAL*8 (A-H,O-Z)

	PARAMETER	( KIN_PAR = 128 )
	COMMON /IC1/ IZFMAX,IZE(4),IAE(4),IZCN,IACN,IZMIN,IZMAX
	COMMON /RC1/ EMINT(4),ESTEP
	COMMON /C2/ LF,LC,KW,IL,LMAX
	COMMON /C4/ T(KIN_PAR,32,4)
	COMMON /POT/ KPOTN,KPOTP,KPOTA,KPOT4

C INPUT
	READ *, IZMIN,IZMAX,KOUTP,KOUTTL,KSTORE,ESTEP
C RANGE FOR Z (IZMIN,IZMAX) AND OUTPUT OPTIONS (0 FOR NO,|=0 FOR YES   
C P = PRINT PARAMETERS
C TL = PRINT TRANSMISSION COEFF (FORMAT SEE OUTTL)
C STORE = WRITE ON DISC
C ESTEP = Energy step size for Tl tables.
c open statement is moved from OUTTL
	IF (KSTORE.NE.0) OPEN ( UNIT=1, FILE='TLCALC.DAT'
     1  ,FORM='FORMATTED',STATUS='NEW') 
cc     1  ,FORM='UNFORMATTED',STATUS='NEW',RECL=KIN_PAR*128)
c    1  ,RECL=KIN_PAR*32)
	IF(ESTEP.LE.0.01D0) ESTEP = 1.D0
	READ *, IZE(4),IAE(4),EBE4,CNZ
C Z, A AND BINDING ENERGY OF THE 4. EMITTED PARTICLE
C CNZ = CONSTANT FOR CALCULATING NEUTRON EXCESS (N-Z = CNZ*Z**2+.5)

	READ *, KPOTN,KPOTP,KPOTA,KPOT4
CMNH	KPOTN Option for neutron potential
CMNH	KPOTP Option for proton potential
CMNH	KPOTA Option for alpha potential
CMNH	KPOT4 Option for 4th particle potential
	IF(KPOTN.EQ.0) KPOTN=1
	IF(KPOTP.EQ.0) KPOTP=1
	IF(KPOTA.EQ.0) KPOTA=1
	IF(KPOT4.EQ.0) KPOT4=1

	IZFMAX = 3
	IF (IAE(4).NE.0) IZFMAX = 4
	IF (CNZ.LE.0.0001D0) CNZ = 0.004D0
	IZE(1) = 0
	IZE(2) = 1
	IZE(3) = 2
	IAE(1) = 1
	IAE(2) = 1
	IAE(3) = 4
	EMINT(1) = 0.5D0 * ESTEP
	EMINT(2) = 0.5D0 * ESTEP
	EMINT(3) = 0.5D0 * ESTEP
	IF (IZFMAX.EQ.4) CALL SEMIN (EBE4)

	DO 60 IZ=IZMIN,IZMAX
	DO 55 IZF=1,IZFMAX
	CALL PARAM1 (IZ,CNZ,IZF)
25	DO 50 IEKIN=1,KIN_PAR
	CALL PARAM (IZ,IZF,IEKIN,KOUTP)
C OPTICAL MODEL PARAMETERS
	IF (LC.EQ.2) GO TO 54
	IF (LC.EQ.4) GO TO 100
	CALL SDATA
C DERIVED PARAMETERS
	IF (LC.EQ.0) GO TO 27
	PRINT 26, IZ,IZF,IEKIN
26	FORMAT (' ERROR  N.GT.147 ',3I5)
	GO TO 100
27	CALL SPOTCO
C COULOMB POTENTIAL
	CALL SPIN
C SPIN-ORBIT POTENTIAL
28	CALL SCOULO
C COULOMB ROUTINE
	IF (LC.LE.1) GO TO 32
	PRINT 30, IZ,IZF,IEKIN
30	FORMAT (' ERROR IN COULOMB ROUTINE',3I5)
	GO TO 100

32	IL = 0
	CALL SNUCPO
C NUCLEAR POTENTIAL

35	CALL SITEGL
C INTEGRATION FOR FIXED L
	CALL SSCMAT
C SCATTERING MATRIX
	IF (LC.EQ.2 .OR. IL.GE.LF-1) GO TO 40
C LC=2 IF TL=0
	IL = IL+1
	IF (IL.LE.LMAX) GO TO 35

	PRINT 38, IL,IZ,IZF,IEKIN
38	FORMAT (' IL TOO LARGE ',4I5)
	LMAX = LMAX + 2
	IF (LMAX.LE.49) GO TO 28
	GO TO 100

40	IF (KOUTP.EQ.0) GO TO 42
41	FORMAT ('+',I5)
	PRINT 41, IL

42	CALL CALCTL(IEKIN,IZF)
C CALCULATION OF T
	IF (LC.EQ.2) GO TO 54
50	CONTINUE
	IF(KOUTP.NE.0) PRINT '(1H1)'
	GO TO 55
54	EMINT(IZF) = EMINT(IZF) + ESTEP
	GO TO 25
55	CONTINUE
	CALL XTRPOL
	CALL OUTTL (KOUTTL,KSTORE)

60	CONTINUE

100	CONTINUE
	END
	SUBROUTINE SEMIN (EBE4)
C CALCULATES EMINT(4)
	IMPLICIT REAL*8 (A-H,O-Z)
	COMMON /IC1/ IZFMAX,IZE(4),IAE(4),IZCN,IACN,IZMIN,IZMAX
	COMMON /RC1/ EMINT(4),ESTEP
	IZR = IZE(4)
	IAR = IAE(4)

C Number of alpha's in the nucleus
	NALPHA = MIN (IZR/2,IAR/4)
	GAIN = EBE4 - NALPHA*28.297D0 + (IAR+NALPHA)*0.5D0 * ESTEP

C Bring into range 0...ESTEP
	EMINT(4) = DMOD( DMOD(GAIN,ESTEP)+ESTEP, ESTEP )
	RETURN
	END
	SUBROUTINE PARAM1 (IZ,CNZ,IZF)
C CALCULATES IZCN,IACN,ZI,AMI,ZT,AMT
C AND LF (=16 FOR IZF=1,2; =32 FOR 3,4)
	IMPLICIT REAL*8 (A-H,O-Z)
	COMMON /IC1/ IZFMAX,IZE(4),IAE(4),IZCN,IACN,IZMIN,IZMAX
	COMMON /RC1/ EMINT(4),ESTEP
	COMMON /C2/ LF,LC,KW,IL,LMAX
	COMMON /RC3/ ETA,A1,A2,A3,AS,ALR,ALI,RC,U,RR,BE,WS,WD,
     1  RI,US,WSS,RS,AK2,AK1,X(300),H,E,AMI,ZT,ZI,AMT,X1(774),
     1  X2(750),HC
	COMMON /IC3/ NB,IX1,IX2,J1
	IZCN = IZ
	NZCN = IDNINT(CNZ * IZ**2)
C ASSUMED NEUTRON EXCESS
	IACN = 2 * IZCN + NZCN

	LF = 16 * ((IZF+1)/2)
	ZI = IZE(IZF)
	AMI = IAE(IZF)
	ZT = IZCN - IZE(IZF)
	AMT = IACN - IAE(IZF)
CMN The next four statements were added to facilitate calculation of symmetric
CMN decay of 24Mg into two 12C nuclei
	IF(AMT.LE.0.D0) THEN
	  AMT=1.D0
	  ZT =1.D0
	ENDIF
CMN End of the statements
	RETURN
	END
	SUBROUTINE PARAM (IZ,IZF,IEKIN,KOUTP)
C CALCULATES E = ELAB, LMAX AND POTENTIAL PARAMETERS
	IMPLICIT REAL*8 (A-H,O-Z)
	COMMON /IC1/ IZFMAX,IZE(4),IAE(4),IZCN,IACN,IZMIN,IZMAX
	COMMON /RC1/ EMINT(4),ESTEP
	COMMON /C2/ LF,LC,KW,IL,LMAX
	COMMON /RC3/ ETA,A1,A2,A3,AS,ALR,ALI,RC,U,RR,BE,WS,WD,
     1	RI,US,WSS,RS,AK2,AK1,X(300),H,E,AMI,ZT,ZI,AMT,X1(774),
     1	X2(750),HC
	COMMON /IC3/ NB,IX1,IX2,J1
	COMMON /POT/ KPOTN,KPOTP,KPOTA,KPOT4

	ECM = EMINT(IZF) + (IEKIN-1) * ESTEP
	E = ECM * (AMI+AMT)/AMT
	EPSILON = (AMT - 2*ZT)/AMT
	AMT13 = AMT**(1.D0/3.D0) 
C LAB ENERGY

	RC = 0.D0
	US = 0.D0
	WSS = 0.D0
	RS = 0.D0
	AS = 0.D0
	BE = 0.D0
	NB = 0.D0
	A1 = 0.D0
	A2 = 2.D0
	A3 = 0.D0
	J1 = 0
	IF (ZT.GT.30.D0) THEN
	  EMINP = 5.0D-2*(ZT-17.D0) - 2.16D-4*(ZT-17.D0)**2
	ELSE
	  EMINP = 2.05D-2*ZT
	ENDIF
	EMIN = ZI * DSQRT(AMI) * EMINP
	LC = 0
	IF (ECM.LE.0.9D0*EMIN-0.5D0) LC = 2
C DANN WIRD NICHT GERECHNET, BZW. EMINT ERHOEHT
	RMATCH = 1.3D0 * AMT13 + 4.2D0
	LMAX = 0.34D0 * RMATCH * DSQRT(AMI*ECM) + 5.D0
	IF (AMI.LE.2.1D0) LMAX = LMAX + 2
	IF (LMAX.GT.49) LMAX = 49
C LMAX NEEDED FOR SCOULO, .NE.LF


9	GO TO (10,20,30,40), IZF

CMNH	NEUTRON POTENTIAL

CMNH	For the proton and neutron potentials the surface imaginary potential 
CMNH	is defined as 4*a*WD. All other definitions of potentials follow the
CMNH	same notation as Perey and perey.

CHA     Modify to fit normal fortran 77
10	IF((KPOTN.EQ.1).OR.((KPOTN.EQ.2).AND.(E.GT.60.))) THEN
11	  CONTINUE
CMNH	  Rapaport et al., Nucl.Phys. A330(1979)15 [Set B] 
	  U = 54.62D0 - 0.30D0*E - EPSILON*(25.3D0-2.D-2*E)
	  RR = 1.225D0 - 2.985D0/AMT
	  ALR = 0.668D0
	  WS = 0.D0
	  WD = 4.27D0 + 0.40D0*E - EPSILON*12.7D0
	
c	!Rapaport's definition should
c	!really be 4*a*WD, he mistakenly quotes 4*WD.
	  RI = 1.297D0
	  ALI = 0.59D0
	  US = 6.2D0
	  RS = 1.01D0
	  AS = 0.75D0
	  RC = 1.25D0
	  J1 = 1
	ELSEIF ((KPOTN.EQ.2).AND.(E.LE.60.)) THEN
CMNH	  Wilmore and Hodgson, Nucl.Phys. 55(1964)673
	  U = 47.01D0 - 0.267D0*ECM - 1.18D-3*ECM*ECM
c		!0.0018 in Perey is wrong
c		!see Wilmore and Hodgson and also Marmier and Sheldon

	  RR = 1.322D0 - 7.6D-4*AMT + 4.D-6*AMT*AMT - 8.D-9*AMT**3
	  ALR = 0.66D0
	  WS = 0.D0
	  WD = 9.52D0 - 5.3D-2*ECM
c		!0.53 as reported in Wilmore and 
c		!Hodgson is wrong see Marmier and Sheldon, Physics of Nuclei 
c		!and particles Vol.II, p.1107. They also report that in this 
c		!case the energy is ECM

	  RI = 1.266D0 - 3.7D-4*AMT + 2.D-6*AMT*AMT - 4.D-9*AMT**3
	  ALI = 0.48D0
	  US = 0.D0
	  RS = 1.01D0
	  AS = 0.65D0
	  RC = 1.25D0
	ELSE
	  PRINT 12, KPOTN
12	  FORMAT (' ERROR: NO OPTICAL POTENTIAL KPOTN = ', I1,
     1     ' AVAILABLE FOR NEUTRON DECAY')
	ENDIF
	GO TO 50

CMNH	PROTON POTENTIAL
20	IF((KPOTP.EQ.1).OR.((KPOTP.EQ.2).AND.(E.GE.60))) THEN
21	  CONTINUE
CMNH	  Becchetti and Greenlees, Phys.Rev. 182(1969)1190 (see also Perey 
CMNH	  and perey)
	  U = 54.0D0 - 0.32D0*E + 0.4D0*ZT/AMT13 + 24.D0*EPSILON
	  RR = 1.17D0
	  ALR = 0.75D0
	  WS = 0.22D0*E - 2.7D0
	  WS =DMAX1(0.D0,WS)
	  WD = 11.8D0 - 0.25D0*E + 12.D0*EPSILON
	  WD = DMAX1(0.D0,WD)
	  RI = 1.32D0
	  ALI = 0.51D0 + 0.7D0*EPSILON
	  US = 6.2D0
	  RS = 1.01D0
	  AS = 0.75D0
	  RC = 1.25D0
	  J1 = 1
	ELSEIF((KPOTP.EQ.2).AND.(E.LE.60.)) THEN
CMNH	  Perey, Phys.Rev. 131(1963)745
	  U = 53.3D0 - 0.55D0*E + 0.4D0*ZT/AMT13 + 27.D0*EPSILON
	  RR = 1.25D0
	  ALR = 0.65D0
	  WS = 0.D0
CMNH	According to Marmier and Sheldon p. 1109 WD and US differ for E < 17
CMNH	and E > 17 MeV
	  IF (E.LT.17.D0) THEN
	    WD = 13.5D0
	    US = 7.5D0
	  ELSE
	    WD = 3.D0*AMT13 
	    US = 8.5D0
	  ENDIF
	  RI = 1.25D0
	  ALI = 0.47D0
	  RS = 1.25D0
CMNH	  AS = 0.47D0
	  AS = 0.65D0	
c                        !See Marmier and Sheldon p. 1109
	  RC = 1.25D0
	  J1 = 1
	ELSE
	  PRINT 22, KPOTP
22	  FORMAT (' ERROR: NO OPTICAL POTENTIAL KPOTP = ', I1,
     1     ' AVAILABLE FOR PROTON DECAY')
	ENDIF
	GO TO 50

CMNH	ALPHA POTENTIAL
30	IF((KPOTA.EQ.1).OR.((KPOTA.EQ.2).AND.(E.GT.100.))
     1              .OR.((KPOTA.EQ.3).AND.(E.GT.60.))) THEN
31	  CONTINUE
CMNH	  Satchler, Nucl.Phys. 70(1965)177
	  U = 21.4D0 + 6.D-2*AMT + 90.D0/AMT13
	  RR = 1.2D0 + 1.5D0/AMT13
	  ALR = 0.55D0
	  WS = 8.D0 + 4.D-2*AMT
	  WD = 0.D0
	  RI = RR
	  ALI = ALR
	  RC = 1.3D0
	ELSEIF((KPOTA.EQ.2).AND.(E.LE.100.)) THEN
CMNH	  McFadden and Satchler, Nucl.Phys. 84(1966)177
	  U = 33.0D0 + 0.30D0*AMT + 450.D0/AMT13
	  RR = 1.45D0 - 1.75D-6*AMT**2
	  ALR = 0.52D0
	  WS = 24.D0 - 0.20D0*(U-160.D0)
	  WD = 0.D0
	  RI = RR
	  ALI = ALR
	  RC = 1.3D0
	ELSEIF((KPOTA.EQ.3).AND.(E.LT.60.)) THEN
CMNH	  Huizenga and Igo, Nucl.Phys. 29(62)462
	  U = 50.D0
	  RR = 1.17D0 + 1.77D0/AMT13
	  ALR = 0.576D0
	  WS = 1.65D0*DSQRT(AMT) - 2.D0
	  WD = 0.D0
	  RI = RR
	  ALI = ALR
	  RC = 1.17D0
	ELSE
	  PRINT 32, KPOTA
32	  FORMAT (' ERROR: NO OPTICAL POTENTIAL KPOTA = ', I1,
     1     ' AVAILABLE FOR ALPHA DECAY')
	ENDIF
	GO TO 50

40	IF (IZE(4).EQ.1 .AND. IAE(4).EQ.2) GO TO 410
	IF (IZE(4).EQ.1 .AND. IAE(4).EQ.3) GO TO 420
	IF (IZE(4).EQ.2 .AND. IAE(4).EQ.3) GO TO 430
	IF (IZE(4).EQ.3 .AND. IAE(4).EQ.6) GO TO 440
	IF (IZE(4).EQ.6 .AND. IAE(4).EQ.12)GO TO 450
	IF (IZE(4).EQ.8 .AND. IAE(4).EQ.16)GO TO 460
	IF (IAE(4).LE.20) GO TO 470
	PRINT 499
499	FORMAT (' ERROR: NO OPTICAL POTENTIAL AVAILABLE FOR DECAY 4')
	LC = 4
	GO TO 60

410	IF(KPOT4.EQ.1) THEN
CMNH	  Perrin et al., Nucl.Phys. A282(1977)221
	  U = 88.04D0 - 0.26D0*E + 1.77D0/AMT13
	  RR = 1.13D0
	  ALR = 0.80D0

	  WS = 0.D0
	  WD = 12.D0
	  RI = 1.15D0 + 0.75D0/AMT13
	  ALI = 0.585D0 + 0.05D0*AMT13
	  US = 5.2D0
	  RS = 0.85D0
	  AS = 0.475D0
	  RC = 1.30D0
	  J1 = 1
	ELSEIF(KPOT4.EQ.2) THEN
CMNH	  Hinterberger et al., Nucl.Phys. A111(1968) 265
	  U = 79.D0 - 0.35D0*E + 1.5D0*ZT/AMT13
	  RR = 1.25D0
	  ALR = 0.81D0 - 0.024D0*AMT13
	  WS = 0.D0
	  WD = 13.D0
	  RI = 1.25D0
	  ALI = 0.51D0 + 0.076D0*AMT13
	  US = 6.D0
	  RS = 1.25D0
	  AS = 0.81D0 - 0.024D0*AMT13
	  RC = 1.30D0
	  J1 = 1
	ELSEIF(KPOT4.EQ.3) THEN
CMNH	  Daehnick et al., Phys.Rev. C21(1980)2253 [Set L; Table III] 

	  BETA = DEXP(-(E/100.D0)**2)
	  NT = AMT - ZT
	  XMU1=DEXP(-(DFLOAT(8-NT)/2.D0)**2)
     1         +DEXP(-(DFLOAT(20-NT)/2.D0)**2)
	  XMU2=DEXP(-(DFLOAT(28-NT)/2.D0)**2)
     1         +DEXP(-(DFLOAT(50-NT)/2.D0)**2)
	  XMU3=DEXP(-(DFLOAT(82-NT)/2.D0)**2)
     1         +DEXP(-(DFLOAT(126-NT)/2.D0)**2)
	  XMU=XMU1+XMU2+XMU3

	  U = 88.5D0 - 0.26D0*E + 0.88D0*ZT/AMT13
	  RR = 1.17D0
	  ALR = 0.709D0 + 0.0017D0*E
	  WS = (12.2D0 + 0.026D0*E)*(1.D0 - BETA)
	  WD = (12.2D0 + 0.026D0*E)*BETA

	  RI = 1.325D0
	  ALI = 0.53D0 + 0.07D0*AMT13 - 0.04D0*XMU
	  US = 7.33D0 - 0.029D0*E
	  RS = 1.07D0
	  AS = 0.66D0
	  RC = 1.30D0
	  J1 = 1
	ELSEIF(KPOT4.EQ.4) THEN
CMNH	  DEUTERON POTENTIAL: Lohr and Haeberli, Nucl.Phys. A232(1974)381 
CMNH	  (see also Perey and Perey)
	  U = 91.13D0 + 2.2D0*ZT/AMT13
	  RR = 1.05D0
	  ALR = 0.86D0
	  WS = 0.D0
	  WD = 218.D0/AMT13**2
	  RI = 1.43D0
	  ALI = 0.50D0 + 1.3D-2*AMT13**2
	  RC = 1.30D0
	ELSE
	  PRINT 42, KPOT4
42	  FORMAT (' ERROR: NO OPTICAL POTENTIAL KPOT4 = ', I1,
     1     ' AVAILABLE FOR ALPHA DECAY')
	ENDIF
	GO TO 50

420	IF(KPOT4.EQ.1) THEN
CMNH	  TRITON POTENTIAL: Becchetti and Greenlees (see Perey and Perey)
	  U = 165.D0 - 0.17D0*E - 6.4D0*EPSILON
	  RR = 1.20D0
	  ALR = 0.72D0
	  WS = 46.D0 - 0.33D0*E - 110.D0*EPSILON
	  WD = 0.D0
	  RI = 1.40D0
	  ALI = 0.84D0
	  RC = 1.30D0
	ELSE
	  PRINT 42, KPOT4
	ENDIF
	GO TO 50

430	IF(KPOT4.EQ.1) THEN
CMNH	  3HE POTENTIAL: Same source as for tritons
	  U = 151.9D0 - 0.17D0*E + 50.D0*EPSILON
	  RR = 1.20D0
	  ALR = 0.72D0
	  WS = 41.7D0 - 0.33D0*E + 44.D0*EPSILON
	  WD = 0.D0
	  RI = 1.40D0
	  ALI = 0.88D0
	  RC = 1.30D0
	ELSE
	  PRINT 42, KPOT4
	ENDIF
	GO TO 50

440	IF(KPOT4.EQ.1) THEN
CMNH	  6LI POTENTIAL: Chua et al., Nucl.Phys. A273(76)243
	  U = 370.D0- 3.D0*E
	  RR = 1.30D0
	  ALR = 0.70D0
	  WS = 10.D0 + 19.D0*DEXP(-AMT/100.D0)
	  WD = 0.D0
	  RI = 1.70D0
	  ALI = 0.90D0
	  RC = 1.40D0
	ELSE
	  PRINT 42, KPOT4
	ENDIF
	GO TO 50

CMNH	12C POTENTIAL
450	IF(KPOT4.EQ.1) THEN
	  GO TO 470
	ELSEIF(KPOT4.EQ.2) THEN
CMNH	  Gobbi et al., ANL report 7837(1971)
	  U  = 14.D0	
	  RR =  1.35D0
	  ALR=  0.35D0
	  WS =  0.4D0 + 0.1D0*ECM
	  WD =  0.D0
	  RI =  1.40D0
	  ALI=  0.35D0
	  RC =  RI
	ELSEIF(KPOT4.EQ.3) THEN
CMNH	  Extracted from Perey AND Perey for 28Si at 84 MeV
	  U = 55.D0
	  RR = 1.112D0
	  ALR = 0.631D0
	  WS = 16.D0
	  WD = 0.D0
	  RI = 1.203D0
	  ALI = 0.776D0
	  RC = 0.907D0
	ELSE
	  PRINT 42, KPOT4
	ENDIF
	GO TO 50

CMNH	16O POTENTIAL
460	IF(KPOT4.EQ.1) THEN
	  GO TO 470
	ELSEIF(KPOT4.EQ.2) THEN
CMNH	  Extracted from Perey and Perey
	  U = 100.D0
	  RR = 2.D0 + 0.5D0*DEXP(-AMT/35.D0)
	  CORR = AMT13/(AMT13 + AMI**(1.D0/3.D0))
	  RR = CORR * RR	
c                               	!Heavy ion definition of radii
	  ALR = 0.5D0
	  WS = 14.D0 + 28.D0*DEXP(-AMT/50.D0)
	  WD = 0.D0
	  RI = RR
	  ALI = 0.5D0
	  RC = 1.40D0 * CORR
	ELSE
	  PRINT 42, KPOT4
	ENDIF
	GO TO 50

470	CONTINUE
CMNH	General heavy ion potential obtained from Voos et al., Nucl.Phys. 
CMNH	A135(1969)207
	U = 100.D0
	RR = 1.20D0
	ALR = 0.49D0
	WS = 40.D0
	WD = 0.D0
	RI = 1.20D0
	ALI = 0.32D0
	RC = 1.4D0
	GO TO 50

C PARAMETER OUTPUT
50	IF (KOUTP.EQ.0) GO TO 60
	PRINT 52, IZ,IACN,IZF,IEKIN,ECM,U,RR,ALR,WS,WD,RI,ALI,US,RS,
     1  AS,RC,LMAX
52	FORMAT (T15,I3,I4,2I3,2X,F7.3,2X,3F7.3,2X,4F7.3,2X,3F7.3,2X,
     1	F6.3,I4)
60	RETURN
	END
	SUBROUTINE SDATA
C DERIVED PARAMETERS
	IMPLICIT REAL*8 (A-H,O-Z)
	COMMON /C2/ LF,LC,KW,IL,LMAX
	COMMON /RC3/ ETA,A1,A2,A3,ALPHAS,ALPHAR,ALPHAI,ROC,UL,
     1	ROR,BETA,WSL,WDL,ROI,VSPL,WSPL,ROS,AK2,AK1,X(300),H,ELAB,AMI,
     1	ZT,ZI,AMT,RR,RI,U,WS,WD,RMM,RC,RS,WSP,VSP,X2(764),
     1	X3(750),HC
	COMMON /IC3/ NB,NN,N,IX1

CMNH	Introduced the definition of radius for heavy ions if mass4 > 6
	IF (AMI.GE.7.D0) THEN
	  PO = AMT ** (1.D0/3.D0) + AMI ** (1.D0/3.D0)
	ELSE
	  PO = AMT ** (1.D0/3.D0)
	ENDIF
	RR=ROR*PO
	RI=ROI*PO
	RC=ROC*PO
	RS=ROS*PO
	AMASP=AMI*AMT/(AMI+AMT)
	AMASS=AMASP*4.783258D-2
	ES=ELAB*AMT/(AMI+AMT)
	ETA=0.157454D0*ZI*ZT*DSQRT(AMASP/ES)
	AK2=AMASS*ES
	AK1=DSQRT(AK2)
	U=UL*AMASS
	WS=WSL*AMASS
	WD=WDL*AMASS
	VSP=VSPL*AMASS*1.1057D-2
	WSP=WSPL*AMASS*1.1057D-2
	RRM=RR+7*ALPHAR
	RIM=RI+7*ALPHAI
	RSM=RS+7*ALPHAS
	RMM=DMAX1(RRM,RIM,RSM)
	H = 0.1D0
	IF (AMI.GT.4.1D0 .OR. RMM/H.GT.147.D0) H = RMM/147.D0
	HC = H
	N=RMM/H
	IF (N.LE.147) GO TO 9
	LC=2
	GO TO 12
9	LC=0
	AWN=N
	RMM=AWN*H
	NN=2*N
	X(1)=H
	DO 10 I=2,300
10	X(I)=X(I-1)+H
	IF (NB) 11,11,12
11	NB=5
12	RETURN
	END
	SUBROUTINE SPOTCO
	IMPLICIT REAL*8 (A-H,O-Z)
	COMMON /RC3/ ETA,X1(17),EK,X(300),H,X2(11),RC,X3(3),X4(764),
     1	X5(600),VC(150),X6
	B1=ETA*EK/RC
	N=RC/H
	DO 1 I=1,N
1	VC(I)=B1*(3.D0-(X(I)/RC)**2)
	N=N+1
	DO 2 I=N,150
2	VC(I)=2.D0*EK*ETA/X(I)
	RETURN
	END
	SUBROUTINE SPIN
	IMPLICIT REAL*8 (A-H,O-Z)
	COMMON /RC3/ X11(4),AS,X1(14),X(300),X2(13),RS,WS,VS,X3(464),
     1	SPIR(150),SPII(150),X4(751)
	COMMON /IC3/ IX1,IX2,N,I1
	DO 1 I=1,150
	SPIR(I)=0.D0
1	SPII(I)=0.D0
	IF (I1) 3,3,4
4	DO 2 I=1,N
	A1=(X(I)-RS)/AS
	B=DEXP(A1)
	C=B*VS/(X(I)*AS)
	SPIR(I)=C/((1+B)**2)
2	SPII(I)=SPIR(I)*WS/VS
3	RETURN
	END
	SUBROUTINE SCOULO
	IMPLICIT REAL*8 (A-H,O-Z)
	COMMON /C2/ LF,J,KW,IL,LMAX
	COMMON /RC3/ HETA,X1(16),AKS,AK,X2(311),RM,X11(4),X3(200),
     1	SIGMA(51),X4(4),F(56),FP(51),G(51),GP(51),
     1	X5(300),X6(750),H
	J=0
23	HETAS=HETA**2
	RA=RM
	N=0
	L=51
	AL=50.D0
	C1=AL+1.D0
	PHI=DSQRT(C1**2+HETAS)
	CHI= DATAN(HETA/C1)
	SIGMA(L)=(AL+.5D0)*CHI+HETA*DLOG(PHI)-HETA-DSIN(CHI)
     1   /(12.D0*PHI)+DSIN(3.D0*CHI)/(360.D0*PHI**3)-DSIN(5.D0*CHI)
     2   /(1260.D0*PHI**5)+DSIN(7.D0*CHI)/(1680.D0*PHI**7)
     3   -DSIN(9.D0*CHI)/(1188.D0*PHI**9)
1	SIGMA(L-1)=SIGMA(L)-DATAN(HETA/AL)
	AL=AL-1.D0
	L=L-1
	IF(L.GE.2) GOTO 1
2	I=0
	R=RA+H
9	C1=AK*R
	C2=C1*2
	SS=1.
CCCD0
	S1=1.D0
	AN=0.D0
	S2=0.D0
	SL=0.D0
	T1=0.D0
	TS=0.D0
	T2=TL
	T2=1.D0-HETA/C1
	TL=1.D0-HETA/C1
	N1=20
3	C3=AN+1.D0
	C4=C3*C2
	S4=S1
	C5=(2*AN+1.D0)*HETA/C4
	C6=(HETAS-AN*C3)/C4
	S1=C5*S1-C6*T1
	T1=C5*T1+C6*S4
	S3=S2
	S2=C5*S2-C6*T2-S1/C1
	T2=C5*T2+C6*S3-T1/C1
	AN=C3
	SS=SS+S1
	TS=TS+T1
	SL=SL+S2
	TL=TL+T2
	N1=N1-1
	IF(N1.GT.0) GO TO 3
C Prevent overflow
	IF(DABS(SS).GT.1.D12.OR.DABS(TL).GT.1.D12) THEN
C Further checking is useless, since double precision usually 
c has 12 significant digits
		W = 1.D0
	ELSE
		W=DABS(SS*TL-SL*TS-1.D0)
	ENDIF
	IF(W.LE.1D-6) GO TO 6
	RA=RA+20*H
	N=N+10
	GO TO 2
6	THETA=C1-HETA*DLOG(C2)+SIGMA(1)
	C7=DCOS(THETA)
	C8=DSIN(THETA)
	G(1)=SS*C7-TS*C8
	GP(1)=AK*(SL*C7-TL*C8)
	IF(I.NE.0) GO TO 8
	G1=G(1)
	G3=G1
	I=1
	R=RA
	GO TO 9
8	IF(RM.EQ.RA) GO TO 11
	C3=2*HETA*AK
	C4=10*H**2/12.D0
	C5=C4/10.D0
	G7=G(1)
	M=N
	R=RA+H
	AK1=AKS-C3/R
	R=RA
	AK2=AKS-C3/R
	AK4=AK2*G7
14	IF(M.LE.0)GO TO 13
	R=R-H
	AK3=AKS-C3/R
	G2=((2.D0-C4*AK2)*G7-(1.D0+C5*AK1)*G1)/(1.D0+C5*AK3)
	R=R-H
	AK1=AKS-C3/R
	G1=((2.D0-C4*AK3)*G2-(1.D0+C5*AK2)*G7)/(1.D0+C5*AK1)
	G7=G1
	AK4=AK4+4*G2*AK3+2*G1*AK1
	AK2=AK1
	G1=G2
	AK1=AK3
	M=M-1
	GO TO 14
13	G(1)=G7
	GP(1)=H*(AK4-G7*AK2)/3.D0+GP(1)
11	L=LMAX+4
	C5=AK*RM
	F(L+2)=0.D0
	F(L+1)=10D-36
	AL=L
15	C3=AL*2+1.D0
	C4=AL+1.D0
	F(L)=AL/DSQRT(AL**2+HETAS)*((C3*HETA/
     1	(AL*C4)+C3/C5)*F(L+1)-DSQRT(C4**2+HETAS)/
     2	C4*F(L+2))
	AL=AL-1.D0
	L=L-1
	IF(L.GT.0) GO TO 15
	FP(1)=AK*((HETA+1.D0/C5)*F(1)-DSQRT(HETAS+1.D0)*F(2))
	ALPHA=AK/(FP(1)*G(1)-F(1)*GP(1))
	FP(1)=ALPHA*FP(1)
	L1=LMAX+1

	DO 17 L=1,L1
17	F(L)=ALPHA*F(L)
	AL=0.D0
	DO 18 L=1,L1
	AL=AL+1.D0
	C3=AL/C5+HETA/AL
	C4=DSQRT(AL**2+HETAS)/AL
	FP(L+1)=AK*(C4*F(L)-C3*F(L+1))
	G(L+1)=C3*G(L)/C4-GP(L)/(C4*AK)
	GP(L+1)=AK*(C4*G(L)-C3*G(L+1))
	W=DABS((FP(L)*G(L)-F(L)*GP(L))/AK-1.D0)
	IF(W.GT.1D-6) GO TO 20
18	CONTINUE
	RETURN

20	G1=G3
	J=J+1
	IF(J.LT.2) GO TO 6

	END
	SUBROUTINE SNUCPO
	IMPLICIT REAL*8 (A-H,O-Z)
	COMMON /RC3/ X11(5),AR,AI,X1(12),X(300),X22(6),RR,RI,U,
     1  WS,WD,X33(5),X2(764),FR(300),FI(300),
     1  X3(150),X4
	COMMON /IC3/ IX1,NN,IX2,IX3
	DO 1 I=1,300
	FR(I)=0.D0
1	FI(I)=0.D0
	B1=2*RR
	B2=2*AR
	DO 2 I=2,NN,2
2	FR(I)=U/(1.D0+DEXP((X(I)-B1)/B2))
	B1=4*WD
	B2=2*RI
	B3=2*AI
	DO 3 I=2,NN,2
	EXPI=DEXP((X(I)-B2)/B3)
3	FI(I)=WS/(1+EXPI)+B1*EXPI/((1+EXPI)**2)
	RETURN
	END
	SUBROUTINE SITEGL
	IMPLICIT REAL*8 (A-H,O-Z)
	COMMON /C2/ LF,LC,KW,IL,LMAX
	COMMON /RC3/ X1(17),AKS,AKX,X(300),H,X2(12),X3(3),
     1	X4(251),DERI,DERR,DERDR,DERDI,X5(209),
     1	SPIR(150),SPII(150),U(300),W(300),VC(150),X6
	COMMON /IC3/ IX1,IX2,N,I1
	DIMENSION FR(150),FI(150),UR(150),UI(150)
	AL=DBLE(IL)
	N1 = N + 1
	N2=N1+1
	N3=N2+1
	N4=N3-4
	N5=N4-1
	N6=N5-1
	IF (IL.EQ.0) THEN
		NS=1
	ELSE
		NS=0
	ENDIF
	DO 4 I=1,N
	FR(I)=(H**2)*(AKS-AL*(AL+1.D0)/(X(I)**2)-VC(I)
     1	+U(2*I)+AL*SPIR(I))
4	FI(I)=(H**2)*(W(2*I)+AL*SPII(I))
	DO 5 I=N1,N3
	FR(I)=(H**2)*(AKS-AL*(AL+1.D0)/(X(I)**2)-VC(I))
5	FI(I)=0.D0
12	UR(1)=H**(IL+1)
	UI(1)=0.D0
	IF (IL.EQ.1) THEN
		B1R1=26.D0
	ELSE
		B1R1=24.D0
	ENDIF
	B1R=B1R1-10*FR(1)
	CR=B1R*UR(1)
	B1I=-10*FI(1)
	CI=B1I*UR(1)
	B3R=12.D0+FR(2)
	B3N=B3R**2+FI(2)**2
	UR(2)=(CR*B3R+CI*FI(2))/B3N
	UI(2)=(CI*B3R-CR*FI(2))/B3N
	DO 9 I=2,N2
	B1R=24.D0-10*FR(I)
	B1I=-10*FI(I)
	B2R=12.D0+FR(I-1)
	B3R=12.D0+FR(I+1)
	CR=B1R*UR(I)-B1I*UI(I)-B2R*UR(I-1)+FI(I-1)*UI(I-1)
	CI=B1I*UR(I)+B1R*UI(I)-FI(I-1)*UR(I-1)-B2R*UI(I-1)
	B3N=B3R**2+FI(I+1)**2
	UR(I+1)=(CR*B3R+CI*FI(I+1))/B3N
9	UI(I+1)=(CI*B3R-CR*FI(I+1))/B3N
	URP=(UR(N3)-UR(N6)+9*(UR(N5)-UR(N2))+45*(UR(N1)
     1	-UR(N4)))/(60*H)
	UIP=(UI(N3)-UI(N6)+9*(UI(N5)-UI(N2))+45*(UI(N1)
     1	-UI(N4)))/(60*H)
	U2=UR(N)**2+UI(N)**2
	IF(U2.EQ.0.D0) THEN
	  DERR=0.D0
	  DERI=0.D0
	ELSE
	  DERR=(URP*UR(N)+UIP*UI(N))/U2
	  DERI=(UIP*UR(N)-URP*UI(N))/U2
	ENDIF
	IF (NS.EQ.0) THEN
	  DERDR=DERR
	  DERDI=DERI
	  IF (I1.GT.0) THEN
	  NS=1
	    DO 11 I=1,N
		FR(I)=(H**2)*(AKS-AL*(AL+1.D0)/(X(I)**2)-VC(I)
     1	+U(2*I)-(AL+1.D0)*SPIR(I))
11	    FI(I)=(H**2)*(W(2*I)-(AL+1.D0)*SPII(I))
	  GO TO 12
	  ENDIF
	ENDIF
	RETURN
	END
	SUBROUTINE SSCMAT
C SCATTERING MATRIX ELEMENT (IEKIN AND IL FIXED)
	IMPLICIT REAL*8 (A-H,O-Z)
	COMMON /C2/ LF,LC,KW,IL,LX
	COMMON /RC3/ X1(335),SRU(50),SIU(50),SRD(50),SID(50),X2(51),
     1	DID,DRD,DRU,DIU,F(56),FP(51),G(51),GP(51),
     1	X3(300),X4(750),X5
	IL1=IL+1
	IF (IL.GT.0) GO TO 2
	DRU=DRD
	DIU=DID
2	SNR=FP(IL1)-F(IL1)*DRU+G(IL1)*DIU
	SNI=GP(IL1)-F(IL1)*DIU-G(IL1)*DRU
	SDR=F(IL1)*DRU+G(IL1)*DIU-FP(IL1)
	SDI=GP(IL1)+F(IL1)*DIU-G(IL1)*DRU
	SNN=SDR**2+SDI**2
	IF(SNN.EQ.0.) THEN
	  SRU(IL1)=0.D0
	  SIU(IL1)=0.D0
	ELSE
	  SRU(IL1)=(SNR*SDR+SNI*SDI)/SNN
	  SIU(IL1)=(SNI*SDR-SNR*SDI)/SNN
	ENDIF
3	SNR=FP(IL1)-F(IL1)*DRD+G(IL1)*DID
	SNI=GP(IL1)-F(IL1)*DID-G(IL1)*DRD
	SDR=F(IL1)*DRD+G(IL1)*DID-FP(IL1)
	SDI=GP(IL1)+F(IL1)*DID-G(IL1)*DRD
	SNN=SDR**2+SDI**2
	IF(SNN.EQ.0.D0) THEN
	  SRD(IL1)=0.D0
	  SID(IL1)=0.D0
	ELSE
	  SRD(IL1)=(SNR*SDR+SNI*SDI)/SNN
	  SID(IL1)=(SNI*SDR-SNR*SDI)/SNN
	ENDIF
	IF (	5.D-12 .LT. 1.D0-DABS(SRU(IL1))	.OR.
     1	5.D-12 .LT. 1.D0-DABS(SRD(IL1))	.OR.
     1	1.D-8 .LT.   DABS(SIU(IL1))	.OR.
     1	1.D-8 .LT.   DABS(SID(IL1)	)) THEN
		LC = 1
	ELSE
		LC=2
	ENDIF
	RETURN
	END
	SUBROUTINE CALCTL (IEKIN,IZF)
C CALCULATES THE TRANSMISSION COEFFICIENTS T(IEKIN,L1,IZF) FROM
C THE SCATTERING MATRIX

	IMPLICIT REAL*8 (A-H,O-Z)
	PARAMETER	( KIN_PAR = 128 )

	COMMON /C2/ LF,LC,KW,IL,LX
	COMMON /RC3/ X1(325),X2(10),SRU(50),SIU(50),SRD(50),SID(50),
     1	X3(564),X4(751)
	COMMON /C4/ T(KIN_PAR,32,4)

	L1MIN = 1
	L1MAX = MIN( LF, IL+1 )

	DO 30 L1=1,L1MAX
	TLU = 1.D0 - SRU(L1)**2 - SIU(L1)**2
	TLD = 1.D0 - SRD(L1)**2 - SID(L1)**2
C SPIN UP, DOWN
	CL = DBLE(L1 - 1)
	TL = ((CL+1.D0)*TLU + CL*TLD)/(2*CL+1.D0)
	IF (TL.LT.1D-14) THEN
C***************************************************************
C		TL = 1D-30
		TL = 0.D0
C CHANGED BY DON LEACH BECAUSE OF LOG OF ZERO PROBLEM	9/17/81
C Set back to 0 since extrapolation problem was fixed	F.Zwarts 16-AUG-1982
C***************************************************************
		LC = 1
	ELSE
		LC = 0
	ENDIF
	T(IEKIN,L1,IZF) = TL
30	CONTINUE

	IF (IL.EQ.0 .AND. LC.EQ.1) LC = 2
39	DO 40 L1=L1MAX+1,LF
40	T(IEKIN,L1,IZF) = 0.D0

100	RETURN
	END
	SUBROUTINE XTRPOL
C EXTRAPOLATES T(IEKIN,L1,IZF) TO SMALLER VALUES OF IEKIN

	IMPLICIT REAL*8 (A-H,O-Z)
	PARAMETER	( KIN_PAR = 128 )

	COMMON /IC1/ IZFMAX,IZE(4),IAE(4),IZCN,IACN,IZMIN,IZMAX
	COMMON /RC1/ EMINT(4),ESTEP
	COMMON /C2/ LF,LC,KW,IL,LMAX
	COMMON /C4/ T(KIN_PAR,32,4)
C F.Zwarts: Because of log of 0 problem avoid using logarithms
C	Fixed bug which made T increasing instead of decreasing with
C	decreasing IEKIN
	DO 40 IZF=1,IZFMAX
	DO 40 L1 = 2, 16 * ( (IZF+1)/2 )

C First special case IEKIN = KIN_PAR-4 to KIN_PAR-1

	IF (T(KIN_PAR-1,L1,IZF).LE.1D-12) GO TO 30           
    
	IF(T(KIN_PAR-2,L1,IZF).LT.1D-12) THEN                    
	    IF (T(KIN_PAR,L1,IZF).GT.0) THEN                     
		T1DT2 = ( T(KIN_PAR-1,L1,IZF)/T(KIN_PAR,L1,IZF) )
		IF(T1DT2.GE.1) T1DT2 = 0.D0
	    ELSE                                             
		T1DT2 = 0.D0                                   
	    ENDIF                                            
	    T(KIN_PAR-3,L1,IZF) = T(KIN_PAR-2,L1,IZF) * T1DT2
	    T(KIN_PAR-4,L1,IZF) = T(KIN_PAR-3,L1,IZF) * T1DT2
	    GO TO 30                        
           
	ENDIF                                          

C Now for all other IEKINs
	DO 20 IEKIN=KIN_PAR-3,1,-1
C For large T the calculation is assumed to be good.
C The criterium is computer dependent
	    IF (T(IEKIN,L1,IZF).GT.1D-12) GO TO 20
C Beware of underflows because of exponentiation, first take ratio then
C exponent.
C Also do not divide by 0
	    IF ( T(IEKIN+2,L1,IZF).GT.0.D0 ) THEN
		T1DT2 = ( T(IEKIN+1,L1,IZF)/T(IEKIN+2,L1,IZF) )
C In case of unexpected rise of Tl with decreasing IEKIN

		IF(T1DT2.GE.1) T1DT2 = 0.D0
	    ELSE
		T1DT2 = 0.D0
	    ENDIF
	    T(IEKIN,L1,IZF) = T(IEKIN+3,L1,IZF) * T1DT2 ** 3
	    IF (IEKIN.GT.1) THEN
		IF ( T(IEKIN+2,L1,IZF).GT.0.D0 ) THEN
		    T0DT2 = T(IEKIN+0,L1,IZF)/T(IEKIN+2,L1,IZF)
		    IF(T0DT2.GE.1) T0DT2 = 0.D0
		    T3DT2 = ( T(IEKIN+3,L1,IZF)/T(IEKIN+2,L1,IZF) )
		ELSE
		    T0DT2 = 0.D0
		    T3DT2 = 0.D0
		ENDIF
		T(IEKIN-1,L1,IZF) = T(IEKIN+3,L1,IZF) * T0DT2 ** 2
		IF (IEKIN.GT.2) THEN
		    T(IEKIN-2,L1,IZF) = T(IEKIN+1,L1,IZF) * 
     1                                  (T0DT2*T3DT2) ** 3
		ENDIF
	    ENDIF
C Tl for still lower IEKIN assumed to be 0 already
	    GO TO 30
20	    CONTINUE
30	CONTINUE

40	CONTINUE
	RETURN
	END
	SUBROUTINE OUTTL (KOUTTL,KSTORE)
C OUTPUT OF THE TRANSMISSION COEFFICIENTS T(IEKIN,L1,IZF)
C FOR FIXED IZ TO PRINTER AND DISC

	IMPLICIT REAL*8 (A-H,O-Z)
	PARAMETER	( KIN_PAR = 128 )

	COMMON /IC1/ IZFMAX,IZE(4),IAE(4),IZCN,IACN,IZMIN,IZMAX
	COMMON /RC1/ EMINT(4),ESTEP
	COMMON /C2/ LF,LC,KW,IL,LMAX
	COMMON /C4/ T(KIN_PAR,32,4)
	DIMENSION T1(KIN_PAR*32),T2(KIN_PAR*32),
     1            T3(KIN_PAR*32),T4(KIN_PAR*32)
	REAL*4 T11(KIN_PAR*32),T33(KIN_PAR*32),T44(KIN_PAR*32)
c	EQUIVALENCE (T1(1),T(0*KIN_PAR*32+1))
c	EQUIVALENCE (T2(1),T(1*KIN_PAR*32+1))
c	EQUIVALENCE (T3(1),T(2*KIN_PAR*32+1))
c	EQUIVALENCE (T4(1),T(3*KIN_PAR*32+1))
	EQUIVALENCE (T1(1),T(1,1,1))
	EQUIVALENCE (T2(1),T(1,1,2))
	EQUIVALENCE (T3(1),T(1,1,3))
	EQUIVALENCE (T4(1),T(1,1,4))

C TRANSFER OF PARAMETERS
	DO 10 IZF=1,IZFMAX
	T(1,13,IZF) = IZCN
	T(1,14,IZF) = IACN
	T(1,15,IZF) = IZFMAX
	T(1,16,IZF) = EMINT(IZF)
	T(2,15,IZF) = IZE(IZF)
10	T(2,16,IZF) = IAE(IZF)
	T(1,32,3) = IZMAX
	T(1,31,3) = ESTEP

C OUTPUT ON LINEPRINTER    KOUTTL = 0 :  NO OUTPUT
C                                   1 :  F-FORMAT
C                                   2 :  D-FORMAT
	IF (KOUTTL.EQ.0) GO TO 50
	DO 40 IZF=1,IZFMAX
	LF = (IZF+1)/2
	LF = 16 * LF
	IEKIN = 1
	IF (KOUTTL.EQ.1) PRINT 11, IZCN,IZF,IEKIN,
     1    (T(1,L1,IZF),L1=1,16)
	IF (KOUTTL.EQ.2) PRINT 21, IZCN,IZF,IEKIN,
     1    (T(1,L1,IZF),L1=1,16)
	IEKIN = 2
	IF (KOUTTL.EQ.1) PRINT 12, IZCN,IZF,IEKIN,
     1    (T(2,L1,IZF),L1=1,16)
	IF (KOUTTL.EQ.2) PRINT 22, IZCN,IZF,IEKIN,
     1    (T(2,L1,IZF),L1=1,16)
	DO 30 IEKIN=3, KIN_PAR
	IF (KOUTTL.EQ.1) PRINT 13, IZCN,IZF,IEKIN,(T(IEKIN,L1,IZF),
     1	L1=1,16)
	IF (KOUTTL.EQ.2) PRINT 23, IZCN,IZF,IEKIN,(T(IEKIN,L1,IZF),
     1	L1=1,16)
30	CONTINUE
	IF (LF.LE.16) GO TO 39
	IEKIN = 1
	IF (KOUTTL.EQ.1) PRINT 14, IZCN,IZF,IEKIN,
     1    (T(1,L1,IZF),	L1=17,32)
	IF (KOUTTL.EQ.2) PRINT 24, IZCN,IZF,IEKIN,
     1    (T(1,L1,IZF), L1=17,32)
	DO 35 IEKIN=2, KIN_PAR
	IF (KOUTTL.EQ.1) PRINT 13, IZCN,IZF,IEKIN,(T(IEKIN,L1,IZF),
     1	L1=17,32)
	IF (KOUTTL.EQ.2) PRINT 23, IZCN,IZF,IEKIN,(T(IEKIN,L1,IZF),
     1	L1=17,32)
35	CONTINUE
39	PRINT 15
40	CONTINUE


11	FORMAT (1H ,3I3,1X,12F7.4,3F7.1,F7.3)
12	FORMAT (1H ,3I3,1X,14F7.4,2F7.1)
13	FORMAT (1H ,3I3,1X,16F7.4)
14	FORMAT (1H ,3I3,1X,14F7.4,F7.4,F7.1)
15	FORMAT (1H1)
21	FORMAT (1H ,3I3,1X,12D7.1,3F7.1,F7.3)
22	FORMAT (1H ,3I3,1X,14D7.1,2F7.1)
23	FORMAT (1H ,3I3,1X,16D7.1)
24	FORMAT (1H ,3I3,1X,14D7.1,F7.4,F7.1)
50	CONTINUE

C STORAGE ON DISC, IF KSTORE .NE. 0
C 2 (IF IZFMAX=4 THEN 3) 1K RECORDS PER Z
	IF (KSTORE.NE.0) THEN
c open statement is moved to main
c		OPEN ( UNIT=11, FILE='TLCALC.DAT'
c    1  ,FORM='UNFORMATTED',STATUS='NEW')
c    1  ,RECL=KIN_PAR*32)
c    1  ,RECORDTYPE='FIXED')		! Not ANSI FORTRAN
c    1  )

C Put proton and neutron Tl into one table
		DO 60 I=1, KIN_PAR*16
60			T1(I+KIN_PAR*16) = T2(I)
		DO 61 I=1, KIN_PAR*32
			T11(I) = SNGL(T1(I))
			T33(I) = SNGL(T3(I))
61			T44(I) = SNGL(T4(I))
	
c		WRITE (11) T11
c		WRITE (11) T33
c		IF (IZFMAX.EQ.4) WRITE (11) T44 
c-Linux
		WRITE (1,'(4096g17.10)') T11
		WRITE (1,'(4096g17.10)') T33
		IF (IZFMAX.EQ.4) WRITE (1,'(4096g17.10)') T44 
	ENDIF

	END
